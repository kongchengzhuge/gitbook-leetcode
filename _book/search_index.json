{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["gitbook地址：https://kongchengzhuge.gitbook.io/leetcode/","readme.md","我是如何做leetcod","我第一遍做leetcode的时候，做了一些简单题，觉得就算做不出也能看懂别人的思路，就开始看不起简单题。慢慢的，后面只做hard级别的题目，但是hard级别确实很难，需要很久时间。做了很多题目之后，发现自己前面做的已经忘了。","然后开始第二遍，这次我每个题目都会去做。很多easy的题，做到第一档速度其实也不是很容易。但是很多题当你把你的算法从o(n平方)优化到o(n)时，你会感觉到自己的进步。并且很多easy的题目是很多难题的基础。这一遍，我做了300多题，题数到了600多，每次碰到好题也会做做笔记，这样之后感觉自己做题能力提升很快。","现在已经做了300多道题了，之前一直在本地用word记录心得，现在在这里用gitbook记录。正好也借着这个机会第三次从头开始再做一遍，就当是复习了。","现在是第三遍，做第三遍的原因一是做了300多题了，该回头复习一下了。二是找到了gitbook这个很好的平台可以记录自己的","还有个做题的技巧就是，多做点赞数高的题，要是差评比点赞高，我基本都不会做。这种题不是测试用例恶心，就是题目没有意义。所以有时候我会跳过一两个题目。"],"1.-two-sum.html":["+","//first","//the","1.","11,","15],","1].","2","7","7,","9,","=","[0,","[2,","add","algorithm","analysi","array","assum","class","code","code中有一个循环，循环中进行的操作只有查找和插入hash，时间都是o(1)，所以最后时间复杂度是o(n)","descript","each","element","exactli","exampl","for(int","given","i=0;i","index","indic","input","int","integers,","ma;","map.first","map.second","num","number","nums,","nums[0]","nums[1]","nums[i]","on","problem","public:","repres","return","same","solut","solution,","specif","such","sum","sum和four","sum的基础，但是这里需要返回的是原来数组的下标值，而不是数字本身。所以这里用这种方法得不到答案","target","target)","target.","thought","twice.","two","twosum(vector&","unordered_map","up","us","valu","vector","{","之前的值。处理一个数据的时候首先在hash表中对比以下，如果存在就返回。这种方法在之后很多能一次便利出结果的解答里都会出现，用一个hash表保存前面遍历的状态，之后拿到状态再来对比。","第一种方法有两个循环每个循环运行n次，时间复杂度o(n平方)","第三种方法使用hash表解答。code中用的是unordered_map。一定要注意在c++中unordered_map和map之间的区别，前一个底层是hash表，后一个底层是红黑树。如果需要o(1)的插入，查找。需要使用unordered_map。","第三种方法是利用hash表一遍遍历得到解答，使用hash表保存target","第二种方法就是先排序，然后使用左右指针逼近，求得结果。这种方法也是之后three","第二种方法这里没有给出代码，根据算法思想，首先排序之后再左右指针。排序最快的时间复杂度是o(nlgn)，左右指针便利时间复杂度是o(n)，最后时间复杂度是o(nlgn)","这题可以用3种解法。如果是刚接触算法的，最开始想到的方法肯定是两个循环便利求解。"],"2.-add-two-numbers.html":["(2","(5","+","0","2.","3)","342","4","4)","465","6","7","8","807.","=",">",">next,(l1",">next,l2",">next=addtwonumbers(l1",">val+add)%10);",">val+add)/10);",">val+l2","add","add=0)","addtwonumbers(l1,l2,0);","addtwonumbers(listnode*","algorithm","algorthm","analysi","assum","class","code","contain","descript","digit","digit.","each","empti","exampl","except","explanation:","given","if(add==0)","if(l1==null){","if(l2==null){","input:","integers.","itself.","l1,","l1;","l1=new","l2,int","l2;","l2=new","lead","link","list","list.","listnode((l1","listnode(add);","listnode*","neg","node","non","number","order","output:","problem","public:","re","repres","res;","res=new","return","revers","singl","solut","store","thought","two","zero,","{","}","}//上面是递归基","};","}els","时间应该可以认为是o(n)，遍历一个链表。","用递归的思想去解题的话，首先想好每一个递归节点是如何设计的，然后设计好递归基处理结束清况。其实很类似数学归纳法。对于链表相加问题，将每个函数看成累加器的中的一个寄存器就行。每个节点的输入是两个数，还有前一个节点的进位。相加得到当前节点的值，将进位传给下一个函数。","虽然递归函数会在调用栈上消耗很多时间，相比于迭代解题会慢一点。但是递归函数比迭代更容易写，需要考虑的情况会少很多，并且大多数情况下其实慢不了太多。所以链表题和树题建议先考虑递归解法","观察知道，题目需要返回一个相加之后的链表。碰到链表题以及树类题目，尤其是返回一个链表或者树的时候，大概律用递归做会简单很多。"],"3.-longest-substring-without-repeating-characters.html":["\"abc\",","\"abcabcbb\"","\"b\",","\"bbbbb\"","\"pwke\"","\"pwwkew\"","\"wke\",","//快慢指针","0;","1","1);","1.","1:","2:","3","3.","3:","algorithm","analysi","answer","charact","characters.","class","code","descript","exampl","explanation:","find","for(int","given","head=1,last=0,res=1;","i=0;ileft){","if(s.size()==0)","input:","int","left);","left=pos[s[i]];","length","lengthoflongestsubstring(str","longest","note","output:","pos(256,","pos(256,0);","pos[s[i]]=i;","pos[s[last]]++;","problem","public:","repeat","res;","res=0;","res=max(res,i","return","s)","solut","string,","subsequ","substr","substring,","substring.","thought","vector","while(head","without","{","}","};","然而我看我第二次做的记录，发现第二次的方法更好(大概律是看discuss的)，每次不是记录出现的次数，而是记录字符的位置，每次碰到重复的可以直接跳转到相应的位置，而不是一次次慢慢走。","第三遍做这个题了，首先看到题目就觉得应该用快慢指针做。定义一个快指针，每次让快指针先走，快指针每走一步记录走过的字符。如果出现快指针走过的字符之前出现过一次，就让慢指针走。慢指针每走一步，擦除一个记录，如果擦出的刚好是快指针当前的字符，慢指针停止，又轮到快指针走。快指针每走一步计算一次快慢指针之差，最后返回最大的差值就行。","综合来看还是第二种方法更好","记录位置的方法:只有一个循环，不管什么清况都是运行n次，时间复杂度是o(n)。","首先分析快慢指针，快慢指针最坏情况是所有字符一样，最好情况是所有字符都不同。在输入为n的情况下，最坏情况需要运行2n次，最好情况需要运行n次。最好最坏都是o(n)的时间复杂度。"],"5.-longest-palindromic-substring.html":["\"\";","\"aba\"","\"bab\"","\"babad\"","\"bb\"","\"cbbd\"","//cout","1000.","1:","2:","5.",";","algorithm","analysi","answer.","assum","class","code","descript","exampl","find","for(int","given","i=0;i=0&&rightres){","if(s.size()==0)","input:","int","left;","left=i;right=i+1;","length","lm=0,rb=0,size=s.size();","lm=left;rb=right;","longest","longestpalindrome(str","maximum","note:","output:","palindrom","problem","public:","res=0;","res=right","return","right++;left","s","s)","s,","s.","solut","string","substr","thought","valid","while(left>=0&&rightres){","{","}","最坏情况下，所有字符都是一样的，每次都会进入子循环，时间复杂度是o(n平方)","最好情况下，所有字符都不一样，每次不会进入子循环，时间复杂度是o(n)","直接用遍历找回文串就行。遍历一次字符串，对每个字符串，将它当作一个回文串的中间，向两边扩散。比较得到最大值"],"6.-zigzag-conversion.html":["\"pahnaplsiigyir\"","\"paypalishiring\"","\"paypalishiring\",","\"pinalsigyahrpi\"","(you","1){","1:","2:","2;","2。然后再找到中间夹着的字符是如何分布的。","3","4","6.","=","algorithm","analysi","better","class","code","convers","convert(str","descript","display","exampl","explanation:","fix","font","for(int","g","given","h","i=0;i=s.size())","if(i!=0&&i!=numrow","if(j+step2","if(numrows==1)","input:","int","l","legibility)","line","line:","make","n","number","numrow","numrows)","numrows);","output:","p","pattern","problem","public:","r","read","res.push_back(s[j]);","res;","res=\"\";","return","row","rows:","s","s,","s;","solut","step2=step;","step=numrows*2","string","take","this:","thought","want","while(true){","write","written","y","zigzag","{","于是开始找规律，发现除了第一行和最后一行。中间每行都是两个纵向字符中夹着一个。首先找纵向字符的规律，每一行两个纵向字符位置差是，numrows*2","开始拿到这个题的时候，想法是直接构造一个二维数组，按照zigzag顺序把字符串存入其中。但是这种方法太慢了，也太占用空间了，很多地方都没有存数据。","虽然函数中是双重循环，但是子循环的步数很大。整个算法只需要遍历一遍字符串即可，时间复杂度是o(n)"],"7.-reverse-integer.html":["0","0;","120","123","1:","1].","1，就直接返回0。","21","231","2:","32","321","3:","7.","[−231,","algorithm","analysi","assum","bit","bo=true;","bo?i:","bool","class","code","deal","descript","digit","environ","exampl","function","given","i;","i=atol(s.c_str());","if(s.size()>10||(s.size()==10&&s>\"2147483647\"))","if(x\"2147483647\");","input:","int","integ","integer,","integer.","note:","output:","overflows.","problem","problem,","public:","purpos","range:","return","revers","reverse(int","sign","solut","store","thought","within","x)","{","}","};","−","初次拿到这题想到的方法肯定是，首先判断正负，然后按位处理。每次取模得到个位，将得到的个位加到存储的结果中。这种想法是没有问题，但是我觉得用字符串翻转更加易懂，并且需要考虑的条件比较少。首先判断正负，然后将数字转化为字符串。之后调用翻转函数。最后将翻转过的字符串变回数字，这时候要注意的是，首先处理末尾的0，这时候会被翻转到首位，然后考虑如果现在字符串大于int_max,也就是2^31","在整个算法中，to_string时间复杂度是o(n),reverse函数时间复杂度是o(n)，最后atol函数函数的时间复杂度也是o(n).算法中其他部分时间复杂度是o(1)。所以最后时间复杂度是o(n)。其实感觉直接用数学方法，每位处理可能比这个快一点，但是用字符串操作数字翻转问题还是很舒服的。"],"9.-palindrome-number.html":[".","//convert","01","10","121","121.","1:","1;","2:","3:","9.","algorithm","analysi","backward","becom","bool","class","code","convert","coud","descript","determin","exampl","explanation:","fals","follow","forward.","if(x","input:","int","integ","ispalindrome(int","left","left,","left.","left=0,right=","left=0,right=res.size()","number","output:","palindrom","palindrome.","problem","public:","read","res(10);","res.push_back(x%10);","res;","res[right]=x%10;","right","right++;","right,","same","solut","solv","string","string?","therefor","thought","true","up:","up要求能不能不用string结题。于是又开始想如何不用string，其实在c++中string的结构和vector很像，动态数组vector也很适合存储数字中的所有位。","whether","while(left","while(x){","without","x)","x/=10;","{","}","时间复杂度前两个算法其实都是一样的，都是o(n)。但是字符串的算法更快。我认为是由于每次vector调用push_back后扩容导致。于是想了一下能否提前知道vector的size。防止在运行时分配内存，想到input都是int类型，int_max只有10位，所以定义一个大小为10的数组足够了。改进了一下，发现效果不是很明显，因为大小为10的话，其实内存分配所消耗的资源也不是很多。但是之后很多题目，如果能减少vector或者unordered_map的内存加倍操作，也就是提前resize好大小，很多题目会快很多。","最开始拿到这题，发现，这不是跟第7题很类似吗。直接int2string，使用string来判断就是个很简单的题了。不到一分钟写完之后，发现description里的follow"],"10.-regular-expression-matchinghard.html":["\".*\"","\"a\"","\"a*\"","\"aa\"","\"aa\".","\"aab\"","\"aab\".","\"ab\"","\"c*a*b\"","\"mis*is*p*.\"","\"mississippi\"","\"zero","''","'*'","'*'.","'.'","'a'","'a'.","(*)","(.)\".","(not","(p),","(s)","*","*.",".","0","1","10.","1:","2:","3:","4:","5:","=","algorithm","analysi","b","becom","bool","c","charact","character.","class","code","contain","cover","descript","dp(s.size()+1,vector(p.size()+1,false));","dp[0][0]=true;","element,","element.","empti","entir","exampl","explanation:","express","fals","for(int","given","i=1;i","i]和p[0","implement","input","input:","ismatch(str","j]的匹配结果。每一个状态转移的时候，一定要分析全要考虑的前一个状态。这一题中就*号很特殊，他可以是一个也可以是零个也可以是多个。分析到*号的时候，需要考虑的前一个状态有点多。","letter","lowercas","match","mean","more","note:","once,","output:","p","p)","partial).","pattern","preced","problem","public:","regular","repeat","s","s,","singl","solut","string","support","therefore,","thought","time.","times,","true","vector>","z,","z.","zero","{","分析一次example4的二维数组是如何构造的","可能讲述的还是不清晰，建议先做简单的动态规划解法字符串匹配问题。比如最长公共子序列等问题，再来做这题会清晰很多。","定义了一个二维数组，如果s的长度为m，p的长度为n。二维数组就是一个m*n的矩形。算法需要遍历这个二维数组，循环中时间复杂度为o(1)，最后时间复杂度是o(mn)","正则表达式问题，两个字符串匹配。碰到字符串问题，一般都是动态规划问题，或者是字符串匹配的一些专门的算法，比如kmp这种。还有就是很多字符串，如果想要找到前缀重合之类的问题，就是trie字典树。正则表达式问题就是典型的动态规划解决的题目。使用一个二维数组保存每一个状态，横纵坐标ij表示s[0","首先考虑一般情况，如果两个字符相等了，只需要查看左上角的bool值即可，如果匹配当前也是匹配的。如果是一个点，那也好说，直接按照相等来匹配。关键就是如何匹配*。我们来回顾一下*的定义，首先可以是0个，0个的话，直接查看靠左两个方格的bool值即可，比如c*和空字符比较，也就是第一排前三个。两个空字符肯定是匹配的，值为1，c和空字符肯定不匹配，格子值为0，c*是和空字符匹配的，因为可以是0个c，所以，直接观察左边两个格子的值即可。然后考虑1个的情况，现在可以换一种思想，如果当前行列匹配需要1个字符，那么上一行和当前列匹配肯定是只需要0个字符，如果上一行成功匹配，那么这一行肯定也成功。同理可得1个或者多个匹配的话，只需要看上一个格子是否满足条件即可。"],"11.-container-with-most-water.html":["(i,",",","...,","0).","11.","1;","2.","49","[1,8,6,2,5,4,8,3,7]","a1,","a2,","ai)","ai).","algorithm","analysi","axi","class","code","contain","container,","coordin","descript","drawn","each","endpoint","example:","find","form","given","height)","i=0,j=height.size()","input:","int","integ","line","lines,","maxarea(vector&","n","neg","non","note:","output:","point","problem","public:","repres","res=0;","slant","solut","such","sum中第二个方法，左右指针法。现在回顾一下two","sum双指针法，首先sort数组，然后左右向中间逼近。这里面也用到了一中额外条件，就是数组已经有序，如果和小于target，就将小的变大一点，也就是left++，反之大的减小。","thought","togeth","two","vertic","water","water.","while(i","x","{","这个代码很简单，时间复杂度是o(n)","这题我们也定义左右指针，每次都计算容量，最后取最大值。关键是左右指针如何移动。哪边的柱子更小我就移动哪个，因为移动必定导致宽度减小，只有靠高度增高，才有可能提高总容量，所以这样移动不会漏掉最大值","首先分析如果想装更多的水，我们需要两个柱子隔得越远越好，并且两个柱子中较矮的那根柱子也会决定装水的量。直接暴力法应该是很多人第一次就想到的方法，两个循环，遍历每一种组合。但是这题还有个条件，就是两个隔得越远，更大容量的概率会大很多。其实这里也用到了之前two"],"14.-longest-common-prefix.html":["\"\"","\"\".","\"\";","\"fl\"","14.","1:","2:","[\"dog\",\"racecar\",\"car\"]","[\"flower\",\"flow\",\"flight\"]","algorithm","amongst","analysi","array","class","code","common","empti","exampl","explanation:","find","for(int","function","given","i=0;i","if(strs.size()==0)","if(strs.size()==1)","input","input:","letter","longest","longestcommonprefix(vector&","lowercas","note:","output:","prefix","prefix,","public:","res=\"\";","return","solut","string","strings.","strs)","strs[0];","thought","write","z","{","以第一个字符串为基准，从第一个字符开始，对比所有字符串。出现不一样的就返回，都是一样的就加入到返回值后面。","其实整个算法的逻辑是不需要判断size==1的，也就是第一行。但是如果不判断的话，就会在循环中一直判断并且调用push_back到res中，会及其耗时间。加上第一个判断之后，整个代码运行时会快很多的。"],"15.-3sum.html":["+","0,","0?","1,","15.","1],","2,","2]","3sum","4],",";","=","[","]","a,","algorithm","analysi","array","b","b,","c","class","code","contain","descript","duplic","element","example:","find","for(int","give","given","i){i为0","i=0;i","integers,","is:","n","note:","num","nums)","n}次。循环需要时间复杂度是o(n平方)，最后算法的时间复杂度是o(n平方)。","problem","public:","res.push_back(tmp);","res;","return","right","set","solut","sort(nums.begin(),nums.end());","such","sum","sum为基础来解决这题。这里要求3个数加起来为0，也就是两个数加起来为零减去另一个数，这样就成了two","sum了，首先sort一下数组，这样，之后two","sum的时候能直接用左右指针逼近需求值。记得考虑如何识别一样的结果，这里题目要求不能有重复结果。","thought","threesum(vector&","tmp.push_back(nums[i]);","tmp.push_back(nums[left]);","tmp.push_back(nums[right]);","tmp;","triplet","triplets.","uniqu","vector>","while(leftsum)","zero.","{","}","};","以之前的two","排序需要o(nlgn)时间复杂度，算法中有两个循环，外层循环执行n次，内层循环执行(n","第三次做的时候，发现第二次的解答有可以优化的地方。在外层循环遍历到大于0的数的时候，就可以直接返回结果了。时间从96ms提升到了88ms。"],"16.3sum-closest.html":["16.3sum",";","class","closest","code","for(int","i=0;i0?left++:right","int","nums,","public:","return","solut","sort(nums.begin(),nums.end());","sum;","sum=nums[0]+nums[1]+nums[2];","target)","threesumclosest(vector&","{","}","};","这题和15题算法基本一模一样，就是判断相等改成的找到最相近的，"],"17.-letter-combinations-of-a-phone-number.html":["\"23\"","\"ae\",","\"af\",","\"bd\",","\"be\",","\"bf\",","\"cd\",","\"ce\",","\"cf\"].","'0')","(just","1","17.","2","2;","4个字符，如果都是代表3个字符。那么每次遍历的通量就是3个，如果输入digit","9","[\"ad\",","abov","algorithm","although","analysi","answer","below.","buttons)","class","code","combin","conbin(res,digits,0,\"\");","conbin(vector&","contain","descript","digit","digits)","digits,int","example:","for(int","given","i=0;i","if(digits.size()==0)","if(pos==digits.size()){","inclusive,","input:","int","letter","lettercombinations(str","letters.","lexicograph","ma[8]={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};","map","note","note:","num=int(digits[pos]","number","order","order,","output:","phone","pos,str","possibl","problem","public:","represent.","res,str","res.push_back(tmp);","res;","return","return;","size是n","solut","string","telephon","thought","tmp){","vector","void","want.","{","}","典型的回溯法，没有任何需要剪枝的地方，直接深度优先遍历所有的结果，并保存。","时间复杂度就是o(3^n)","每个数字代表3"],"18.-4sum.html":["//cout","18.","4sum",";","class","code","foursum(vector&","if(nums.size()sum)","int","left++;","nums,","public:","res;","right","solut","sort(nums.begin(),nums.end());","target)","vector>","{","这题和15题算法基本一模一样"],"19.-remove-nth-node-from-end-of-list.html":["*","*/","*next;","/**","1","1);","19.","2.",":","=",">2",">3",">4",">5,",">5.",">next",">next){",">next;",">next=head;",">next=second","algorithm","alway","analysi","becom","class","code","definit","descript","end","end,","example:","follow","given","head,","head.","head=head","int","link","list","list,","list.","list:","listnod","listnode(","listnode(int","listnode*","n","n)","n){","next(null)","node","note:","nth","on","pass?","problem","public:","remov","removenthfromend(listnode*","return","second","second=second","second=tmp;","singli","solut","struct","th","thought","tmp","tmp=new","up:","val(x),","val;","valid.","while(","while(head","x)","{","{}","}","};","一次遍历，时间复杂度o(n)","但是链表找第倒数第几个节点有个小技巧，就是前后指针。比如这里的倒数第n个节点，我们首先让前指针先走n步，然后后指针和前指针一起行动。当前指针到终点的时候，后指针这时候正好在倒数第n个节点。这样就能实现一边遍历就能删除节点。","删除倒数第n个链表中的节点。链表不像数组，不能直接按index访问。所有人第一次做这种题肯定是想先遍历一遍得出长度，然后在删除倒数第n个。","同样还有一种快慢指针，多用于求链表中点的。快慢指针都是从head点出发，一个每次走两步一个每次走一步，当快指针到tail节点的时候，慢指针正好在中点。"],"20.-valid-parentheses.html":["\"()\"","\"()[]{}\"","\"([)]\"","\"(]\"","\"{[]}\"","'(',","')',","'['","']',","'{',","'}',","1:","20.","2:","3:","4:","5:","algorithm","analysi","bool","bracket","brackets.","ch:s){","charact","class","close","code","consid","contain","correct","descript","determin","empti","exampl","fals","false;","for(auto","given","if(ch==')'){","if(ch==']'){","if(ch=='}'){","if(st.empty()||st.top()!='(')","if(st.empty()||st.top()!='[')","if(st.empty()||st.top()!='{')","if:","input","input:","isvalid(str","note","open","order.","output:","parenthes","problem","public:","return","s)","same","solut","st.empty();","st.pop();","st.push(ch);","st;","stack","string","thought","true","type","valid","valid.","{","}","};","}els","一个循环线性处理一个字符串，时间复杂度o(n)。","括号匹配问题在上数据结构课上也是会讲的。没学过数据结构之前可能很难相出用栈来做这题，学完之后就很显然了。其实栈的用处很大，在之后很多地方也会用到。线性处理一组数据的时候，如果需要满足某些条件，可以考虑一下能否用栈解决。这题就是线性处理一个字符串，并且需要满足一些条件。最近的一个括会肯定要和最近出现的一个括首匹配。用一个栈保存最近出现的括首即可"],"21.-merge-two-sorted-lists.html":["*","*/","*next;","/**","1","21.",":",">1",">2",">3",">4",">4,",">next);",">next,l2);",">next=mergetwolists(l1",">next=mergetwolists(l1,l2",">valval){","algorithm","analysi","class","code","definit","descript","example:","first","if(l1","if(l1==null)","if(l2==null)","input:","int","l1","l1,","l1;","l2","l2)","l2;","link","list","list.","listnod","listnode(int","listnode*","lists.","made","merg","mergetwolists(listnode*","new","next(null)","node","null;","output:","problem","public:","return","singli","solut","sort","splice","struct","thought","togeth","two","val(x),","val;","x)","{","{}","}","};","}else{","之前也提到了，碰到链表题并且返回值是链表的情况下，可以首先考虑能否用递归解题。这题正好可以。和之前链表加法很相似，可能还简单一点","时间复杂度o(n)的，递归肯定是比迭代方法慢一点的，但是两种方法时间复杂度是一样的。之后有时间来实现以下迭代版本的把。"],"22.-generate-parentheses.html":["\"((()))\",","\"(()())\",","\"(())()\",","\"()(())\",","\"()()()\"","1);","1,right+1);","22.","3,","=","[","]","algorithm","analysi","class","code","combin","descript","example,","form","function","gener","generateparenthesis(int","given","help(res,\"\",n,0);","help(res,tmp+'(',left","help(res,tmp+')',left,right","help(vector&res,str","if(left){","if(left==0&&right==0){","if(n==0)","if(right){","is:","left,int","n","n)","pair","parenthes","parentheses,","parentheses.","problem","public:","res.push_back(tmp);","res;","return","return;","right){","set","solut","thought","tmp,int","vector","void","well","write","{","{};","}","};","函数中进行的都是o(1)的操作，主要需要分析函数运行了多少次。分析了很久，得出时间变化满足很复杂，这里就不分析了","括号生成，首先需要知道合法的括号序列是哪样的。一个右括号前必须有一个左括号。由于题目中都是小括号号，所以这里还不用考虑其他问题。这种题显然是回溯法解决，也可以说是递归。但是不是单纯的生成所有组合，而是有条件的生成。在生成了一个左括号的情况下，才能生成一个右括号。"],"23.-merge-k-sorted-lists.html":["*","*/","*next;","/**","1","1);","2","23.",":",">1",">2",">3",">4",">4,",">5",">5,",">6",">next)",">next);",">next;",">next=pro.top();",">val;",">val>l2","[","]","algorithm","analysi","analyz","bool","class","cmp{","code","complexity.","definit","describ","descript","example:","for(auto","if(list)","if(lists.size()==0)","if(tmp","input:","int","k","l1","l1,listnode*","l2){","link","list","list.","list:lists){","listnod","listnode(","listnode(int","listnode*","lists)","merg","mergeklists(vector&","next(null)","null;","on","operator()(const","output:","priority_queue,cmp>","pro.pop();","pro.push(list);","pro.push(tmp","pro;","problem","public:","re","res=new","return","singli","solut","sort","struct","thought","tmp","tmp=res;","tmp=tmp","val(x),","val;","while(!pro.empty()){","x)","{","{}","}","};","之前又题目做过合并两个有序链表的，这里是k个。可以借助归并排序的思路，每个两两合并，合并到最后就可以了。也可以用堆的来做。用最小堆，每次从堆中取出最小的链表，然后将这个链表的下一个值重新加入到堆中。在c++中，可以用stl自带的heap类算法做这题，也可以用直接用优先队列来做这题。","我这里是用优先队列来做的","这个算法不好分析，现在假设有k个链表，每个链表大小都是n，并且都是一样的链表。首先建堆需要o(k)时间复杂度(我这题不是交换建堆，是一个个插入的)，每次拿出是o(lgk)，再插入是o(lgk)，进行n*k次最后时间是o(n)+o(lgk)*n*k,所以时间复杂度是o(nklgk).当然这只是大致分析。"],"24.-swap-nodes-in-pairs.html":["*","*/","*next;","/**","1","2","24.",":",">1",">2",">3",">3.",">4",">4,",">next);",">next;",">next==null)",">next=head;",">next=swappairs(tmp","adjac","algorithm","analysi","changed.","class","code","definit","descript","example:","given","head","head)","head.","head;","if(head==null||head","int","itself","link","list","list'","list,","list.","listnod","listnode(int","listnode*","listnode*tmp=head","modifi","next(null)","node","nodes,","pair","problem","public:","return","singli","solut","struct","swap","swappairs(listnode*","thought","tmp","tmp;","two","val(x),","val;","valu","x)","{","{}","}","};","很简单的题，时间复杂度o(n)","第三次做题真的就很有经验了，看到链表题并且返回的是一个链表直接递归解决。这题不递归肯定也能做，也不是很难，但是递归能省好多事"],"27.-remove-element.html":["(i.e.,","(int","//","//之前的代码","0,","0;","1,","1:","2,","2.","27.","2:","3,","4.","5,","=","[0,1,2,2,3,0,4,2],","[3,2,2,3],","algorihtm","algorithm","alloc","analysi","anoth","answer","arbitrary.","array","array,","array?","be","beyond","caller","caller.","changed.","clarification:","class","code","confus","contain","copy)","descript","doesn't","element","elements.","exampl","extra","first","five","for(auto","for(int","function","function,","given","i=0;i&","if(num!=val)","input","instanc","int","integ","intern","known","leav","len","length","length.","make","matter","mean","memory.","modif","modifi","new","note","num","num:nums){","nums,","nums[res++]=num;","o(1)","order","pass","place","pos=0;","print","problem","public:","reference,","reference.","remov","removeelement(nums,","removeelement(vector&","res;","res=0;","res=nums.size();","return","set","solut","space","think","this:","those","thought","two","us","val","val)","val);","val,","valu","well.","without","{","}","};","上面代码是9个月前写的。但是还不知道auto情有可原，毕竟是做到后面几题才慢慢用起来的。但是循环里的处理感觉太不简洁了，看着很难受。所以改成了现在的代码，虽然时间复杂度是一样的，但是代码更加易读，看着舒服","题目很简单，判断相等赋值即可，只是看着自己之前写的代码实在太难受，想优化一下。"],"28.-implement-strstrkmp-suan-fa.html":["\"aaaaa\",","\"bba\"","\"hello\",","\"ll\"","//next[0]=","//最原始的暴力法","0","0;","1","1);","1:","1;","2","28.","2:","=","algorithm","algorithm.html","analysi","ask","c'","clarification:","class","code","consist","descript","dure","empti","exampl","first","for(int","getnext(next,needle);","great","haystack","haystack,","haystack.","i=0;","i=0;inext(needle.size(),","if(haystack.size()==0){","if(needle.size()==0)","implement","index","indexof().","input:","int","interview.","j=","j=0;","java'","kmp最关键的是构建next数组，然后就很好匹配了。","kmp算法，求出next数组时间复杂度是o(n),匹配时间复杂度是o(m)，m>n。最后时间复杂度是o(m)","needl","needle)","occurr","output:","part","problem","problem,","public:","purpos","question","return","size=needle.size()","solut","string","string.","string?","strstr()","strstr().","strstr(string","thought","while(i","while(i&next,string&needle){","{","}","我描述肯定不是很好懂，可以看看这个网站的例子:https://subetter.com/algorithm/kmp","暴力法两个循环，heystack字符串长m，needle字符串长n，时间复杂度是o(nm)","这题其实暴力发就能解决，就是单纯的字符串匹配。但是太慢了，历史上也有几位大佬觉得这种方法很慢。并且确实有可以优化的地方，如果是一个人来匹配字符串，当一个成功了很多次之后最后一个字符匹配失败了，他不会前进一位重新来。而是跳过已知的不匹配的情况。"],"29.-divide-two-integers.html":["1)","10,","1:","1的时候，这种情况要单独考虑下","2","29.","2:","3","7,","=","algorithm","analysi","class","code","dd=labs(dividend);","descript","di=labs(divisor);","divid","divide(int","dividend","dividend,","divis","divisor","divisor)","divisor,","divisor.","exampl","given","if(dividend==int_min&&divisor==","input:","int","int_max;","integ","long","m=1;","mod","multiplication,","operator.","output:","problem","public:","quotient","res:res;","res=0;","return","solut","thought","tmp=di,","toward","truncat","two","us","while(dd>=di){","while(tmp0^divisor>0?","without","zero.","{","}","};","注意会有一种情况超过int_max,那就是int_min/","虽然有个循环，但是每次tmp都是乘2扩展，所以时间复杂度是o(1).","记得csapp专门有一门实验就跟这个题目很类似。比如不用哪些符号实现其他的符号啥的。这里就是不用乘除取余数，实现除法。能用的还有加法和减法，除法其实就是看被除数中能减去几个除数。想到这一步就很清晰了，直接诶一直减去除数就行。但是这样有的慢，可以减去除数的倍数，这样会快一点。直接移位最好，就能很快生成2的倍数"],"31.-next-permutation.html":["(ie,","(k","(nums[k]","(nums[l]",")","+",".","0;","1,","1,2,3","1,2,31,1,5","1,3,23,2,1","1,5,1","1:].","2;","31.","=",">",">=","algorithm","analysi","arrang","array","ascend","break;","class","code","column","column.","constant","correspond","descript","done.","examples.","exists,","extra","find","greater","hand","here","implement","index","input","int","k","k,","k;","l","l;","largest","left","lexicograph","lowest","memory.","n","next","nextpermutation(vector&","num","number","numbers.","nums)","nums.end());","nums.size(),","nums[k","nums[k]","nums[k])","nums[l]);","nums[l].","order","order).","output","permut","permutation,","place","possibl","possible,","problem","public:","rearrang","replac","revers","reverse(nums.begin()","right","solut","sort","sub","such","swap","swap(nums[k],","thought","us","void","{","}","};","→","我们通过枚举法是可以直接枚举出所有排列的，但是这样太慢，并且排列直接明显有自己的规律。查询维基百科可以知道下一个排列的定义","最坏情况下，时间复杂度是o(n).最佳情况下，时间复杂度是o(1)","直接代码实现"],"32.-longest-valid-parentheses.html":["\"(()\"","\"()\"","\"()()\"","\")()())\"","'('","')',","(well","//use","1:","1;","2","2:","32.","4","algorithm","analysi","ch:s){","charact","class","code","contain","descript","exampl","explanation:","find","for(auto","for(int","formed)","given","i=0;i","if(ch=='('){","if(st2.empty()){","input:","int","length","longest","longestvalidparentheses(str","on","output:","parenthes","po","problem","public:","res;","res=0;","res=max(res,tmp);","return","s)","solut","st1.pop();","st1.push(0);","st1.push(tmp);","st1;","st2.pop();","st2.push(ch);","st2;","st;","stack","startpos=","string","substr","substring.","thought","tmp+=2;","tmp+=st1.top();","tmp=st1.top();","two","valid","{","}","};","}else{","不管是使用两个栈还是一个栈，时间复杂度都是o(n),但是一个栈的方法明显好很多。","我首先自己写了一个双栈的代码，一个记录之前匹配好的括号的值，一个是记录左右括号括号的。但是后面看了discuss发现其实用一个栈就行，每次直接一次匹配完当前合法的，也就是右括号没多的情况。如果右括号多了，就改变一下start","括号匹配问题就是用栈解决，这里其实也存在括号匹配，所以首先考虑用栈解决。这题比括号匹配需要多考虑的一个点就是如果右括号多了的话，需要重新开始记录，因为后面的肯定和前面的括号不能连在一起了。所以这里需要特殊考虑。"],"33.-search-in-rotated-sorted-array.html":["(i.e.,","0","1","1.","1:","1;","2:","3","33.","4","=","[0,1,2,4,5,6,7]","[4,5,6,7,0,1,2]).","[4,5,6,7,0,1,2],","algorithm","algorithm'","array","array.","ascend","assum","becom","beforehand.","class","code","complex","descript","duplic","exampl","exist","found","given","index,","input:","int","left=0;int","mid;","n).","num","nums,","o(log","order","otherwis","output:","pivot","problem","public:","return","right=nums.size()","rotat","runtim","search","search(vector&","search.","solut","sort","suppos","target","target)","thought","unknown","valu","while(leftnums[mid]&&target=nums[left]&&target","{","其实是二分查考的变种，一个有序数组，rotate之后数组一半还是顺序的。二分查找只要确定一半是否满足","就可以排除另一半。我们找到有序的一半之后，判断target是否期中，如果是就进入这一半查找否则进入另一半。这样每次排除一半，时间复杂度就是o(nlgn)","虽然循环中间处理比二分查找多很多步骤，但是时间复杂度还是o(1)的。每次排除一半，最后时间复杂度是o(nlgn)"],"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":["//low_bound","//upper_bound","//此题代码","1);","1,","1:","1]","1].","2:","34.","6","8",";","=","[","[3,4]","[5,7,7,8,8,10],","algorithm","algorithm'","analysi","array","array,","ascend","class","code","complex","descript","element","end","exampl","find","first","found","given","if(left>=0&&left","if(nums.size()==0)","input:","int","integ","l,int","l=mid+1;","last","left","left=0,right=nums.size();","left=mid+1;","lower_bound(int","n).","num","nums,","o(log","order","order,","output:","posit","problem","public:","r,int","r=mid;","res(2,","res;","return","right=mid;","runtim","searchrange(vector&","solut","sort","start","target","target)","thought","uppper_bound(int","value.","vector","void","while(l=x)","while(lefttarget)","while(lx)","x){","{","}","之前我一直搞不清这几个二分查找的本质区别和如何去写。这个我总结出了规律，对于lower_bound，要找到第一个target，在mid>=target的时候，将right=mid，最后一次查找的时候，right就会是第一个target。左开右闭表示法，最后当left和right差1的时候，mid肯定等于left，所以最后left会赋值给right+1。left和right会在第一个target处重合。","对于up_bound同理，只要将mid>=target改为mid>target即可。这样就会在刚好大于target的地方重合。我理解这两个二分查找也是用了很久时间，看文字肯定会有很多疑惑，可以反复看看代码，自习推敲。","找到第一个target和最后一个target，需要时间复杂度是o(lgn)。其实就是二分查找，但是不是单纯的二分查找。需要找到第一个和最后一个。这其实很像stl函数中的lower_bound和up_bound。但是upper_bound是找到一个不是target的值。我们只需要将upper_bound最后的索引减一就行了。","都是二分查找时间复杂度是o(lgn)，stl中的二分查找也是直接用low_bound实现的，low_bound在二分查找中只有两个判断分支，会比传统的3个判断分支更加平衡以及快速"],"35.-search-insert-position.html":["35.","class","code","insert","int","left;","left=0,right=nums.size(),mid;","left=mid+1;","nums,","posit","public:","return","right=mid;","search","searchinsert(vector&","solut","target)","while(left=target)","{","}","};","看懂意思之后发现直接使用low_bound即可"],"36.-valid-sudoku.html":["'.'.","(partial","1","1,","1:","2:","36.","3x3","5","8'","8.","9","9x9","9x9.","[","[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]","[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],","[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],","[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],","[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],","[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],","[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],","[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],","[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],","[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],","]","accord","algorithm","alway","analysi","be","board","board)","bool","box","box,","cell","charact","class","code","column","contain","corner","descript","determin","digit","each","empti","exampl","except","explanation:","fals","fill","filled)","filled,","follow","for(int","given","grid","i=0;i","input:","invalid.","isvalidsudoku(vector>&","left","mention","modifi","necessarili","need","note:","output:","partial","problem","public:","repetition.","row","rules.","rules:","same","size","solut","solvable.","st;","sub","sudoku","thought","top","true","two","unordered_set","valid","valid.","without","{","使用hash表存放之前访问过的信息，可以保证每个位置只访问一次。这也类似一些一维数组题目，需要我们在o(n)时间复杂度内解决问题。这里需要保存数独规则下，当前位置对后面位置的影响。在数独中，行和列以及block中不能出现一样的数字。每次将访问的数字3个规则保存到hash表中，这种思路其实不难得出，难得出的是该如果在hash表中保存信息。如何保存可以看代码。","算法中有两个for循环，循环中进行的操作是o(1)的，最后时间复杂度是o(n²)"],"39.-combination-sum.html":["!=","&&","&candidates,","&combination,","&res,","(!target)","(candidates)","(i","(includ","(int","(target),","(without","++i)","0);","1:","1])","2:","39.","7,","8,","=","==",">",">=","[","[2,2,2,2],","[2,2,3]","[2,3,3],","[2,3,5],","[2,3,6,7],","[3,5]","[7],","]","algorithm","analysi","begin","begin)","begin;","candid","candidates.end());","candidates.size()","candidates[i","candidates[i]","candidates[i],","candidates[i];","chosen","class","code","combin","combination,","combination.pop_back();","combination.push_back(candidates[i]);","combination;","combinations.","combinationsum(candidates,","combinationsum(std::vector","contain","descript","duplic","duplicates)","exampl","find","given","i);","input:","int","integers.","is:","note:","number","posit","private:","problem","public:","repeat","res,","res.push_back(combination);","res;","return","return;","same","set","solut","std::sort(candidates.begin(),","std::vector","sum","target","target)","target,","target.","thought","times.","uniqu","unlimit","void","{","||","}","};","回溯法世家复杂度是o(2^n),很慢，但是这里加入了剪枝策略，还是一定程度上加快了运行速度的。","组合数相加最后和为target，基本需要遍历所有集合。使用回溯法得到所有的集合，判断和是否为target。由于数字相加如果已经大于target，就没必要继续遍历了。所以加入了剪枝策略，首先sort数组，为了先遍历小数字后遍历大数字。然后在进入下一个函数之前判断是否满足剪枝策略，如果满足，就不进入函数。"],"40.-combination-sum-ii.html":["!=","&&","&candidates,","&combination,","&res,","(!target)","(i","(int","++i)","0);","1])","40.","=","==",">",">=","begin","begin)","begin;","candidates.end());","candidates.size()","candidates[i","candidates[i]","candidates[i],","candidates[i];","class","code","combin","combination,","combination.pop_back();","combination.push_back(candidates[i]);","combination;","combinationsum2(candidates,","combinationsum2(std::vector","i+1);","ii","int","private:","public:","res,","res.push_back(combination);","res;","return","return;","solut","std::sort(candidates.begin(),","std::vector","sum","target","target)","target,","void","{","||","}","};","就改了上一题一个条件，不能重复使用。在回溯进入下一个的函数的时候，将pos加一。而不是上一题那样不变"],"41.-first-missing-positive.html":["1","1,1]","1:","2","2:","3","3:","41.","[1,2,0]","[3,4,","[7,8,9,11,12]","algorithm","analysi","array,","class","code","constant","descript","exampl","extra","find","first","firstmissingpositive(vector&","for(int","given","i=0;i0&&nums[i]","input:","int","integ","integer.","miss","note:","nums)","o(n)","output:","posit","problem","public:","run","size=nums.size();","smallest","solut","space.","thought","time","unsort","us","{","一次遍历数组，时间复杂度o(n)。没有用额外空间存储数据，空间复杂度是o(1)。符合要求","得到第一个缺失的正数，由于不需要考虑负数，这里可以很好地用数组下标对应相应的数。一次遍历将相应的数填入对应的下标当中。最后再次遍历数组，找到第一个缺失的数。"],"42.-trapping-rain-water.html":["(blue","0;","1,","1;","42.","6","[0,1,0,2,1,0,1,3,2,1,2,1]","[0,1,0,2,1,0,1,3,2,1,2,1].","abov","algorithm","array","bar","be","case,","class","code","comput","contribut","descript","each","elev","example:","given","height)","if(height.size()==0)","image!","input:","int","integ","left=0;","leftmax=height[left];","map","marco","much","n","neg","non","output:","problem","public:","rain","raining.","repres","res=0;","return","right=height.size()","rightmax=height[right];","section)","solut","thank","thought","trap","trap(vector&","trapped.","unit","water","while(left","width","{","一个循环左右指针逼近，时间复杂度o(n)。","和之前一个接水的题目异曲同工，使用左右指针结题。哪边短，动哪边，最后两指针重合退出循环。中间维护左右相应的最大值，存水量等于最大值减去当前值。"],"44.-wildcard-matching.html":["\"*\"","\"*a*b\"","\"?a\"","\"a\"","\"a*c?b\"","\"aa\"","\"aa\".","\"acdcb\"","\"adceb\"","\"cb\"","\"dce\".","'*'","'*'.","'?'","'a',","'b'.","'c',","(includ","(not","(p),","(s)","*.","1:","2:","3:","44.","4:","5:","=","?","algorithm","analysi","bool","charact","character.","class","code","contain","cover","descript","empti","entir","exampl","explanation:","fals","first","for(int","given","i=1;i","implement","input","input:","ismatch(str","letter","lowercas","match","note:","output:","p","p)","partial).","pattern","problem","public:","s","s,","second","sequenc","sequence).","sequence,","sequence.","singl","solut","string","substr","support","thought","true","vector(p.size()+1,false);","wildcard","z,","z.","{","时间复杂度o(n²)","这题很之前的正则表达式很像，其实还简单一点。使用二维数组保存中间结果，动态规划解决问题。可以借鉴前面动态规划题目的解答。这里的?其实和之前的.一样。这里的*比之前的*更加加单"],"45.-jump-game-ii.html":["0","1","1,","2","2.","3","45.","[2,3,1,1,4]","algorithm","alway","analysi","array","array.","assum","class","code","descript","each","element","example:","explanation:","first","game","given","goal","if(nums.size()","ii","index","index.","initi","input:","int","integers,","jump","jump(vector&","jumps.","last","length","maximum","minimum","neg","non","note:","number","nums)","output:","posit","position.","problem","public:","reach","repres","solut","step","thought","{","一次遍历数组，时间复杂度o(n)","一次遍历解决问题，第一步能走到的地方就是nums[0]，每到一个地方，确定当前位置能走到的最大值。在一步走完之后，确定下一个最大能走到的范围。"],"46.-permutations.html":["//first","0位置，那么之后的所有位置又可以递归调用函数，得到后面位置的所有排列。第一位置补上，就是所有排列了","1){","46.",";","[","[1,2,3]","[1,2,3],","[1,3,2],","[2,1,3],","[2,3,1],","[3,1,2],","[3,2,1]","]","algorithm","class","code","collect","descript","distinct","example:","for(int","given","i,int","i=0;i>","if(i==j","if(tmp.size()==nums.size()){","input:","integers,","j){","k=i;k","mark(nums.size(),false);","mark){","nums)","nums,vector>&","output:","per(nums,res,0,nums.size());","per(nums,res,tmp,mark);","per(vector&","permut","permutations.","permute(vector&","possibl","problem","public:","res,int","res,vector","res.push_back(nums);","res.push_back(tmp);","res;","return","return;","solut","thought","time","tmp,vector&","tmp;","vector","vector>","void","{","}","对于第一个算法：回溯法时间复杂度是o(2^n)，但是这里应该不用那么久，遍历到后期，很多数中的数组都已经被加入，只需要直接continue；所以，这个算法还是不慢的","对于第二个算法：得出所有的排列，类似枚举法，一共需要执行n!次。每次时间复杂度是o(1)。最后时间复杂度就是o(n!).","得到所有排列问题，也是我们算法课将回溯法的一个例题。直接每次交换两个数字，将所有情况都交换一遍，就是所有排列。其实也可以用递归的思想解释问题。首先将一个数字交换到index","得到所有排列，和之前组合数相加得到target很像。这里直接使用回溯法，加上一个位置数组，区分是否已经加入新组合。","我第一遍做的算法：","第二遍做的算法："],"47.-permutations-ii.html":["&res)","(i","(int","0,","1)","47.","=","==",">","[","[1,1,2]","[1,1,2],","[1,2,1],","[2,1,1]","]","algorithm","analysi","class","code","collect","contain","desctipt","duplicates,","example:","given","i,","i;","ii","input:","int","j","j,","k","num,","number","nums)","nums.size(),","output:","permut","permutations.","permuteunique(vector&","possibl","problem","public:","recursion(nums,","recursion(vector","res);","res.push_back(num);","res;","return","return;","solut","sort(nums.begin(),nums.end());","thought","uniqu","vector","vector>","void","{","}","和上一题时间复杂度应该是一样的——o(n!)。但是最后时间会比上一个算法慢很多，原因就在于这里函数参数num没用引用传递。每次参数传递的时候，会复制所有的数字，时间开销会很大。","这里我们还是用递归解决。首先解决第一个index上数字的摆放，然后对于后面所有的数字，递归调用函数处理，直到最后一个数字。这里我们如何找到重复的情况呢？我们给第一个index摆放之后，进行第一个index替换的时候，判断，如果这时候，替换的数字和当前数字一样，就不替换，查看下一个数字。这样就能解决一个位置，两次为一个数字的问题了。注意这里不需要回溯，这是和上一题区别最大的地方。","这题和上一题唯一的区别就是有重复数字。但是这个区别对算法会产生很大的影响。两个一样的数，如果还是用上题的做法，会导致最后的结果多一倍。这里的问题就在于，如果找到重复的情况，然后规避这种情况。"],"48.-rotate-image.html":["(clockwise).","1,","1:","1],","2,","2:","2d","3,","4,","48.","5,","5],","6,","7,10,11]","7],","8,","8,10],","9,11],","90","9],","=","[","[1,2,3],","[12,","[13,","[14,","[15,13,","[15,14,12,16]","[16,","[4,5,6],","[7,4,1],","[7,8,9]","[8,5,2],","[9,6,3]","]","],","algorithm","alloc","analysi","anoth","becomes:","class","code","degre","descript","directly.","exampl","for(int","given","i=0;i","imag","image.","input","int","matrix","matrix)","mean","modifi","n","n=matrix.size();","note:","place","place,","problem","public:","repres","rotat","rotate(vector>&","rotation.","solut","such","thought","void","x","{","对二维矩阵操作，双重循环。最后时间复杂度是o(n²)","最简单的方法肯定是定义一个矩阵，然后将这个矩阵转置之后赋值给这个矩阵。但是这样需要o(n²)空间题目也明显要求了我们空间复杂度维持在o(1)内。我们必须在本来的数组上操作。如果只能这么操作的话，肯定就是使用swap函数，交换值。我们可以对称的改变矩阵，对于旋转90度，我们只需要首先按照竖直中线对称，再按照对角线对称就能得到结果。"],"49.-group-anagrams.html":["\"ate\",","\"bat\"],","\"nat\",","\"tan\",","\"tea\",","49.","[","[\"ate\",\"eat\",\"tea\"],","[\"bat\"]","[\"eat\",","[\"nat\",\"tan\"],","]","algorithm","anagram","analysi","array","class","code","descript","example:","for(auto&","for(int","given","group","groupanagrams(vector&","i=0;i({strs[i]});","input","input:","lowercase.","m:ma){","ma;","matter.","note:","order","output","output:","problem","public:","res.push_back(m.second);","res;","return","solut","sort。将所有的字符串sort一下，排序之后相等的字符串，就可以认定为一个group。","strings,","strs)","thought","together.","unordered_map>","vector>","{","}","};","假定有n个字符串，每个字符串平均长度是m，对每个字符排序时间复杂度是o(nlgn),两个字符串比较时间复杂度是o(n)，然后需要定义一个hashmap保存之前遍历的字符串的结果。最后时间复杂度是o(m*nlgn)","找出有相同字符，顺序不一样的所有字符串，然后返回他们的集合。这里有一种最简单的办法确定"],"50.-pow-x-n.html":["(xn).","0.25","0.25000","1/22","1/4","10","100.0","1024.00000","1:","1;","1]","1即可。这样int_min就会变int_max","2","2.00000,","2.10000,","231","2:","3","32","3:","50.","9.26100","=","[−231,","algorithm","analysi","bit","calcul","class","code","descript","doubl","exampl","explanation:","if(n","if(n==0)","implement","input:","int","integer,","mypow(doubl","n","n)","n),","note:","output:","pow(x,","power","problem","public:","rais","rang","return","sign","solut","thought","within","x","x,","{","−","每次将次数降低一半，时间复杂度o(lgn)","求2的100次方，如果直接乘100次，其实没有必要。完全可以求4的50次方，然后16的25次方。这样每次能减少一半的计算量。这里的问题就是还有负数。如果是负数的话，首先将x化为1/x。然后将n转化为正数。最后，一种最特殊的情况就是如果数字是int_min,最后直接将n"],"51.-n-queens.html":["\"...q\",","\"..q.\"],","\".q..\"]","\"q...\",","'.'","'q'","//","1","1;j=y+1;","2","4","51.","[","[\"..q.\",","[\".q..\",","]","]=='q')","][j","above.","algorithm","analysi","attack","board","both","chessboard","class","code","configur","contain","descript","distinct","each","empti","example:","exist","explanation:","false;","for(int","given","i=0;i","i=0;i=0&&j>=0){","i=0;i>&","i=x","if(pos==tmp.size()){","if(res[i","indic","input:","integ","n","n)","n,","n×n","other.","output:","place","placement,","pos){","problem","public:","puzzl","puzzle.","queen","queens'","res){","res,vector","res.push_back(tmp);","res;","respectively.","return","return;","shown","solut","solvenqueens(int","space","string","such","t(n,'.');","thought","tmp,int","tmp;","two","vector","vector>","while(i>=0&&j","{","}","经典的n皇后问题。使用回溯法解决问题，每次放之前首先判断这个位置是否合法，如果合法，放入这位置。如果不合法判断下个能放的位置。最后如果没有能放的位置的时候，就回溯。","这里的时间复杂度我也不是太清楚，查了资料，网上有两种说法，我觉得o(n^n)和o(n!)都有道理。"],"52.-n-queens-ii.html":["52.","ii","n","queen","这题是上题的简化版本，最后返回数量即可"],"53.-maximum-subarray.html":["(contain","1,2,1,","1,2,1]","1]:0);","2,1,","3,4,","5,4],","53.","6","6.","=","[","[4,","algorithm","analysi","anlysi","anoth","approach,","array","class","code","conquer","contigu","descript","divid","dp(nums.size(),0);","dp[0]=nums[0];","example:","explanation:","figur","find","follow","for(int","given","i=1;i0?dp[i","input:","int","integ","largest","ma;","ma=max(ma,dp[i]);","ma=nums[0];","maximum","maxsubarray(vector&","more","number)","nums)","nums,","o(n)","on","out","output:","problem","public:","return","solut","solution,","subarray","subtl","sum","sum.","tri","up:","us","vector","{","}","};","一次循环使用以为数组保存最后结果，复杂度时间o(n)","最大连续子数组和，典型的动态规划问题。如果现在给出大小为3的数字，分别为1，2，3。他们的结果是6这时候，如果数组最后加入一个数字4，结果会变为10。这个例子说明，可以用之前的结果来简化求解现在结果的过程。这也是动态规划的思想。这里还有一种情况，就是如果当前和为负值的情况，这时候不能用前面的负值，应该使用当前值直接表示。"],"54.-spiral-matrix.html":["(m","1,","1,0}};","1:","1;","1},{","1};","2,","2:","3","3,","4,","4],","5,","54.","6","6,","7,","8,","8],","9","[","[1,","[1,2,3,4,8,12,11,10,9,5,6,7]","[1,2,3,6,9,8,7,4,5]","[5,","[9,10,11,12]","]","],","algorithm","class","code","columns),","descript","element","exampl","for(int","given","i=0;i","if(nc==0)","if(nr==0)","input:","int","m","matrix","matrix)","move{{0,1},{1,0},{0,","n","nc=matrix[0].size();","nr=0;nc=","nr=matrix.size();","nstep{nc,nr","order.","output:","pos=0;","problem","public:","res(nr*nc);","return","rows,","solut","spiral","spiralorder(vector>&","step=0;","thought","vector","vector>","while(nstep[step%2]){","x","{","{};","我对这个题其实一点都不陌生。大一第一个学习，算法设计课，就有这个题目。说实话，就用死方法肯定能做出来，只是很多冗余代码，很多条件判断。我记得我当时用4个bool变量确定行动方向。最后4个int定义行动的长度。我第一次做这个题好像也是这么做的。但是我第三次做题我觉得我不可能还用这中办法。于是我看了discuss，发现确实有很好地办法。用一个step定义当前行动的次数，step模4就能得出行动的当前方向。step模2就能得到是左右移动还是上下移动。左右移动一次，下一次左右移动就要减一。再定义一个移动的次数，保存能够左右移动和上下移动的次数。这种算法就省去了很多的条件判断","虽然差算法和好算法，时间复杂度都需要o(n²)。但是这次的算法省去了很多多余中间变量，和条件判断，能够提升程序运行的时间。"],"55.-jump-game.html":["0","0,","1","1,","1:","2:","3","55.","[2,3,1,1,4]","[3,2,1,0,4]","algorithm","alway","analysi","array","array.","arriv","bool","canjump(vector&","class","code","descript","determin","each","element","exampl","explanation:","fals","false。如果所有的跳完，return","first","for(int","game","game2类似。这里不限制你跳跃的次数，我们只需要每次记录能达到的最远距离即可。每次循环开始的时候更新最大值。如果更新之后的最大值和当前值是一样的话，说明只能跳到这里了，return","given","i=0;i","imposs","index","index.","initi","input:","int","integers,","jump","last","length","make","matter","maximum","maxrive=0;","neg","non","nums)","output:","posit","position.","problem","public:","reach","repres","solut","step","thought","true","what.","{","和之前jump","算法遍历一次数组，时间复杂度o(n)。"],"56.-merge-intervals.html":["(ins.empty())","*","*/","/**","15,","1:","2019.","2:","56.",":","[1,3]","[1,4]","[1,6].","[2,6]","[4,5]","[[1,3],[2,6],[8,10],[15,18]]","[[1,4],[4,5]]","[[1,5]]","[[1,6],[8,10],[15,18]]","[](interv","a,","a.start","algorithm","analysi","april","b){return","chang","class","code","collect","consid","default","definit","descript","e)","end(0)","end(e)","end;","exampl","explanation:","given","input","input:","ins)","ins.end(),","int","interv","interval()","interval(int","interval.","intervals,","intervals.","merg","merge(vector&","method","new","note:","output:","overlap","overlapping.","overlaps,","pleas","problem","public:","push进vector，访问到下一个时，当前interval就是下一个interv","res;","reset","return","s,","signature.","solut","sort(ins.begin(),","start(0),","start(s),","start;","struct","thought","type","vector","vector{};","{","{}","};","两个间隔能合并，就是两个范围有重合。重合的话存在两种情况，第一种是左边重合，一种是右边重合。但是如果程序中同时考虑两个的话，情况会复杂很多。所以首先按照做范围排序，消除左边影响。然后一直看右边，如果当前interval与前一个interval重合，合并两个interval。然后继续看下一个，如果两个不重合，将当前interv","首先排序，时间复杂度o(nlgn)。然后一个遍历数组，时间复杂度o(n)。最后时间复杂度o(nlgn)。这样看来，排序成了我们的瓶颈，但是也不能这么说，如果没有排序，时间复杂度至少是o(n²)"],"57.-insert-interval.html":["(merg","*","*/","/**","15,","1:","2019.","2:","57.",":","=","[2,5]","[3,5],[6,7],[8,10].","[4,8]","[[1,2],[3,10],[12,16]]","[[1,2],[3,5],[6,7],[8,10],[12,16]],","[[1,3],[6,9]],","[[1,5],[6,9]]","accord","algorithm","analysi","april","assum","chang","class","code","default","definit","descript","e)","end(0)","end(e)","end;","exampl","explanation:","given","index=0;","initi","input","input:","insert","insert(vector&","int","interv","interval()","interval(int","interval.","intervals,","method","necessary).","new","newinterv","newinterval)","non","note:","output:","overlap","pleas","problem","public:","res;","reset","s,","set","signature.","solut","sort","start","start(0),","start(s),","start;","struct","thought","times.","type","vector","while(index","{","{}","};","和上一题一样，这里更简单的是，已经直接排好序了。所以，我们只需要找出中间可能有交叉的interval。然后合并。前后没有交叉的interval，就不变，直接插入。","这里不需要排序，时间复杂度o(n)"],"59.-spiral-matrix-ii.html":["1","1,","1,0}};","1;","1},{","1};","2,","3","4","5","59.","6,","7,","8,","9,","[","]","],","_n_2","algorithm","analysi","class","code","descript","element","example:","fill","for(int","gener","generatematrix(int","given","i=0,j=","ii","input:","int","integ","k=0;k","matrix","matrix看algorithm","move{{0,1},{1,0},{0,","n)","n,","nstep{n,n","order.","output:","pos=0;","posit","problem","public:","res(n,vector(n,0));","solut","spiral","squar","thought","tmp=1;","vector","vector>","while(nstep[pos%2]){","{","和之前旋转矩阵题类似解答，可以移步到spiral","需要填满n*n个格子，每次填格子移动时间o(1)，最后时间复杂度o(n²)"],"60.-permutation-sequence.html":["\"123\"","\"132\"","\"213\"","\"231\"","\"2314\"","\"312\"","\"321\"","1","1)!个。同理可以退出，如果需要找第k个排列，第一个字符我们是可以确定的。然后利用递归的思路，一直将数字推出。","1:","2:","3","3,","3:","4,","60.","9","=","[1,2,3,...,n]","_k_th","algorithm","between","code","contain","descript","exampl","follow","given","inclusive.","input:","k","k,","label","list","n","n!","note:","n个数排列有n!种情况，如果数字是1","n，那么1开头的排列会有(n","order,","output:","permut","permutations.","problem","return","sequenc","sequence.","set","thought","total","uniqu"],"61.-rotate-list.html":["){","*","*/","*next;","/**","0","1","1:","1;","2","2:","3","4","5","61.",":","=",">0",">1",">2",">3",">4",">5",">next){",">next;",">next=head;",">next=null;",">null",">null,","algorithm","analysi","class","code","cur;","cur=cur","cur=head","definit","descript","exampl","explanation:","given","head,","head;","if(head==null)","if(k==0)","if(size==1)","input:","int","k","k)","k=k%size;","k=size","link","list","list,","list.","listnod","listnode(int","listnode*","negative.","next(null)","non","output:","places,","pre","pre=head;","pre=pr","problem","public:","return","right","right:","rotat","rotateright(listnode*","singli","size++;","size=1;","solut","step","struct","tail","tail=head;","tail=tail","thought","val(x),","val;","while(k","while(tail","x)","{","{}","}","};","可以看到其实就是将链表倒数第k个位置截断，然后拼接到前面。知道这个意思之后，就只需要考虑如果k大于size的问题了。如果k等于size，链表长度不变，这就很明显，我们可以令k=k%size。最后截断链表即可","开始算法得到链表的size，时间复杂度o(n)。然后找到倒数第k个节点，最后"],"62.-unique-paths.html":["'finish'","'start'","(mark","1.","100.","1:","2","2.","3","3,","3.","62.","7","=",">","abov","algorithm","analysi","below).","bottom","class","code","corner","corner,","corner:","descript","diagram","down","dp(m,1);","exampl","explanation:","for(int","grid","grid.","i=1;i","input:","int","left","locat","m","m,","mani","move","n","n)","note:","output:","path","point","possibl","problem","public:","reach","right","robot","solut","there?","thought","time.","top","total","tri","uniqu","uniquepaths(int","vector","way","x","{","二维动态规划，遍历一个二维数组。最后时间复杂度o(n²)","典型的动态规划问题，达到一个点的所有方案，是其上一个点和左边点的方案之和。因为我到这个点可以有两种情况走过来，一种是从上面往下走，一种是从左边往右走。"],"63.-unique-paths-ii.html":["'finish'","'start'","(mark","0","1","1.","100.","1:","2","2.","3x3","63.",">","[","[0,0,0]","[0,0,0],","[0,1,0],","]","above.","ad","algorithm","analysi","be?","below).","bottom","class","code","consid","corner","corner:","descript","diagram","down","empti","exampl","explanation:","for(int","grid","grid.","grids.","i=0;i","ii","input:","int","left","locat","m","mani","mark","middl","move","n","note:","now","obstacl","obstaclegrid)","on","output:","path","point","problem","public:","reach","respect","right","robot","solut","space","thought","time.","top","tri","two","uniqu","uniquepathswithobstacles(vector>&","way","x","{","相比于上题加入了一些处理，但是时间复杂度还是o(n²)","这题和上一题唯一的区别就是，这里在机器人的行动路上放了一些障碍。其实和上题做法没什么区别，当当前走到障碍的时候，直接把这个位置的结果赋值0。这样的好处是，既可以代表这里没有一种方案可以走到，也可以在他右边和下面得到总线路时，加上的是0。"],"64.-minimum-path-sum.html":["1→3→1→1→1","64.","7","[","[1,3,1],","[1,5,1],","[4,2,1]","]","algorithm","along","analysi","bottom","class","code","descript","down","example:","explanation:","fill","find","for(int","given","grid","grid)","i=1;i","input:","int","left","m","minim","minimum","minpathsum(vector>&","move","n","neg","non","note:","number","numbers,","output:","path","path.","point","problem","public:","right","solut","sum","sum.","thought","time.","top","x","{","和上一题没什么不同，动态规划换汤不换药。上一题是路线的数量，这里是找到最小值。","时间复杂度和上两题一样,o(n²)"],"67.-add-binary.html":["\"1\"","\"100\"","\"1010\",","\"10101\"","\"1011\"","\"11\",","'0')+c;","'0')+int(b[i]","(also","){","//cout","0.","1","1:","2:","67.","=","a,","add","addbinary(str","al=a.size(),bl=b.size();","algorithm","analysi","b","b)","binari","both","c=0;","c=1;","charact","class","code","contain","count=int(a[i]","descript","empti","exampl","given","if(al=0;i","if(count==1||count==3){","if(count>=2){","input","input:","int","non","output:","problem","public:","res=string(max(al,bl)+1,'0');","res[i+1]='1';","return","solut","string","string).","strings,","sum","thought","two","{","}","和十进制加法没什么不同，都是定义一个进位标志位，两数相加再加上标志位。得到的结果就是这一位，改变标志位。最后注意开头的0需要删除","线性处理两个字符串，最后时间复杂度o(n)"],"69.-sqrt-x.html":["1:","1;","2","2.82842...,","2:","4","69.","8","algorithm","analysi","class","code","comput","decim","descript","digit","exampl","explanation:","guarante","if(x=x/mid)","implement","input:","int","integ","integer,","integer.","left==x/left?left:left","left=mid+1;","mysqrt(int","neg","non","output:","part","problem","public:","result","return","returned.","right=mid;","root","solut","sqrt(int","sqrt(x)","squar","thought","truncat","truncated,","type","x","x)","x).","x,","x中查找是否有满足mid*mid=x的情况","{","}","};","二分查找，每次可以排除一半的数字。时间复杂度o(lgx)","回归题目本身，这里我们在0","第一次做这个题的时候，我也不是很清楚如何去计算一个数开根号。之后看了discuss了解到可以用二分查找。（感觉很多题都可以用二分查找，在一个大范围中找一个数，然后可以找到排除一半数的条件，条件很难找，需要仔细体会）。我记得我前几周做了一个contest也是用二分查找，当时做出来之后很惊讶。"],"70.-climbing-stairs.html":["+","//用一个数组保存","1","1.","1:","1;","2","2.","2:","3","3.","70.","algorithm","analysi","case.","class","climb","climbstairs(int","code","descript","distinct","each","exampl","explanation:","for(int","given","i=3;i","if(n==1)","input:","int","integer.","mani","n","n)","note:","output:","posit","problem","public:","reach","res(n+1);","res[1]=1;res[2]=2;","return","solut","stair","step","steps.","take","thought","three","time","top.","top?","two","vector","way","{","利用动态规划来解决斐波拉契数列问题，时间复杂度o(n)，第二种方法相对于第一种方法减少了线性数组的开销，空间复杂度从o(n)减到了o(1)。","说是爬楼梯，其实就是斐波拉契数列。当前值等于前两个的值相加。可以用动态规划解决，用一个一维数组保存所有结果。也可以直接用两个变量保存之前的两个数的值，而不保存所有的结果。"],"72.-edit-distance.html":["\"execution\"","\"horse\",","\"intention\",","\"ros\"","'c')","'e')","'h'","'i'","'n'","'r')","'t')","'u')","'x')","(insert","(remov","(replac","1:","2:","3","5","72.","=",">","algorithm","analysi","charact","class","code","convert","delet","descript","distanc","dp(word2.size()+2);","edit","enent","exampl","exect","execut","exent","explanation:","find","follow","for(int","given","hors","i=0;i","inent","input:","insert","int","intent","m,word2","mindistance(str","minimum","number","n，最后时间复杂度o(m*n)","oper","output:","permit","problem","public:","replac","requir","ro","rors","rose","size","solut","string","thought","two","vector","word","word1","word1,","word2","word2)","word2,","word2.","word:","{","其中：(horse,ro)代表增加一个，(hors,ros)代表减少一个，(hors,ro)代表替换操作，我们使用二维数组解决此题。但是这题可以优化到只用一维数组，这里只给出一维数组的解答。","如果两个字符不相等，则(horse,ros)=min((horse,ro),min((hors,ros),(hors,ro)))+1;","字符串处理操作。之前也总结了字符串题目的几种方法。动态规划，字符串匹配的一些算法，字典树等等。如果看到题目找不到思路，没有做过类似的，就使用这几种方法试试。","我们只需要判断，如果两个字符串当前index上两个字符相等，则(horse,ros)=(hors,ro)","要得到匹配horse，ros的最小次数。如果我们知道(horse,ro),(hors,ros),(hors,ro)三个字符串的匹配结果。","设word1","这里两个字符串，使用动态规划处理。一个二维数组实现。首先说一下动态规划的状态转移方程如何理解。"],"73.-set-matrix-zeroes.html":["//判断第一列是否有0","0,","0.","1:","2:","73.",";","[","[0,0,0,0],","[0,0,0],","[0,1,2,0],","[0,3,1,0]","[0,4,5,0],","[1,0,1]","[1,0,1],","[1,1,1]","[1,1,1],","[1,3,1,5]","[3,4,5,2],","]","algorithm","analysi","bool","class","code","column","descript","element","entir","exampl","for(int","given","i=0;i","if(matrix.size()==0||matrix[0].size()==0)","input:","m","matrix","matrix)","matrix,","n","output:","place.","place。于是我将第一行和第一列定义为标志位，从2行2列开始遍历，如果为0，将为0的那行和列的第一位设置为0标志位。之后再次遍历一遍第一行和第一列，将有标志位的那一行或者一列置为零","problem","public:","return","row","row=false,col=false;","set","setzeroes(vector>&","solut","thought","void","x","zero","{","这个题目不是很难，但是leetcode限制了我们，希望我们使用o(1)的空间复杂度，然后do","这类题目，无论你算法多么巧妙，时间复杂度都会是o(n²)，但是这里空间复杂度被限制到了o(1)，有很大提升。"],"74.-search-a-2d-matrix.html":["11,","13","16,","1:","1;","20],","2:","2d","3","3,","30,","34,","5,","50]","74.","7],",";","=","[","[1,","[10,","[23,","]","algorithm","analysi","bool","class","code","descript","each","effici","exampl","fals","false;","first","follow","greater","i=matrix.size()","if(matrix.size()==0||matrix[0].size()==0)","if(matrix[i][j]","input:","int","integ","j=0;","last","left","m","matrix","matrix,","matrix.","n","output:","previou","problem","properties:","public:","return","right.","row","row.","search","searchmatrix(vector>&","solut","sort","target","target)","thought","true","valu","while(i>=0&&jtarget)","write","x","{","第一次做这个题目的时候，我首先在行上做二分查找，然后再找到的列上在来一次二分查找。这样时间复杂度是o(lgn)，也不是很慢。但是其实这个题目就是需要一种二维的二分查找。二分查找的核心是，通过一次比较，能排除一部分数字。","这里时间复杂度不一定比两个二分查找更快，二分查找时间复杂度是o(lgn+lgm),这里时间复杂度最坏情况应该是o(m+n)；","这题思路是，从左上角或者右下角开始。可以思考一下，为什么从这里出发。然后一步步和target比较，并且逼近target"],"75.-sort-colors.html":["**so","0's,","0,","1'","1's,","1,","2","2's,","2's.","75.","[0,0,1,1,2,2]","[2,0,2,1,1,0]","adjacent,","algorithm","analysi","array","blue","blue,","blue.","class","code","color","come","constant","count","descript","example:","first,","follow","for(int","forward","function","given","here,","i=0;i","input:","int","integ","iter","library'","n","note:","number","nums)","o(n)，但是适用于数字比较少的情况。这里一共就3个数字，是比较适合的。","object","on","order","output:","overwrit","pass","place","pos_1=0,pos_2=0;","problem","problem.","public:","red,","repres","respectively.","same","solut","sort","sort.","sortcolors(vector&","space?","straight","suppos","thought","total","two","up","up:","us","void","white","white,","{","一次遍历数组，时间复杂度o(n)","典型的计数排序，计数排序时间复杂度是","最简单的一种方法是，两次遍历出结果，第一次遍历得到所有数的count，第二次遍历对数组赋值。","能否一次遍历出结果呢？是可以的，使用两个标志位标志0，1的结尾。遍历数组，如果为0，swap交换到0的末尾，如果为1，swap交换到1的末尾"],"76.-minimum-window-substring.html":["\"\".","\"abc\"","\"adobecodebanc\",","\"banc\"","(head=begin);","76.",";","=","algorithm","alway","analysi","begin)","begin=0,end=0,head=0,length=int_max;","c:t)","charact","class","code","complex","contain","count","count++;","count=t.size();","cover","descript","empti","example:","find","for(auto","given","guarante","if(length>end","if(map[s[begin++]]++>=0)","input:","int","length==int_max?\"\":s.substr(head,length);","length=end","map(128,0);","map[c]++;","minimum","minwindow(str","note:","o(n).","on","output:","problem","public:","return","s","s,","s.","solut","string","substr","such","t","t)","t,","thought","uniqu","vector","while(count==0){","while(end0)","window","window,","{","}","};","初始化是t.size())。如果size为0，就可以将当前状态加入到结果。并且移动头指针，逼近尾指针。","滑动窗口时间复杂度o(n),只需要一次遍历数组，最后产生结果。","滑动窗口问题，做了很多题目之后，碰到最后需要求连续序列满足一种情况的时候，一般都能用滑动窗口，也就是一前一后指针代表窗口。","这里首先定义一个vector，存储所有字符出现的次数。然后定义一前一后两个指针，后指针走过一个字符的时候，将vector中字符保存的次数减一，如果减一是有效的（能在t字符串中体现），那就将之前保存的size减一(s"],"77.-combinations.html":["...","1","2","4,","77.","=","[","[1,2],","[1,3],","[1,4],","[2,3],","[2,4],","[3,4],","]","algorithm","analysi","class","code","combin","combine(int","descript","example:","for(int","given","helper(res,tmp,n,k,1);","helper(vector>&","i=pos;i","if(tmp.size()==k){","input:","int","integ","k","k)","k,","k,int","n","n,","n,int","n.","number","out","output:","pos){","possibl","problem","public:","res,vector&tmp,int","res.push_back(tmp);","res;","return","return;","solut","thought","tmp;","two","vector","vector>","void","{","}","组合问题需要放置k个值，每个值只能比后面的小，不能重复。时间复杂度不是太好分析，有很多种情况。但是回溯法时间复杂度一般都是o(2^n)","组合问题，典型的回溯法例题，使用回溯法解决"],"78.-subsets.html":["(the","1)","78.","=","[","[1,2,3]","[1,2,3],","[1,2],","[1,3],","[1],","[2,3],","[2],","[3],","[]","]","algorithm","analysi","class","code","contain","descript","distinct","duplic","example:","for(int","given","help(res,tmp,nums,0);","help(vector>&","i=pos;i","if(tmp.size()==nums.size()","input:","integers,","note:","num","nums)","nums,","nums,int","output:","pos){","possibl","power","problem","public:","res,vector&tmp,vector&","res.push_back(nums);","res.push_back(tmp);","res;","return","return;","set","set).","solut","subset","subsets(vector&","subsets.","thought","tmp;","vector","vector>","void","{","}","时间复杂度是o(2^n),对于每一个数，都能选择是放入或者不放入最后数组","类似上一题得到组合，只不过这里需要得到所有大小的组合。只需要改变回溯法中，将中间结果push到res的位置，在进入下一个函数的时候就push，而不是在递归基的时候，这样就能到达遍历的效果。"],"79.-word-search.html":["\"abcb\",","\"abcced\",","\"adjacent\"","\"see\",","){","//board[i][j]='\\0';","1,j,pos+1)||","1,pos+1)","2019/10/16","2d","79.",":","=","[","['a','b','c','e'],","['a','d','e','e']","['s','f','c','s'],","]","adjac","algorithm","analysi","board","board,","board[i][j]='\\0';","board[i][j]=t;","board[i][j]^=255;","bool","cell","cell,","char","class","code","construct","descript","dfs，每层有4个分量，时间复杂度还是挺高的，但是不好分析。我这里就不分析了","example:","exist","exist(vector>&","false.","false;","find","for(int","given","grid.","help(board,word,i","help(board,word,i+1,j,pos+1)||","help(board,word,i,j","help(board,word,i,j+1,pos+1)||","horizont","i,int","i=0;i>&board,","if(","if(i=board.size()||j>=board[0].size()||board[i][j]=='\\0'||word[pos]!=board[i][j])","if(i=board.size()||j>=board[0].size()||word[pos]!=board[i][j])","if(pos==word.size())","j,int","letter","more","neighboring.","once.","pos){","problem","public:","return","same","search","sequenti","solut","string","string&word,int","t=board[i][j];","those","thought","true.","true;","updat","us","vertic","word","word)","word,","{","}","};","下午上课忽然想通了中午异或的问题，我中午出问题的代码是board[i][j]^=1.大家应该都知道，char是1个字节的，有8位，但是数字1是0000001，所以异或之后只有最后一位会改变。只改变最后一位的话，很容易导致异或之后和其他字符相同。","思路很简单，都类似一种暴力搜索法，直接从每个节点都开始搜索，如果是当前节点是对的，就从这个节点的4个方向继续搜索。使用dfs搜索，每一层都有4个分量。唯一需要注意的就是不能搜索到重复的值，也就是我这里搜索完，我去我右边的节点，我右边的节点不能再搜索这个原来的节点了。","所以想通之后，直接将代码改为board[i][j]^=255就稳稳的过了。（255=11111111）","有一种方法就是用标志，显示这里已经被搜索了，每次搜索完之后将当前字符设置为0。那么之后肯的和他匹配不了了。","还有一种思路利用异或的特性。异或两次回到原值，那么我们经历一个节点之后只需要将这个节点异或一下，之后回来的时候再异或一下，就能恢复。这种好处是可以不用中间变量来保存中间值，但是坏处就是异或之后的值可能会对之后的程序产生影响，我当时就是用这种思路，结果到倒数第二个样例的时候，失败了。最后换了第一种方法"],"80.-remove-duplicates-from-sorted-array-ii.html":["(i.e.,","(int","//","0,","0;","1,","1:","2","2,","2:","2]){","2]相比，如果大于的话，那么当前肯定要加，但是如果等于的话，那肯定就是前面已经放置了两个相同的数，就可以不用再写了。","3","5,","7,","80.","=","[0,0,1,1,1,1,2,3,3],","[1,1,1,2,2,3],","algorithm","alloc","analysi","anoth","answer","appear","array","array,","array?","be","beyond","caller","caller.","clarification:","class","code","confus","copy)","descript","doesn't","duplic","element","elements.","exampl","extra","first","five","for(auto","function","function,","given","if(posnums[po","ii","input","int","integ","intern","known","leav","len","length","length.","make","matter","mean","memory.","modif","modifi","new","note","num","num:nums){","nums)","nums,","nums[pos++]=num;","o(1)","pass","place","pos;","pos=0;","print","problem","public:","range语句，得到nums所有的数字。然后和nums[po","reference,","reference.","remov","removeduplicates(nums);","removeduplicates(vector&","respectively.","return","set","seven","solut","sort","space","such","think","this:","thought","twice","us","valu","well.","without","{","}","};","一次遍历出结果，时间复杂度是o(n)","这题目其实很简单，怎么样都能做得出。只是有些人做的简单有些人做的复杂。首先用for"],"81.-search-in-rotated-sorted-array-ii.html":["(i.e.,","0","1:","1;","2:","3","81.","=","[0,0,1,2,2,5,6]","[2,5,6,0,0,1,2]).","[2,5,6,0,0,1,2],","affect","algorithm","analysi","array","array,","array，这题在数组中加入了重复的数字，导致会出现一些问题。比如left和right是一样的数，甚至是，left和mid和right都是一样的数，这就不好区分两个区间。首先使用一个循环处理，如果left和right一样，将left++。这样就能去除所有边界一样的情况。除去之后，就和前面没有重复数组是一样的处理情况了","ascend","becom","beforehand.","bool","class","code","complexity?","contain","descript","duplicates.","exampl","fals","false.","follow","found","given","ii","input:","int","left=0,right=nums.size()","num","nums,","order","otherwis","output:","pivot","problem","public:","return","rotat","run","search","search(vector&","search.","solut","sort","suppos","target","target)","thought","time","true","true,","unknown","up","up:","valu","while(leftnums[mid]&&target=nums[left]&&target","why?","{","本来是二分查找的变体，时间复杂度应该是o(lgn)，但是这里有个对left和right的预处理，最坏情况下，时间复杂度会到o(n)。","相比于search"],"82.-remove-duplicates-from-sorted-list-ii.html":["*","*/","*next;","/**","1","1:","2","2:","82.",":",">1",">2",">3",">4",">5",">next;",">next=deleteduplicates(head);",">val)",">val){",">val==now","algorithm","analysi","class","code","definit","delet","deleteduplicates(head);","deleteduplicates(listnode*","descript","distinct","duplic","exampl","given","head)","head=head","if(head&&head","if(head==null)","ii","input:","int","leav","link","list","list,","list.","listnod","listnode(int","listnode*","next(null)","node","now","now;","now=head;","null;","number","numbers,","origin","output:","problem","public:","remov","return","singli","solut","sort","struct","thought","val(x),","val;","while(head&&head","x)","{","{}","}","};","}else{","一次遍历解决，时间复杂度o(n)","又是链表问题，并且直接返回一个链表。和之前做链表题一样直接用递归的形式解决"],"83.-remove-duplicates-from-sorted-list.html":["*","*/","*next;","/**","1","1:","2:","83.",":",">1",">2",">3",">next;",">next==null)",">next=deleteduplicates(next);",">val){",">val==head","algorithm","analysi","appear","class","code","definit","delet","deleteduplicates(listnode*","descript","duplic","each","element","exampl","given","head","head)","head;","if(head==null||head","input:","int","link","list","list,","list.","listnod","listnode(int","listnode*","next(null)","next=head","next=next","once.","output:","problem","public:","remov","return","singli","solut","sort","struct","such","thought","val(x),","val;","while(next&&next","x)","{","{}","}","};","一次遍历解决问题，时间复杂度o(n)","和上一题一样，甚至比上一题简单，使用递归解决"],"84.-largest-rectangle-in-histogram.html":["++i;","//cout","1,","10","84.","=","[2,1,5,6,2,3]","[2,1,5,6,2,3].","abov","algorithm","analysi","area","area,","bar","class","code","descript","each","example:","find","for(int","given","height","heights)","heights.push_back(0);","histogram","histogram'","histogram.","i=0;i=heights[st.top()]){","if(st.empty()){","input:","int","integ","largest","largestrectanglearea(vector&","n","neg","non","output:","problem","public:","rectangl","repres","res=0;","shade","shown","solut","st.push(i);","st;","stack","t=st.top();st.pop();","thought","unit.","width","{","}else{","一次遍历解决问题，使用栈来辅助解决。对于数组，如果碰到顺序递增，就将当前数字压入栈中，如果当前height小于栈顶值，就将栈顶值弹出，并计算以弹出值为高度的矩形面积大小。这里关键是如何去计算矩形的宽，根据我们之前的算法，可以知道，当前栈顶的值肯定代表的是当前访问过的，剩下的最大值，因为比他更大的值在之前肯定被弹出计算了，那么，可以用当前index减去当前栈顶代表的index，就能表示矩形的宽了。","使用栈，一次遍历得到结果，时间复杂度o(n)"],"85.-maximal-rectangle.html":["0'","0;","1'","1's,","1;","1。然后定义一个curleft和curright，每当当前节点为0的时候，就要改变curleft和currgiht，当节点为1的时候，改变right和left数组。具体行为可以看代码理解。","2d","6","85.","[","[\"1\",\"0\",\"0\",\"1\",\"0\"]","[\"1\",\"0\",\"1\",\"0\",\"0\"],","[\"1\",\"0\",\"1\",\"1\",\"1\"],","[\"1\",\"1\",\"1\",\"1\",\"1\"],","]","algorithm","analysi","area.","binari","class","code","contain","curright=j","descript","example:","fill","find","for(int","fromleft(matrix[0].size(),0);","fromright(matrix[0].size(),matrix[0].size());","fromright[j]=matrix[0].size()","fromright[j]=min(fromright[j],curright);","given","height(matrix[0].size(),0);","i=0;i=0;","if(matrix.size()==0||matrix[0].size()==0)","if(matrix[i][j]=='0'){","input:","int","j){","j=0;j","largest","matrix","matrix)","maxim","maximalrectangle(vector>&","output:","problem","public:","rectangl","res=0;","return","solut","thought","vector","{","}","}else{","有一个大循环，循环中进行3次遍历。相当于对二维数组进行遍历，时间复杂度o(n²)","求出矩阵中的最大矩形，可以利用动态规划的思路求解。首先定义一个left数组，保存节点高度可以最左到哪个节点，再定义一个right数组，保存节点高度最右可以到哪个节点。然后还有height数组，保存当前节点的高度。最后我们从以为矩阵开始，慢慢加高维度。起始时，left数组初始化为0，right数组初始化为s"],"86.-partition-list.html":["*","*/","*next;","/**","1","1);","3","86.",":","=",">2",">2,",">3",">4",">5",">next",">next){",">next;",">next=head;",">next=null;",">next=tou",">next=tou1",">val>=x){","algorithm","analysi","befor","class","code","come","definit","descripiton","each","equal","example:","given","greater","head","head,","head=tou1;","if(tou1","input:","int","less","link","list","list.","listnod","listnode(","listnode(int","listnode*","next(null)","node","order","origin","output:","partit","partition(listnode*","partitions.","preserv","problem","public:","rel","return","singli","solut","struct","such","thought","tou1","tou1=new","tou1=tou1","tou2","tou2=new","tou2=tou2","tou=tou2;","two","val(x),","val;","valu","while(tou1","x","x)","x,","x.","{","{}","}","};","算法一次遍历链表，时间复杂度o(n)","首先初始化两个头，然后将两个partition，分别加到两个头上，最后将两个partition合并"],"87.-scramble-string.html":["\"abcde\",","\"at\",","\"caebd\"","\"eat\"","\"gr\"","\"great\",","\"great\".","\"great\":","\"rgeat\"","\"rgeat\".","\"rgtae\"","\"rgtae\".","/","//","1:","2:","87.","=","\\","algorithm","analysi","below","binari","bool","children","children,","children.","choos","class","code","continu","cout","descript","determin","e","eat","empti","exampl","example,","fals","g","given","gr","great","input:","isscramble(str","leaf","length,","node","non","on","output:","partit","possibl","problem","produc","public:","r","recursively.","repres","represent","rg","rgeat","rgtae","s1","s1,","s1.","s2","s2)","same","scrambl","similarly,","solut","string","string,","substr","swap","t","ta","tae","thought","tree","true","two","{","判断是否scramble，可以用递归的方式进行。如果一个字符串的左边和另一个字符串的左边是scramble，右边和右边是scramble。或者是，左右，右左是scramble字符串的话。那么这两个字符串就是scramble字符串。可以通过剪枝加快判断，首先判断两个字符串是否包含同样的字符，两个字符串中包含的字符不一样，就可以直接返回。虽然这里用了o(n)的时间，但是能剪去很多分支，是值得的。","每个函数正常情况下都能分出4个分支，每个分支中时间复杂度是线性的。最后时间复杂度不好定义。但是整个运行时间复杂度还是挺高的"],"88.-merge-sorted-array.html":["(size","+","1,j=n","1,res=m+n","1;","3","88.","=","[1,2,2,3,5,6]","[1,2,3,0,0,0],","[2,5,6],","]:nums2[j","];","]=","addit","algorithm","analysi","array","array.","assum","class","code","descript","element","enough","equal","example:","given","greater","hold","i=m","i>=0&&nums1[i]>nums2[j]?nums1[i","initi","input:","int","integ","m","m,","merg","merge(vector&","n","n)","note:","number","nums1","nums1,","nums1[r","nums2","nums2,","nums2.","on","output:","problem","public:","respectively.","solut","sort","space","thought","two","vector&","void","while(j>=0){","{","}","};","合并两个有序数组，这也是归并排序中必不可少的一步，如何做好这一步，速度快并且不溢出，还是有点难度的。我们归并排序的时候，一般是将前半部分数组复制，后半部分数组保存。但是这里是将后半部分数组赋值，前半部分保存下来。我们需要尽可能的利用前面保存的数据，能不改变就不改变。所以我们从后往前合并。如果nums2已经用完了，这时候，nums1前面的数据就能直接使用了，而不需要改变。","对每个数操作一次，时间复杂度o(m+n)"],"90.-subsets-ii.html":["(the","//类似上一题，直接用回溯法解决问题","90.","[","[1,2,2]","[1,2,2],","[1,2],","[1],","[2,2],","[2],","[]","]","algorithm","analysi","class","code","collect","contain","descript","duplic","duplicates,","example:","for(int","given","help(res,tmp,nums,0);","help(vector>&res,vector&tmp,vector&nums,int","i=1;itmp=res[start];","i=pos;i>","if(pos==nums.size())","ii","input:","int","integ","note:","nums)","nums,","output:","pos){","possibl","power","problem","public:","res.push_back(tmp);","res.push_back({nums[0]});","res;","res={{}};","return","return;","set","set).","solut","sort(nums.begin(),nums.end());","start=1;","subset","subsets.","subsetswithdup(vector&","thought","tmp.push_back(nums[i]);","tmp{};","vector","vector>","void","{","}","};","得到子集问题，和之前的第一题相比，多了重复数字，在计算子集的时候，需要处理重复情况。这里可以用和第一题类似的回溯法。也可以一次次将新数字push_back到之前得到的结果中，得到新的子集。","得到所有的子集问题，回溯法时间复杂度o(2^n)。每个数字可以出现一个也可以不出现，每个数字都会进行两次计算，两个分支。最后得到2^n"],"91.-decode-ways.html":["\"12\"","\"226\"","\"ab\"","\"bbf\"","\"bz\"","\"l\"","\"vf\"","'a'","'b'","'z'","(1","(12).","(2","(22","...","0;","1","1:","2","2)","26","26),","2:","3","6),","6).","91.",">","algorithm","analysi","be","class","code","contain","decod","desctipt","determin","digits,","empti","encod","exampl","explanation:","follow","for(int","given","i=1;i","if(s[0]=='0')","input:","int","it.","letter","mapping:","messag","non","number","numdecodings(str","output:","problem","public:","res[0]=1;res[1]=1;","return","s)","solut","string","thought","total","us","vectorres(s.size()+1);","way","way。","way就可以加上前两次的decod","way，如果当前的数字不等于0，就能加上前一个次的decod","z","{","一次遍历处理数组，时间复杂度o(n),使用一维数组保存结果，空间复杂度o(n)","典型的动态规划问题，当前数字如果可以和前面数字组合成为一个合法的字符，当前decod"],"92.-reverse-linked-list-ii.html":["){","*","*/","*next;",",","/**","1","1);","2,","4","92.",":","=",">2",">3",">4",">5",">next;",">next=head;",">next=mov",">next=move;",">next=pr",">null",">null,","algorithm","analysi","class","code","definit","descript","example:","head,","ii","input:","int","length","link","list","list.","listnod","listnode(","listnode(int","listnode*","m","m)","m,","move","move=tmp","n","n)","n.","newhead","newhead=new","next(null)","note:","on","output:","pass.","posit","pre","pre=newhead;","pre=pr","problem","public:","return","revers","reversebetween(listnode*","singli","solut","struct","thought","tmp","tmp=pre","val(x),","val;","while(n","x)","{","{}","}","};","≤","对链表进行一次遍历，转置，循环中操作都是o(1)，最后时间复杂度o(n)","首先找到待旋转的节点，然后就是一个旋转链表问题了"],"93.-restore-ip-addresses.html":["\"255.255.111.35\"]","\"25525511135\"","3个字符的情况。","93.","[\"255.255.11.135\",","a=1;a","address","algorithm","analysi","class","code","combinations.","contain","descript","digits,","example:","for(int","given","input:","ip","output:","possibl","problem","public:","res;","restor","restoreipaddresses(str","return","s)","solut","string","thought","valid","vector","{","上面介绍的是回溯的情况，其实可以不需要回溯。因为肯定有4个地方需要我们放置数字，我们只需要3个循环，每个循环处理1","其实是一道典型的回溯法问题。首先第一个位置放一个字符，然后进如下一个函数，运行完回溯之后，放两个字符。然后是3个。中间判断非法情况，如果长度大于1并且第一个字符是'0',显然不行。如果转化为数字之后，数值大于255，显然也是不行的。如果所有情况都满足，最后将结果push到res中。","虽然有4个循环，但是时间复杂度不会很大，因为每个循环就进行3次，循环中的操作时间复杂度可以近似看做o(1)。"],"94.-binary-tree-inorder-traversal.html":["*","*/","*left;","*right;","/","/**","//morri","//迭代写法","//递归写法","1","2","3","94.",":",">left);",">left;",">left==null){",">right!=root){",">right&&prev",">right);",">right;",">right==null){",">right=null;",">right=root;",">val);","[1,3,2]","[1,null,2,3]","\\","a)","algorigthm","algorithm","b)","binari","class","code","definit","descript","example:","follow","given","if(prev","if(root","if(root==null)","inord","inorder(root","inorder(root);","inorder(treenode*","inordertraversal(treenode*","input:","int","iteratively?","lass","left(null),","node.","nodes'","output:","porblem","prev","prev=null;","prev=prev","prev=root","public:","recurs","res.push_back(root","res;","return","return;","right(null)","root)","root=prev","root=root","root=st.top();","solut","st.pop();","st.push(root);","st;","stack","struct","thought","travers","traversal，只需要o(1)的空间，时间复杂度还是控制在o(n)。极大的减少了空间。这里主要是利用了叶子节点大量的空指针。前面问题使用栈来辅助解决，是因为访问到后续节点的时候，不能够再回到根节点，这里用叶子节点的指针，指向后继节点，方便回到前面。","tree","tree,","treenod","treenode(int","treenode*","trivial,","up:","val(x),","val;","values.","vector","void","while(prev","while(root){","while(root||!st.empty()){","x)","{","{}","}","};","}else{","二叉树的中序遍历问题。这种问题用递归的方法是很简单的。但是还是要知道迭代的写法。毕竟如果节点很多的话，那么多递归函数，栈开销会很大。","如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。","如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。","如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。","如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。","步骤是：","然后去看了一下discuss，真的是发现每次看都会发现很意想不到的算法。比如中序遍历，这里就可以用morri","递归写法很简单，按顺序访问就行，对于迭代写法，我们首先要明白我们访问的顺序，先左，后中再右。我们使用一个栈保存中间节点，没碰到一个root节点，顺序将左子树一直push进栈，到叶子节点的时候，弹出顶上的节点，这时候就能访问了，然后对于这个节点的右子树，把它当做一个root，继续运行一遍","通过分析和leetcode最后的结果来说，上面3中方法从上到下应该是越来越好的。迭代对于递归来说，减少了函数栈开销，最后空间用的少一点。morris对于上面两中来说，只用了o(1)的空间复杂度，最后空间是用的最少的。","重复以上1、2直到当前节点为空。"],"95.-unique-binary-search-trees-ii.html":["(binari","*","*/","*left;","*right;","...","/","/**","//res.push_back(null);","1","1,size);","10生成bst。首先利用5当中间节点的时候，1","2","3","4当左子树的情况。我们可以用动态规划的方法来避免重复计算。","4要当左子树，然后用6当中间节点的时候，还是会碰到1","5","95.",":",">left=le;",">right=ri;","[","[1,null,2,null,3]","[1,null,3,2],","[2,1,3],","[3,1,null,null,2],","[3,2,null,1],","\\","]","abov","algorithm","analysi","below:","binari","bst'","class","code","correspond","definit","descript","end,int","example:","explanation:","for(int","for(treenode*","gener","genera(1,n,n);","genera(int","generatetrees(int","given","i=start;i","if(ma.find(start*size+end)!=ma.end()){","if(n==0)","if(start>end){","ii","input:","int","integ","le:left){","left(null),","left=genera(start,i","ma;","ma[start*size+end];","ma[start*size+end]=res;","map>","n)","n,","n.","node.","output","output:","problem","public:","res.push_back(root);","res;","return","ri:right){","right(null)","right=genera(i+1,end,size);","root","root=new","search","shown","size){","solut","start,int","store","struct","structur","thought","tree","treenod","treenode(i);","treenode(int","treenode*","trees)","uniqu","val(x),","val;","valu","vector","x)","{","{null};","{}","{};","}","};","对于一个二叉树来说，最好使用递归解决问题。这里返回值是一系列的二叉树。对于一个range，我们可以首先定好一个中间节点当做二叉树的根节点，然后比这个值小的当做左子树，大的当右子树。这里我们就可以将代码简化很多了。但是单就这样做还是不行，会有大量的重复计算，比如1","这里是一种递归方法，时间复杂度还不会分析。使用动态规划解决之后时间还是不会太慢的"],"96.-unique-binary-search-trees.html":["(binari","...","/","1","2","3","3,","5","96.","=","\\","algorithm","analysi","binari","bst'","bst's:","class","code","descript","dp(n+1,0);","dp[0]=1;","dp[1]=1;","example:","explanation:","for(int","given","i=2;i","input:","int","left,right;","mani","n","n)","n,","n?","numtrees(int","output:","problem","public:","search","solut","store","structur","thought","total","tree","trees)","uniqu","valu","vector","{","和上题一个类型，简化了一点。上一题需要输出所有的结果，这里不需要结果，只需要数字。对于上一题，我们保存一棵树开始和结束的位置。来映射他的结果，但是这里不需要，因为只要树的size固定好，能生成的所有的tree的数量也就出来了。这里使用一个数组保存结果","算法中有两个循环，执行n²次，每次执行时间复杂度o(n)，最后时间复杂度o(n²)"],"97.-interleaving-string.html":["\"aabcc\",","\"aadbbbaccc\"","\"aadbbcbcac\"","\"dbbca\",","(s2.size()+1,false));","1:","2:","97.","=","algorithm","analysi","bool","c==c?以及aabc和dbbca是否匹配aadbbcbca，或者是a==c?以及aabcc和dbbc是否匹配aadbbcbca。上面两中情况任何一种成立，这里的匹配都可以算成功。所以这里动态规划保存之前的结果，这次匹配使用前面的结果解决问题。","class","code","descript","exampl","fals","false;","find","for(int","form","given","i=1;i","if(s1.size()+s2.size()!=s3.size())","input:","interleav","isinterleave(str","output:","pos(s1.size()+1,vector","pos[0][0]=1;","problem","public:","return","s1","s1,","s2","s2,","s2.","s3","s3)","s3,","solut","string","thought","true","vector>","whether","{","字符串问题，这题其实和最长公共子串问题很像，使用二维数组保存结果，动态规划解决问题。","状态转移方程得出：对于aabcc和dbbca匹配aadbbcbcac问题。我们只需要找到","设是s1长m，s2长n，会遍历一个m*n的二维数组,最后时间复杂度o(m*n)"],"98.-validate-binary-search-tree.html":["(bst).","*","*/","*left;","*right;","/","/**","1","1:","2","2147483649;","2:","3","4","4.","5","6","98.",":",">left;",">right;",">valval;","[2,1,3]","[5,1,4,null,null,3,6]","\\","algorithm","analysi","assum","binari","bool","both","bst","child'","class","code","contain","defin","definit","descript","determin","exampl","explanation:","fals","follows:","given","greater","if(root","input:","int","isvalidbst(treenode*","key","key.","left","left(null),","less","long","node","node'","node.","output:","pre=","problem","public:","return","right","right(null)","root","root)","root=root","root=todo.top();todo.pop();","search","solut","stack","struct","subtre","tarversal但是leetcode可能是有bug，代码是正确的但是最后得不到合理的结果。","thought","todo.push(root);","todo;","tree","tree,","treenod","treenode(int","trees.","true","true;","val(x),","val;","valid","valu","while(root){","while(root||!todo.empty()){","x)","{","{}","}","};","得到合法的bst，bst有个性质就是中序遍历结果是一个有序数组。所以我们直接中序遍历，每次保存前一个值，如果前一个值大于等于当前遍历的值，那么就不是一个合法的bst，否则就是合法的bst","时间复杂度o(n),遍历的时间，空间复杂度o(n)，使用一个栈保存数据。其实可以用之前的morri"],"99.-recover-binary-search-tree.html":["(bst)","*","*/","*left;","*right;","/","/**","//利用bst的中序遍历性质来解决问题","1","1:","2","2:","3","4","99.",":",">left);",">right);",">val){",">val;",">val=second",">val=tmp;",">val>root","[1,3,null,null,2]","[2,1,4,null,null,3]","[3,1,4,null,null,2]","[3,1,null,null,2]","\\","algorithm","analysi","binari","bo=false;","bool","chang","class","code","constant","count++;","count=0;","definit","descript","devis","element","exampl","first","first=null;","first=pre;","follow","forward.","if(count==2||root==null)","if(first!=null&&pr","if(first==null&&pr","input:","int","left(null),","mistake.","node.","o(n)","output:","pre=new","pre=root;","pretti","problem","public:","recov","recovertree(treenode*","return;","right(null)","root)","root){","search","second","second=null;","second=root;","solut","solution?","space","straight","struct","structure.","swap","thought","tmp=first","travers(root","travers(root);","travers(treenode*","tree","treenod","treenode(int","treenode(int_min);","treenode*","two","up:","us","val(x),","val;","void","without","x)","{","{}","}","};","一次遍历，时间复杂度o(n)","已知bst中有两个数字是错的，那么我们就找到两个错的位置就行。还是中序遍历，找到不是顺序增长的两个位置。记录下来，最后交换两个的值"],"100.-same-tree.html":["*","*/","*left;","*right;","/","/**","1","100.","1:","2","2:","3","3:",":",">left)&&issametree(p",">left,q",">right);",">right,q",">val)){",">val==q","[1,1,2]","[1,2,1],","[1,2,3]","[1,2,3],","[1,2],","[1,null,2]","\\","algorithm","analysi","binari","bool","check","class","code","consid","definit","descript","exampl","fals","false;","function","given","ident","if(p&&q&&(p","if(p==null&&q==null)","input:","int","issametree(p","issametree(treenode*","left(null),","node","node.","not.","output:","p,","problem","public:","q)","return","right(null)","same","solut","struct","structur","thought","tree","treenod","treenode(int","treenode*","trees,","true","true;","two","val(x),","val;","value.","write","x)","{","{}","}","};","树问题，递归解决，首先判断当前节点问题，然后对左右子树分别进行同样的计算。","相当于对树进行了一次遍历，时间复杂度o(n)"],"101.-symmetric-tree.html":["(ie,","*","*/","*left,*right;","*left;","*right;","/","/**","1","101.","2","3","4",":",">left);",">right);",">val!=right",">val)","[1,2,2,3,4,4,3]","[1,2,2,null,3,null,3]","\\","algorithm","analysi","around","binari","bool","both","center).","check","class","continue;","definit","descript","example,","false;","follow","given","if(left","if(left==null&&right==null)","if(left==null||right==null)","if(root==null)","int","issymmetric(treenode*","iteratively.","itself","left(null),","left=qu.front();","mirror","node.","not:","note:bonu","point","problem","public:","qu.pop();","qu.push(left","qu.push(right","qu.push(root","qu;","queue","recurs","return","right(null)","right=qu.front();","root)","solut","solv","struct","symmetr","symmetric:","thought","tree","tree,","treenod","treenode(int","true;","val(x),","val;","whether","while(!qu.empty()){","x)","{","{}","}","};","时间复杂度就是o(n),遍历一遍树。","本质是树的层次遍历，判断每一层是否是对称的。层次遍历需要用到队列来辅助解决。得到每一层所有的值。最后遍历判断是否对称。但是对于这题，还有个技巧。对于左右子树，采取不同的策略。对于左子树，每次访问完之后，先push左及节点再push右节点。右子树，先push右再左。这样，每次从队列中拿两个节点出来，这两个节点就刚好都是对称节点。我们判断它们是否一样就行，然后继续运行。"],"102.-binary-tree-level-order-traversal.html":["(ie,","*","*/","*left;","*right;","/","/**","100);","102.","15","20","3","7","9",":",">left);",">right);",">val);","[","[15,7]","[3,9,20,null,null,15,7],","[3],","[9,20],","\\","]","algorithm","analysi","as:","binari","break;","class","code","continue;","definit","descript","else{","example:given","given","if(q.empty())","if(tq==null){","if(tq==pos){","int","left","left(null),","level","level).","levelorder(treenode*","node.","nodes'","order","pos=new","problem","public:","q.pop();","q.push(pos);","q.push(root);","q.push(tq","q;","queue","res.push_back(tmp);","res;","return","right(null)","right,","root)","solut","struct","thought","tmp.clear();","tmp.push_back(tq","tmp;","tq=q.front();","travers","tree","tree,","treenod","treenode(","treenode(int","treenode*","val(x),","val;","values.","vector","vector>","while(!q.empty()){","x)","{","{}","}","};","二叉树层次遍历，使用queue辅助解决，必须掌握的题目","遍历一棵树，时间复杂度o(n)"],"103.-binary-tree-zigzag-level-order-traversal.html":["(ie,","*","*/","*left;","*right;","/","/**","//use","1);","103.","15","1]=t","20","3","7","9",":","=",">left)",">left);",">right)",">right);",">val);",">val;","[","[15,7]","[20,9],","[3,9,20,null,null,15,7],","[3],","\\","]","algorithm","altern","analysi","as:","between).","binari","bo=false;","bo=true;","bool","break;","class","code","continue;","definit","descript","else{","example:given","given","i++;","i=0;","if(bo){","if(lefttoright){","if(q.empty())","if(q1.empty())","if(q2.empty())","if(root==null)","if(t","if(t==tmp){","if(tmp","if(tmp==null)","int","left","left(null),","lefttoright=!lefttoright;","lefttoright=true;","level","new","next","node.","nodes'","on","order","problem","public:","q.pop();","q.push(root);q.push(tmp);","q.push(t","q.push(tmp);","q1,q2;","q1.pop();","q1.push(root);","q1.push(tmp","q2.pop();","q2.push(tmp","q;","queue","res.push_back(ve);","res;","return","right","right(null)","right,","root)","solut","stack","struct","t=q.front();","thought","tmp","tmp=q1.top();","tmp=q2.top();","travers","tree","tree,","treenod","treenode(","treenode(int","treenode*","two","val(x),","val;","values.","ve(1);","ve.clear();","ve.push_back(tmp","ve.resize(q.size());","ve;","ve[i]=t","ve[ve.size()","vector","vector>","while(!q1.empty()){","while(!q2.empty()){","while(true){","x)","zigzag","zigzaglevelorder(treenode*","zigzag层次遍历，分析之后得知，可以用两个栈来辅助遍历。参差遍历本来是用一个队列就行。但是这个用两个栈，然后定义一个bool变量指定现在是左到右还是右到左，分别用一个栈辅助遍历。最后处理方式和层次遍历一样","{","{}","}","};","}else{","使用两个栈的方法肯定还有优化的地方，去看了discuss之后，发现可以直接使用一个队列来做。最后遍历的结果需保存在一个vector中，我们默认只能push_back但是其实可以先定义好vector，最后看情况从左右分别将结果放置进去。","遍历问题时间复杂度还是一样的，都是o(n)"],"104.-maximum-depth-of-binary-tree.html":["*","*/","*left;","*right;","/","/**","0;","104.","15","20","3","3.","7","9",":","=",">left),maxdepth(root",">right))+1;","[3,9,20,null,null,15,7],","\\","algorithm","along","analysi","binari","children.","class","code","definit","depth","depth.","descript","down","example:","farthest","find","given","if(root==null)","int","leaf","left(null),","longest","max(maxdepth(root","maxdepth(treenode*","maximum","node","node.","note:","number","path","problem","public:","return","right(null)","root","root)","solut","struct","thought","tree","tree,","treenod","treenode(int","val(x),","val;","x)","{","{}","}","};","典型的递归解决二叉树问题","类似遍历问题，时间复杂度o(n)"],"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":["*","*/","*left;","*right;","/","/**","105.","15","20","3","7","9",":","=",">right=build(preorder,inorder,prelow+1+leftsize,prehigh,inroot+1,inhigh);","[3,9,20,15,7]","[9,3,15,20,7]","\\","algorithm","analysi","assum","binari","build(preorder,inorder,0,preorder.size(),0,inorder.size());","build(vector&","buildtree(vector&","class","code","construct","definit","descript","duplic","example,","exist","follow","for(int","given","i=inlow;ileft=build(preorder,inorder,prelow+1,prelow+1+leftsize,inlow,inroot);","if(prelow==prehigh)","inhigh){","inlow,int","inord","inorder)","inorder,int","inroot;","int","left(null),","node.","note:y","null;","prehigh,int","prelow,int","preorder","preorder,","problem","public:","return","right(null)","root","root;","root=new","solut","struct","thought","travers","tree","tree,","tree.","tree:","treenod","treenode(int","treenode(preorder[prelow]);","treenode*","val(x),","val;","vector&","x)","{","{}","}","};","前序遍历和中序遍历转二叉树，首先利用前序遍历第一个值就是当前根节点的性质。找到根节点，只有去中序遍历中找到根节点对应的位置，位置左边就是左子树右边是右子树。然后对于左右子树，得到他们的大小，去前序遍历中找到他们对应的位置。然后对于左右子树，递归解决。","每次在中序遍历中找到根节点的位置，一般情况下需要o(n)时间。那总时间可以表达为t(n)=2t(n/2)+o(n)，这个表达式用主定理分析可知为t(n)=o(nlgn)"],"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":["106.","binari","construct","inord","postord","travers","tree","后序遍历和中序遍历得到二叉树本质和上一题没区别。只是后序遍历的根节点出现在最后面。将前一题的算法修改下即可"],"107.-binary-tree-level-order-traversal-ii.html":["107.","binari","ii","level","order","travers","tree","和之前层次遍历一样，最后得到结果的时候reverse一下"],"108.-convert-sorted-array-to-binary-search-tree.html":["*","*/","*left;","*right;","/","/**","//coutleft=build(nums,low,mid);","0","1.","10","10,","10,null,5],","108.","3","3,0,5,9],","3,9,","5","9",":",">right=build(nums,mid+1,high);","[","[0,","\\","algorithm","analysi","answer","array","array:","ascend","balanc","binari","bst.","bst:","build(nums,0,nums.size());","build(vector&","class","code","convert","defin","definit","depth","descript","differ","element","example:","follow","given","height","high){","if(high==low)","int","is:","left(null),","low)>>1);","low,int","mid=low+((high","more","never","node","node.","null;","nums)","nums,int","on","order,","possibl","problem","problem,","public:","repres","return","right(null)","root","root;","search","solut","sort","sortedarraytobst(vector&","struct","subtre","thought","tree","treenod","treenode(int","treenode*","two","val(x),","val;","x)","{","{}","}","};","时间复杂度应该是o(n)遍历到所有节点，最后生成一个树","这里需要生成一个平衡bst。平衡bst有很多种表示方法，但是我们只需要生成一种就行，那当然是生成最简单的bst。每次到一个节点时，找到中点，将一个有序数组对分。直到叶节点。这样就能保证最后得到的是平衡二叉树"],"110.-balanced-binary-tree.html":["*","*/","*left;","*right;","/","/**","0;","1","1.","110.","15","1:","2","20","2:","3","4","7","9",":",">left);",">right);","[1,2,2,3,3,null,null,4,4]:","[3,9,20,null,null,15,7]:","\\","algorithm","analysi","as:","balanc","balanced.","binari","bool","class","code","defin","definit","descript","determin","differ","exampl","false.","false;","follow","given","height","if(isbalan(root)==int_max)","if(lefth==int_max||righth==int_max||abs(lefth","if(root==null)","int","int_max;","isbalan(treenode*","isbalanced(treenode*","left","left(null),","lefth=isbalan(root","max(lefth,righth)+1;","more","node","node.","problem","problem,","public:","return","right","right(null)","righth)>1)","righth=isbalan(root","root)","root){","solut","struct","subtre","thought","tree","tree,","treenod","treenode(int","true.","true;","val(x),","val;","x)","{","{}","}","};","二叉树问题，判断是否不是平衡二叉树。平衡二叉树定义是左右子树高度差要小于等于1.于是这题变成了类似求二叉树高度的问题。之前也做过二叉树高度问题，直接递归解决。这里只需要在求出高度之后加入一个判断。如果不是平衡的如何处理。求高度的函数，返回值必须是int而不是bool，这就是我们面临的问题。一种解决方案是把求高度的照搬过来，加一个全局变量，如果不平衡，全局变量为false。我们这里用另一种方法，如果不平衡，返回int_max.由于题目中不存在这么大的二叉树，所以int_max和任何子树组合都是不平衡的，最后int_max会传递到调用函数，最后判断是否为int_max来觉得返回true还是fals","时间复杂度o(n),就是遍历问题，遍历所有节点之后会得到结果"],"111.-minimum-depth-of-binary-tree.html":["(root","*","*/","*left;","*right;","/","/**","0;","1);","111.","15","2.","20","3","7","9",":","=",">left);",">left==null);",">right);",">right==null)&&(root","[3,9,20,null,null,15,7],","\\","algorithm","along","analysi","binari","bool","children.","class","code","continue;","definit","depth","depth.","descript","down","example:","find","fr=qu.front();","given","if(fr==null)","if(fr==pos){","if(isleaf(fr))","if(root==null)","int","isleaf(treenode*","leaf","left(null),","mindepth(treenode*","minimum","nearest","node","node.","note:","number","path","pos=new","problem","public:","qu.pop();","qu.push(fr","qu.push(pos);","qu.push(root);","qu;","queue","res++;","res;","res=1;","return","right(null)","root","root)","root){","shortest","solut","struct","thought","tree","tree,","treenod","treenode(","treenode(int","treenode*","val(x),","val;","while(!qu.empty()){","x)","{","{}","}","};","如果用深度优先搜索做这个题目，最后时间复杂度会是o(n)，因为会遍历所有节点，最后得到最浅的叶子节点。但是用广度优先搜索，只要找到第一个叶子节点就会返回，所以时间复杂度是降低很多的，不过应该也是o(n)","得到最浅的叶子节点的深度，直接用广度优先搜索即可，广度优先搜索有找的极值的性质"],"112.-path-sum.html":["*","*/","*left;","*right;","/","/**","1","11","112.","13","2","22,","22.","4","5","7","8",":","=","=root",">11",">2",">4",">left,sum)||haspathsum(root",">left==null&&root",">right,sum);",">right==null){",">val;","\\","ad","algorithm","along","analysi","below","binari","bool","children.","class","code","definit","descript","determin","equal","example:","exist","false;","given","haspathsum(root","haspathsum(treenode*","if(root","if(root==null)","if(sum)","int","leaf","left(null),","node","node.","note:","path","problem","public:","return","right(null)","root","root,","solut","struct","such","sum","sum)","sum,","sum.","thought","tree","treenod","treenode(int","true,","true;","up","val(x),","val;","valu","x)","{","{}","}","};","直接递归解决，每次进入子节点的时候，将sum值减去当前节点的值，最后判断如果是叶子节点并且当前值为0，就返回true，否则返回fals","遍历问题，时间复杂度o(n)"],"113.-path-sum-ii.html":["*","*/","*left;","*right;","/","/**","1","11","113.","13","2","22,","4","5","7","8",":","=",">left);",">left==null&&root",">right);",">right==null){",">val);",">val){",">val,root","[","[5,4,11,2],","[5,8,4,5]","\\","]","algorithm","analysi","below","binari","children.","class","code","definit","descripit","each","equal","example:","find","given","helper(res,tmp,sum","helper(res,tmp,sum,root);","helper(vector>&","if(root","if(root==null){","if(sum==root","ii","int","leaf","left(null),","node","node.","note:","path","path'","pathsum(treenode*","problem","public:","res,vector&tmp,int","res.push_back(tmp);","res;","return","return:","return;","right(null)","root","root){","root,","solut","struct","sum","sum)","sum,","sum,treenode*","sum.","sum一个意思，只是这里需要得到路径上的所有值。这就只能使用回溯法解决问题了。","thought","tmp.pop_back();","tmp.push_back(root","tmp;","tree","treenod","treenode(int","val(x),","val;","vector","vector>","void","x)","{","{}","}","};","和之前的path","时间复杂度o(n),对于每个节点都只访问一次。"],"114.-flatten-binary-tree-to-linked-list.html":["*","*/","*left;","*right;","/","/**","1","114.","2","3","4","5","6",":",">left);",">left){",">left;",">left=null;",">right){",">right;",">right=root","\\","algorithm","analysi","binari","class","code","definit","descript","example,","findmax(treenode*","flatten","flatten(treenode*","follow","given","if(root","if(root)","int","left(null),","like:","link","list","look","ma","ma=findmax(root","node.","place.","problem","public:","return","right(null)","root","root)","root){","root;","root=root","solut","struct","thought","tree","tree,","tree:","treenod","treenode(int","treenode*","val(x),","val;","void","while(root","while(root){","x)","{","{}","}","};","时间复杂度o(n),对于所有节点，最多访问节点两次，访问总次数是2n，所以最后时间复杂度o(n)","观察知道，最后所有节点全部在右边展平，我们可以每次将左子树插入到右子树，原来的右子树接在左子树最后面，重复这个操作，直到所有的右子树都展平即可"],"115.-distinct-subsequences.html":["\"abcde\"","\"ace\"","\"aec\"","\"babgbag\",","\"bag\"","\"rabbbit\",","\"rabbit\"","'b'","(can","(ie,","(rabb,rab)","(rabb,rabb).","(rabbb,rabb)","(t.size()+1,0);","(the","+",",","//thi","1","115.","1:","1])","1];","1]==t[j","2:","3","5","=","^","^^","^^^","^^^^","add","algorithm","analysi","babgbag","below,","caret","charact","characters.","chosen","class","code","count","delet","descript","distinct","disturb","dp","dp(s.size()+1,vector(t.size()+1));","dp[0]=1;","dp[j]+=dp[j","dp[t.size()];","equal","exampl","explanation:","for(int","form","gener","given","i=0;i","i=1;i0;","if(s[i","input:","int","j)","letters)","mean","new","none)","not).","now","number","numdistinct(str","origin","output:","posit","problem","public:","rabb","rabbbit","re","rel","remain","result","return","s","s,","s.","shown","solut","string","subsequ","subsequences.md","symbol","t","t)","t,","t.","t.back(),so","thought","three","time","vector>","version","way","without","{","}","};","做多了题目之后会有感觉，这题用动态规划解决没问题。首先就用动态规划问题想。如果两个字符串已经匹配完毕，s串加入一个新字符，如果这个字符和t串最后一个字符不匹配。没有事情发生，总匹配数依然是没加入之前的结果。如果匹配，就是之前的s串和去掉最后一个字符的t串匹配的结果加上之前匹配结果。","原始版本是二维数组版本，遍历二维数组即可，时间复杂度o(n²)。优化后的版本使用一维数组，空间复杂度降到了o(n),不仅如此，其时间也会降低"],"118.-pascals-triangle.html":["118.","1];","2;i>=1;","5","[","[1,1],","[1,2,1],","[1,3,3,1],","[1,4,6,4,1]","[1],","]","abov","algorithm","analysi","class","code","descript","directli","each","example:","first","for(int","gener","generate(int","given","i){","i=tmp.size()","if(numrows==0)","input:","integ","it.","neg","non","number","numrow","numrows)","numrows){","numrows,","output:","pascal'","problem","public:","res.push_back(tmp);","res;","return","solut","sum","thought","tmp(1,1);","tmp.push_back(1);","tmp[i]+=tmp[i","triangl","triangle,","triangle.","two","vector","vector>","while(","{","}","};","其实和之前动态规划问题得到数组中的值有的像，此位置的值等于上两个位置的值相加。可以用二维数组解决，但是这里是可以优化到只用一维数组。每次重复使用即可。","帕斯卡三角形，三角形面积是o(n²)的，每个点都要计算，最后时间复杂度o(n²)"],"120.-triangle.html":["(i.e.,","+","1","11","11).","120.","2","2;i>=0;","3","5","=","[","[2],","[3,4],","[4,1,8,3]","[6,5,7],","]","adjac","algorithm","analysi","below.","bonu","bottom","bottom.","class","code","descript","each","example,","extra","find","follow","for(int","given","i){","i=triangle.size()","int","j=0;j","minimum","minimumtotal(vector>&","move","n","note:","number","o(n)","path","point","problem","public:","row","solut","space,","step","sum","thought","top","total","triangl","triangle)","triangle,","triangle.","us","{","典型的动态规划问题，从底部出发向上遍历。每次选择两个子节点中最小的那一个，并且将它加到自己当前值上。重复操作，知道到根节点。","复杂度时间和之前求三角形问题一样，都是o(n²)"],"121.-Best-Time-to-Buy-and-Sell-Stock.html":["(i.e.,","(price","0","0.","1","1)","121.","1:","2","2:","5","5.","6","6),","6,","7","=","[7,1,5,3,6,4]","[7,6,4,3,1]","algorithm","analysi","array","befor","best","buy","case,","class","code","complet","day","descript","design","done,","element","exampl","explanation:","find","for(auto","given","i.","i.e.","input:","int","ith","larger","max","maximum","maxprofit(vector&","miprice);","miprice=int_max;","miprice=min(miprice,price);","need","note","on","one.","output:","permit","price","price.","price:prices){","prices)","problem","profit","profit.","public:","res;","res=0;","res=max(res,pric","return","sell","share","solut","stock","stock),","thought","time","transact","{","}","};","一次遍历就可以得到答案，时间复杂度o(n)","只能买一次商品，一次交易。那么我们从第一天开始买商品，第一天必须买，因为只有一次机会。到了第二天的时候，如果第二天比第一天贵，我们就得到利润。如果第二天比第一天便宜，那我们就第二天再买。这里转化成代码的意思就是，我们遍历数组的过程，每次都记录最小值，当做我们购买的价格，每次都用当前值减去最小值，就是我们的利润。"],"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":["(i.e.,","(price","0","0.","1","1)","1,","122.","1:","2","2:","3","3)","3.","3:","4","4.","5","5),","6","6),","7","=","[1,2,3,4,5]","[7,1,5,3,6,4]","[7,6,4,3,1]","again).","again.","algorithm","analysi","array","base_index;","befor","best","buy","case,","class","code","complet","day","descript","design","done,","element","engag","exampl","explanation:","find","for(int","given","i.","i.e.","i=0;i","ii","input:","int","ith","later,","mani","max","maximum","maxprofit(vector&","multipl","note","note:","on","output:","price","prices)","prices.push_back(int_min);","problem","profit","profit.","public:","res=0;","same","sell","share","solut","stock","thought","time","time.","times).","transact","{","也是一次遍历数组，时间复杂度o(n)","分析可以知道，价格走向只有上面两种，要不是一直递增，要不就是下降。这样就可以归纳成一般情况，写出代码.注意写成一般情况下时，要注意最后的状态，这里最后push一个int_min，就能处理所有情况","可以借助之前只能买一次的思想，只是这里是能买很多次。只要有利润，我们都加上。","如果下一天的价格比今天高，我们直接把利润加上。但是如果之后价格持续走高，我们先不加利润，一直往后看，直到最高的价格，我们用最高的价格减去最低的价格，这是利润增益。","首先对于下一天价格比今天低的情况，这时候我们肯定要下一天买而不是这一天高价买。也就是把买进的价格改成下一天的。"],"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":["(i.e.,","(price","0","0)","0.","1","1)","1,","123.","1:","2","2:","2展示的那样，一次交易即可。那么我们还是以第一题（一次交易得到最大值），为基础解此题。","3","3),","3.","3:","4","4),","4.","5","5),","6","7","8","=","[1,2,3,4,5]","[3,3,5,0,0,3,1,4]","[7,6,4,3,1]","again).","again.","algorithm","analysi","array","b1=int_min,b2=int_min,s1=0,s2=0;","b1=max(b1,","b2=max(b2,s1","befor","best","buy","case,","class","code","complet","day","descript","design","done,","element","engag","exampl","explanation:","find","for(auto","given","i.","i.e.","iii","input:","int","ith","later,","max","maximum","maxprofit(vector&","multipl","note","note:","output:","p);","p:prices){","price","prices)","problem","profit","profit.","public:","return","s1=max(s1,b1+p);","s2;","s2=max(s2,b2+p);","same","sell","solut","stock","thought","time","time.","transact","transactions.","two","{","}","};","一次遍历解决问题，时间复杂度o(n)","在一次交易的基础上，在第一次交易的结果上，我们减去当前价格，也就是减去第二次购买的成本。每次遍历都计算此值，得到最大值，也就是第二次购买的最便宜的时候。","最后这里需要仔细想清楚这里的思想以及代码里是如何进行的。不然很难理解，我个人也是第三次做这个题了，也都需要仔细回味","然后在上面得到第二次最低成本的情况下，得到第二次的最高利润，每遍历到一个数都记录。","首先知道这里是最多允许买两次，意思是如果一次可以，那就买一个。就像exampl"],"124.-Binary-Tree-Maximum-Path-Sum.html":["*","*/","*left;","*right;","/","/**","0;","1","10","10,9,20,null,null,15,7]","124.","15","1:","2","20","2:","3","42","6","7","9",":",">left);",">right);",">val+=max(l,r);",">val+l+r;","[","[1,2,3]","\\","algorithm","along","analysi","binari","child","class","code","connections.","contain","defin","definit","descript","empti","exampl","find","given","go","if(lval+l+r>res)","if(root==null)","input:","int","l=maxtosum(root","left(null),","maximum","maxpathsum(treenode*","maxtosum(root);","maxtosum(treenode*","need","node","node.","non","on","output:","parent","path","problem","problem,","public:","r=maxtosum(root","res;","res=int_min;","res=root","return","right(null)","root","root)","root){","root.","sequenc","solut","start","struct","sum","sum.","thought","through","tree","tree,","treenod","treenode(int","val(x),","val;","x)","{","{}","}","};","对所有的节点遍历一遍得出结果，时间复杂度o(n)","还是典型的树问题，使用递归解决。","这里题目有点描述不清楚，这里只有根节点可以连接两个子树，也就是加上子树上计算的结果。但是如果是中间节点，那就只能连接一个子树，选择左子树或者右子树。这里当然是选择最大的一个子树。"],"127.-Word-Ladder.html":["\";","\"cog\"","\"cog\",","\"dog\"","\"dot\"","\"hit\"","\"hit\",","\"hot\"","(beginword","0","0;","127.","1:","2:","5","5.","=",">","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]","algorithm","alphabet","analysi","assum","beginword","beginword,","break;","chang","characters.","class","code","contain","descript","dictionary'","duplic","each","empti","endword","endword),","endword,","exampl","exist","explanation:","find","for(int","given","i=0;i","if(next.empty())","if(word==endword)","if(word==pos){","input:","int","ladder","ladder(beginword,endword,wordlists);","ladder(string&beginword,","ladderlength(str","length","length.","letter","list,","list.","lowercas","next.pop();","next.push(pos);","next;","nextword(next,beginword,wordlists);","nextword(next,word,wordlists);","nextword(queue&next,string&beginword,unordered_set&","non","note","note:","on","output:","pos=\"","possibl","problem","public:","queue","res++;","res;","res=2;","return","same","same.","sequenc","sequence.","shortest","solut","string","string&endword,","such","that:","therefor","thought","time.","transform","transformation.","two","unordered_set&","unordered_setwordlists(wordlist.begin(),wordlist.end());","vector&","void","while(!next.empty()){","word","word.","word=next.front();","wordlist","wordlist)","wordlist,","wordlists)","wordlists){","{","}","这里涉及到很多复杂的操作，找到nextword，需要进行26*n次，很多情况下，n是小于26的，所以这里几乎时间复杂度是o(n²)了。然后遍历一次数据集，设wordlist长度是m，最后时间复杂度是o(mn²)","这里需要用一种搜索方法找到找到最短路径，对于这种需求，有一种遍历方式能完美的契合。那就是广度优先搜索。找到第一个叶子节点，也就是第一个到达endword的路径就是最短路径。我们从beginword开始，每次将beginword能到的下一个单词加入队列中，然后将他们从wordlist中删除，重复操作，直到到endword或者没有结果。"],"128.-Longest-Consecutive-Sequence.html":["1))","1,","128.","2,","200,","2]","3,","4","4,","4.","4].","[1,","[100,","algorithm","analysi","array","best;","best=0;","best=max(best,i","class","code","complexity.","consecut","continue;","descript","element","example:","explanation:","find","for(int","given","if(s.count(v","input:","int","integers,","length","longest","longestconsecutive(vector&","nums)","o(n)","output:","problem","public:","return","run","s(nums.begin(),nums.end());","sequenc","sequence.","solut","therefor","thought","unordered_set","unsort","val);","val:nums)","while(s.count(y))","y++;","y=val+1;","{","}","};","开始将vector数据复制到unordered_set中，时间复杂度o(n).注意一定要使用这种办法而不是一个个插入的方法，如果一个个插入很可能耗时更多。然后遍历数组时间复杂度o(n),在循环中会再次遍历一遍顺序的数字，这里需要执行n次。","最后执行3n次，时间复杂度o(n)","这里要求需要使用o(n)时间求解，我们必须引入一个新的数据结果来使访问一个数据的时间控制到o(1)时间。那肯定是unordered_set类型，这个数据结构是基于hashmap实现的，插入和查询时间是o(1)。首先我们将所有数据存入set，然后顺序遍历原来的数组，如果数字的前一个在set中存在，continue，否则，表示这个数字是这段数字的开始，于是从这里开始顺序加一，每次结果在set中查询，知道不存在这个数字。最后求最长的解"],"129.-Sum-Root-to-Leaf-Numbers.html":["*","*/","*left;","*right;","+","/","/**","//改变叶子节点的值","//用参数传递","0","0;","1","1026","1026.","12","12.","123.","129.","13","13.","2","25","25.","2:","3","4","40","40.","491","491.","495","495.","5","9",":","=",">0",">1",">2",">3",">5",">9",">left",">left)",">left);",">left){",">left,add*10+root",">left==null&&root",">right",">right)",">right);",">right){",">right,add*10+root",">right==null)",">right==null){",">val);",">val*10;",">val+=root",">val;","[1,2,3]","[4,9,0,5,1]","\\","add){","algorithm","analysi","binari","children.","class","code","contain","definit","descript","digit","each","exampl","example:","explanation:","find","given","helper(root","helper(root,0);","helper(treenode*","if(root","if(root!=null)","if(root==null)","input:","int","leaf","left(null),","node","node.","note:","number","number.","numbers.","only,","output:","path","problem","public:","repres","res+=(add*10+root","res+=root","res;","res=0;","return","return;","right(null)","root","root)","root){","root,int","solut","struct","sum","sumnumber(root","sumnumber(root);","sumnumber(treenode*","sumnumbers(treenode*","therefore,","thought","total","tree","treenod","treenode(int","val(x),","val;","void","x)","{","{}","}","};","两个代码时间复杂度分析，可能大家都认为第一个算法更好。但是运行下来，反而是第二个代码更快，我认为是第一个代码修改了指针中的值，修改值可能比读取一个值消耗的时间多很多，导致用第二个代码传参数更好。","树问题，递归解决，这里需要到叶子节点才能知道最后的值是多少。需要将父节点的信息传入子节点。这里有两种方法传递一种是直接改变节点的值，父节点改将自己的值加到子节点。还有一种方法是用参数传递。"],"130.-Surrounded-Regions.html":["'o'","'x'","'x'.","(the","//cout>&","130.","2d",";","adjac","algorithm","be:","board","board)","border","border,","captur","cell","class","code","col=board[0].size();","connect","contain","count):count(count){","descripit","example:","explanation:","explicit","father=new","father[father_j]=father_i;","flip","for(int","function,","given","horizont","i=0;i","i=0;irank[father_j]){","if(board.size()==0||board[0].size()==0)","int","int[count];","letter","mean","nf(row*col+1);","o","o),","problem","public:","rank=new","rank[father_i]++;","region","region.","return","row=board.size();","run","shouldn’t","surround","thoguht","thought","two","union_find","union_find(int","union_find{","vertically.","x","{","这个题目意思简单装换过来就是，如果一块圆区域如果连接到外面的话，那么这块圆就不变成x，否则都变为x。","这里可以用dfs做，从最外围的圆开始往中间遍历，碰到的圆都不变，其他的都变。","这里还可以用并查集做，由于想回顾并查集，所以这里我用这种方法解题。并查集是能快速找到一组组数据的数据结构，我们将外围区域定义一个节点，其他节点就是每个点自身。开始所有的节点的父节点都是自己。然后遍历数组，如果是最外层的圆，就将它和外围区域节点相连，如果是内部的圆，将它和它旁边的圆相连。最后再次遍历数组，如果圆连接到了外围节点，则保持不变，否则变为x","首先构造并查集，在并查集有路径压缩时，插入和查找的时间都是o(1),最后时间复杂度o(n²)。然后遍历数组，时间复杂度o(n²),最后时间复杂度o(n²)"],"131.-Palindrome-Partitioning.html":["\"aab\"","//unordered_map","131.","[","[\"a\",\"a\",\"b\"]","[\"aa\",\"b\"],","]","algorithm","analysi","begin){","class","code","descript","example:","for(int","given","helper(s,res,tmp,0);","helper(string&s,vector>&res,vector&tmp,int","i=begin;i","if(begin==s.size()){","input:","ma;","output:","palindrom","palindrome.","partit","partition(str","possibl","problem","public:","res.push_back(tmp);","res;","return","s","s)","s,","s.","solut","string","substr","such","thought","tmp;","vector","vector>","void","{","}","因为重复计算的是判断回文字符的部分，其实这个和复制相比就很小。下一题我么不需要返回结果只需要返回个数，这时候用动态规划显然更好","我第一次做这个题的时候，认为这是一个动态规划问题。定义了一个三维数组，保存之前的结果，用类似做最长增长子序列的方法解这个题。感觉时间复杂度应该是控制的还不错了。但是这种方法需要的","时间复杂度应该是(n*2^n),这也是回溯法找到找到所有集合的普遍时间复杂度","空间太多，并且每次得到结果都需要复制一遍所有的数字，太慢了。所以后面看到discuss使用回溯法做这个题。发现其实回溯法也不会太慢。确实，回溯法在这里会有重复计算是否是回文数的情况，但是相比动态规划的复制一整个数组，整个速度还是提高了。"],"132.-Palindrome-Partitioning-II.html":["\"aab\"","//两边向中间扩展","0;","1","132.","1;","[\"aa\",\"b\"]","algorithm","analysi","begin,int","bool","class","code","cut","cut.","descript","dp(s.size()+1,0);","dp.back();","dp[0]=","dp[i+1]=min(dp[i+1],dp[j]+1);","end){","example:","explanation:","for(int","given","i=0;i=0&&(i+j)=0&&(i+j+1)","i=1;i=0;","if(ispalindrome(s,j,i)){","if(s.size()==0)","ii","input:","int","ispalindrome(string&s,int","j){","mincut(str","minimum","need","output:","palindrom","palindrome.","partit","problem","produc","public:","return","s","s)","s,","s.","solut","string","substr","such","thought","us","vector","while(begin","{","}","下面给出两种代码","看了discuss之后明白了很多，求回文数最快的方法还是从中间往两边扩展好些而不是两边向中间扩展。看到这里的朋友可以仔细体会一下两种的区别。","第一个算法最后运行实际是480ms,而第二个算法运行实际是8ms。提升速度可以说是很大了。","这里就和前一题重点不同了，这里主要的时间消耗就是判断是否回文的消耗了。","首先我们还是用上一题一样的回文数求法，但是时间太慢了"],"133.-Clone-Graph.html":["133.","clone","graph"],"134.-Gas-Station.html":["&cost)","&gas,","(i+1).","(index","(start","(sum","+","++end;","+=","//原始二维数组方法","//顺序遍历方法","0","0)","0.","0;","1","1,","1.","134.","1:","1;","2","2,","2.","2:","3","3)","3.","4","4.","5","5.","6","7","8",":","=",">",">=","?","[1,2,3,4,5]","[2,3,4]","[3,4,3]","[3,4,5,1,2]","algorithm","along","amount","analysi","around","array","back","begin","bo=true;","bool","both","can't","cancompletecircuit(vector","cancompletecircuit(vector&","car","circuit","circular","class","clockwis","code","cost","cost)","cost[end];","cost[i]","cost[start];","descript","direction,","each","element","empti","end","end)","enough","exampl","exist","explanation:","fill","for(int","ga","gas,","gas.","gas.size()","gas[end]","gas[i].","gas[start]","guarante","i=0;i","i=0;i=0){","index","index.","input","input:","int","integer.","j=0;j","journey","length.","let'","matter","n","neg","next","non","note:","on","onc","otherwis","output:","problem","public:","requir","return","route,","same","solut","solution,","start","start.","start;","start=0,total=0,tank=0;","station","station'","station.","stations.","sum","t=0;","tank","therefore,","thought","travel","unique.","unit","unlimit","up","vector","vector&","{","}","};","对于这题来说最简单的方法就是，用双重循环遍历数组，得到从每一个地点开始的消耗量，要是能顺时针走完就返回index，这样也能ac，但是时间复杂度o(n²)。","用gas[i]减去cost[i]是能得到每次经过一个位置消耗的汽油量的。","第一个方法时间复杂度o(n²)，毋庸置疑是最慢的，第二种和第三种方法时间复杂度都是o(n).","这题其实可以用o(n)时间解决，开始随机选一个位置，然后判断当前汽油量是正还是负，如果是负就将开始位置向挪动一位，看能否增加汽油量，否则就可以向后移动一位。知道两位置重合，这时候判断总的汽油量是否为正，如果是正就代表能走完。这也是用类似twosum的两指针逼近法，目标值就是最后汽油量需要大于0。"],"135.-Candy.html":["1","1,","135.","1:","2","2,","2:","4","5","[1,0,2]","[1,2,2]","abov","algorithm","alloc","analysi","assign","candi","candy(vector&","candy.","child","children","class","code","conditions.","descript","each","exampl","explanation:","first,","follow","for(int","get","give","give?","higher","i){","i=1;i=0;","if(ratings[i]>ratings[i+1])","input:","int","line.","minimum","more","n","n=ratings.size();","neighbors.","on","output:","problem","public:","rate","ratings)","re+=res[i];","re;","requirements:","res(n,1);","res[i]=max(res[i],res[i+1]+1);","respectively.","return","satisfi","second","solut","stand","subject","third","thought","two","value.","vector","{","}","};","一个小朋友等级比旁边的高的话，他的糖果必须必旁边的多。旁边有两个，首先我们让所有小孩向左看时，满足条件，然后让所有小孩往右看时满足条件，最后就能有结果。","使用一个数组表示给所有小朋友分配的糖果，开始所有的小朋友都是1个。","算法两次遍历数组,最后时间复杂度o(n)."],"136.-Single-Number.html":["1","136.","1:","2:","4","[2,2,1]","[4,1,2,1,2]","algorithm","analysi","appear","array","class","code","complexity.","descript","element","empti","exampl","except","extra","find","for(auto","given","implement","ingl","input:","int","integers,","linear","memory?","non","note:","num:nums){","number","nums)","one.","output:","problem","public:","res;","res=0;","res^=num;","return","runtim","singl","singlenumber(vector&","solut","thought","twice","us","without","{","}","};","两个数异或时间复杂度o(1)，遍历一遍出结果，时间复杂度o(n)","使用异或的性质，两个同样的数，异或之后结果相同。所以将所有数异或就行"],"137.-Single-Number-II.html":["0,","00","01","0;","10","137.","1:","2:","3","99","=",">",">0，得到two的转换关系是two=(two\\^nums[i])&~on","[0,1,0,1,0,1,99]","[2,2,3,2]","algorithm","analysi","appear","array","class","code","complexity.","descript","element","empti","exactli","exampl","except","extra","find","for(int","given","ii","implement","input:","int","integers,","linear","memory?","non","note:","number","nums)","on","once.","one,","one.","output:","problem","public:","runtim","singl","singlenumber(vector&","solut","thought","three","time","two","us","without","{","可以将状态转化关系列出来，发现one状态基本等于one^nums[i],除了当two为1的时候,one直接为0,得出one的转换关系为one=(one\\^nums[i])&~two","同理得到two的转化也基本都是异或，除了第一个状态的时候，0","和上一题很类似，但是这里是所有的数字都出现3次，除了一个数字出现一次。上一题还可以用异或的性质，这里就没这么好用了。我开始对这题也是一脸懵逼，看了答案还是觉得没那么清晰。这里需要一些数字逻辑的基础，使用状态图来理解题目。","开始状态00,然后依次是10,01,00","注意这里为啥第二个状态是10,因为最后还有一个数字只出现一次,one状态为1,最后直接返回one状态即可.","算法一次遍历数组即可得出结果，时间复杂度o(n)","这里需要进行转换3次，也就是有4个状态，首尾一样的话也有3个状态了，用一位是表示不了的。这里用两个状态表示。one表示第一个状态，two表示第二个状态,这里用两位表示，第一位是one状态，第二位是two状态","首先需要知道的一点是，虽然int是32bits，但是这里只需要对一个bit进行考虑即可，其他位的bit运行的规律是一样的。"],"139.-Word-Break.html":["\"and\",","\"appl","\"applepenapple\"","\"applepenapple\",","\"cat\"]","\"catsandog\",","\"code\"]","\"dog\",","\"leet","\"leetcode\"","\"leetcode\",","\"pen\"]","\"sand\",","139.","1:","2:","3:","=","[\"apple\",","[\"cats\",","[\"leet\",","algorithm","allow","analysi","apple\".","assum","bool","break","break;","class","code","code\".","contain","descript","determin","dictionari","duplic","empti","exampl","explanation:","fals","for(int","given","i=0;i=0&&s.substr(pos,sz)==worddict[j]&&res[pos]){","input:","i长度的s能匹配。遍历s,如果当前i开始的substring中，能和worddict匹配，并且当前dp[i]=true的话，那么substirng的index的是true,最后返回数组最后一位即可","list","more","multipl","non","note","note:","on","output:","pen","problem","public:","res(s.size()+1,false);","res.back();","res[0]=true;","res[i+1]=true;","return","reus","s","s,","same","segment","segmentation.","separ","sequenc","solut","space","string","thought","time","true","vector","vector&","word","word.","wordbreak(str","worddict","worddict)","words,","words.","{","}","};","可以用动态规划解决，用一个数组保存结果，每一位表示0","设s长度为m,worddict长度为n,每个word平均长度是k,最后时间复杂度是o(mnk)","这题可以很快相出回溯解法，匹配到一个进入下一个函数即可，但是这样会有很多重复的计算。"],"140.-Word-Break-II.html":["\"and\",","\"applepen\",","\"cat","\"cat\"]","\"cats\",","\"catsanddog\"","\"catsandog\"","\"dog\",","\"dog\"]","\"pen\",","\"pine","\"pine\",","\"pineappl","\"pineapple\"]","\"pineapplepenapple\"","\"sand\",","140.","1:","1;i>0;","2:","3:","=","[","[\"apple\",","[\"cat\",","[\"cats\",","[]","]","add","algorithm","allow","analysi","appl","apple\"","apple\",","applepen","assum","break","class","code","combin(string&word,vector&prev){","combin(tmp,prev);","construct","contain","descript","dictionari","dog\"","dog\",","duplic","each","empti","exampl","explanation:","for(int","given","i){","i=0;i","i=s.size()","if(m.count(s))","if(worddict.count(s)){","if(worddict.count(tmp)){","ii","input:","list","m;","m[s];","m[s]=res;","multipl","non","note","note:","output:","pen","possibl","pr=s.substr(0,i);","prev=wordbreak(pr,worddict);","problem","public:","res.insert(res.end(),prev.begin(),prev.end());","res.push_back(s);","res;","return","reus","s","s,","same","sand","segmentation.","sentenc","sentences.","solut","space","string","such","thought","time","tmp=s.substr(i);","unordered_map>","unordered_set","unordered_set&","valid","vector","vector&","void","word","word.","wordbreak(s,worddict);","wordbreak(str","wordbreak(string&s,","worddict","worddict)","worddict=unordered_set(worddict.begin(),worddict.end());","words,","words.","{","}","};","加入备忘录之后，能减少很多额外计算了","和上一题计算数量不同，这里需要列出结果。","计算结果需要用到回溯法，但是单纯的回溯在这里太慢了，这里可以加入一种备忘录的方法，类似dp。可以减少我们再回溯中的重复计算，举个例子，如果一个字符串是由很多个一样的子串拼接在一起的，对于回溯法，对于每个子串都是一样的计算，但是加入备忘录之后，对于同样的子串，只需要计算一次就能得到结果。","这里时间复杂度不太好分析,对于不加入备忘录的算法，时间复杂度是o(2^n)，需要遍历出每一种组合。"],"141.-Linked-List-Cycle.html":["&&","(0","(i.e.","*","*/","*head)","*next;","/**","0","1","1,","141.","1:","2:","3:","4],",":","=","==",">next",">next)",">next;","[1,2],","[1],","[3,2,0,","algorithm","analysi","bool","class","code","connect","constant)","cycl","definit","descript","determin","exampl","explanation:","fals","false;","fast","fast)","first","follow","given","hascycle(listnod","head","head;","if(slow","indexed)","input:","int","integ","it.","link","list","list,","list.","listnod","listnode(int","listnode*","memory?","next(null)","node.","o(1)","output:","po","posit","problem","public:","repres","return","second","singli","slow","solut","solv","struct","tail","thought","to.","true","true;","up:","us","val(x),","val;","while(fast","x)","{","{}","}","};","快指针每次走两步，如果有环，不用n时间两个节点就能碰到。时间复杂度o(n)","这里直接用著名的floyd判圈算法就行，定义一个快指针一个慢指针，快指针每次走两步，慢指针每次走一步。如果有环两个指针肯定能碰到，如果快指针走到null节点，那就没有环"],"142.-Linked-List-Cycle-II.html":["(0","*","*/","*detectcycle(listnod","*head)","*next;","/**","0","1","1,","142.","1:","2:","3:","4],",":","=",">next",">next){",">next;",">next==null)","[1,2],","[1],","[3,2,0,","algorithm","analysi","begins.","break;","class","code","connect","cycl","cycle,","definit","descript","exampl","explanation:","fast;","fast=fast","first","given","head","if(fast==null||fast","if(fast==slow)","ii","index","indexed)","input:","int","integ","link","list","list,","list.","listnod","listnode(int","listnode*","next(null)","node","node.","noth","null.","null;","output:","po","posit","problem","public:","repres","return","second","singli","slow=head,*fast=head;","slow=head;","slow=slow","solut","struct","tail","thought","to.","us","val(x),","val;","while(fast&&fast","while(slow!=fast){","x)","{","{}","}","};","和上一题一样，时间复杂度o(n),空间复杂度o(1)","这题和上一题很像，用一样的算法就能解决，利用数学证明可以得知，当两个快慢指针相交时，他们到连接点的长度就是起始点到连接点的长度。这时候，一个指针从起始点出发，一个从相交点出发，两个指针相交之后就能知道连接点是哪个"],"143.-Reorder-List.html":["*","*/","*next;","/**","1","143.","1:","1→l2→ln","1→ln,","2:","2→…",":",">2",">3",">3.",">4",">4,",">5",">5,",">next",">next);",">next){",">next;",">next==null)",">next==null||head",">next=head",">next=null;",">next=reorder(tmp",">next=tmp","algorithm","analysi","changed.","class","code","definit","descript","exampl","given","head","head)","head){","head;","head=head","head=reorder(head);","if(head==null||head","int","itself","l0→l1→…→ln","l0→ln→l1→ln","l:","link","list","list'","list.","listnod","listnode(int","listnode*","modifi","next(null)","node","nodes,","problem","public:","reorder","reorder(listnode*","reorderlist(listnode*","return","singli","solut","struct","thought","tmp","tmp;","tmp=head;","to:","val(x),","val;","valu","void","while(head","x)","{","{}","}","};","这里我还是用的链表题通用解法，使用递归解决，但是这里用递归确实不是太好，时间复杂度会有o(n²),可以用一个vector先保存所有节点，再处理","这里的算法算是很慢的了，时间复杂度达到了o(n²)，不是很建议使用，只是我比较喜欢用递归解链表题，所以这里才用递归解决"],"144.-Binary-Tree-Preorder-Traversal.html":["*","*/","*left;","*right;","/","/**","//morris解法","//迭代解法","1","144.","2","3",":",">left;",">right!=now){",">right!=null&&pr",">right)",">right);",">right){",">right;",">right=now;",">right=null;",">val);","[1,2,3]","[1,null,2,3]","\\","algorithm","analysi","binari","class","code","definit","descript","example:","follow","given","if(pr","if(pre){","if(root","if(root==null)","inord","input:","int","iteratively?","left(null),","morris解法，大概路径和94.","node.","nodes'","now=now","now=root,*pre=null;","output:","pre","pre=now","pre=pr","preorder","preordertraversal(treenode*","problem","public:","recurs","res.push_back(now","res.push_back(root","res;","return","right(null)","root)","root=root","root=st.top();","solut","st.pop();","st.push(root","st.push(root);","st;","stack","struct","thought","travers","traversal很像，只是将输出值的地方改变了，在中序遍历中morris解法中，我们再进入右子树的时候将值打印，但是先序遍历的时候，我们在第一次访问到节点的时候就打印，morris具体过程可以去94题看思路","tree","tree,","treenod","treenode(int","treenode*","trivial,","up:","val(x),","val;","values.","vector","while(!st.empty()){","while(now){","while(pr","while(root!=null){","x)","{","{}","}","};","}else{","二叉树先跟遍历，递归方法很好做，几行代码就能搞定。这里还是和中序遍历一样，有三种方法。除了简单的递归算法，难一点的就是迭代解法。","树遍历算法时间复杂度都是o(n)，关键是空间复杂度，递归和使用栈辅助迭代的算法空间复杂度都是o(n).但是morris算法空间复杂度是o(1)，使用了大量的空闲null节点。","迭代解法使用栈辅助，首先需要理解先序遍历的顺序。先序遍历首先访问根节点，然后左子节点，再右子节点。画图可以知道，先序遍历首先会访问左边所有节点，然后由底向上对之前节点的右子树再进行前序遍历。所以直接一个递归得到所有的左边的值，并将右子节点压栈即可。"],"145.-Binary-Tree-Postorder-Traversal.html":["*","*/","*left;","*right;","/","/**","1","145.","2","3",":",">left);",">right;",">val);",">右",">左",">左。得到最后结果之后，将结果逆序即可。","[1,null,2,3]","[3,2,1]","\\","algorithm","analysi","binari","class","code","definit","descript","example:","follow","given","input:","int","iteratively?","left(null),","node.","nodes'","output:","postord","postordertraversal(treenode*","problem","public:","recurs","res.push_back(tmp","res;","return","reverse(res.begin(),res.end());","right(null)","root)","solut","st.pop();","st.push(root);","st.push(tmp","st;","stack","struct","thought","tmp=st.top();","tmp=tmp","travers","tree","tree,","treenod","treenode(int","treenode*","trivial,","up:","val(x),","val;","values.","vector","while(!st.empty()){","while(tmp){","x)","{","{}","}","};","我们只需要将之前的先序遍历算法，从","改为","时间复杂度o(n),空间复杂度o(n)。其实后序遍历也是有morris算法的，但是我觉得有点麻烦，可能这种reverse的方法更好。","根","递归方法就不说了，对于迭代方法，这里只用一个栈还是不好理解，需要但是换种思路，后序遍历的逆序，其实就是先序遍历的先遍历右节点版本。"],"147.-Insertion-Sort-List.html":["&&","((cur","((pre","(black)","(cur","(cur)","(pre","(red)","*","*/","*cur","*next;","*pre","/**","1","147.","1:","2:","4",":","=",">",">0",">1",">2",">3",">4",">5","algorithm","analysi","belong","class","code","consum","contain","cur","data","data,","definit","descript","dummi","dummy,","dummy;","each","element","exampl","find","first","graphic","grow","head)","head;","initi","input","input:","insert","insertionsortlist(listnode*","int","iter","iterates,","iteration,","link","list","list,","list.","listnod","listnode(0);","listnode(int","listnode*","locat","new","next","next(null)","next)","next;","on","output","output:","partial","place","pre","problem","public:","remain.","remov","repeat","repetition,","return","singli","solut","sort","sort.","sort:","struct","temp","temp;","there.","until","us","val","val(x),","val))","val;","within","x)","{","{}","}","};","插入排序时间复杂度是o(n²)，两个循环，每个执行n次，循环中操作是o(1)的。","看似简单的链表插入排序，但是实现起来确实需要注意很多细节问题。提一个代码中最重要的点就是，尾指针下一个如果比他大，就不需要插入，这时候尾指针需要后移一位。但是如果比他小，就不需要移动，因为下一位插入到前面去了，新的下一位就接在尾指针后面"],"148.-Sort-List.html":["*","*/","*next;","/**","1","148.","1:","2:","4",":",">0",">1",">2",">3",">4",">5",">next",">next&&fast",">next);",">next){",">next,l2);",">next;",">next==null)",">next==null){",">next=merge(l1",">next=merge(l1,l2",">next=null;",">valval){","algorithm","analysi","class","code","complexity.","constant","coutvalnext;","definit","descript","exampl","fast=fast","head","head)","head;","if(head","if(head==null||head","if(l1","if(l1==null)","if(l2==null)","input:","int","l1","l1,listnode*","l1;","l2","l2){","l2;","link","list","list.","listnod","listnode(int","listnode*","log","merge(head,tmp);","merge(listnode*","merge(sortlist(head),sortlist(fast));","mid","mid=head,*fast=head;","mid=mid","n)","next(null)","null;","o(n","output:","problem","public:","return","singli","solut","sort","sortlist(listnode*","space","struct","thought","time","tmp=head","us","val(x),","val;","while(fast","x)","{","{}","}","};","}else{","就想thought中说的那样，时间复杂度肯定是o(nlgn)，对于归并排序时间复杂度的详细分析，可以看看主定理。但是空间复杂度还是没到常数，空间复杂度也是o(nlgn)","归并排序有两部分，一部分是对两半个链表排序，然后就排好序的链表合并，链表合并问题，我们之前的问题也讨论过了","需要使用nlgn时间复杂度排序链表，显然，这里用归并排序会很好。还需要常数空间复杂度。既然是常数时间，那就不能使用递归解决，但是我还是觉得递归解决舒服很多，并且很快很清晰，所以我是使用递归解决的。"],"150.-Evaluate-Reverse-Polish-Notation.html":["\"","\"*\",","\"*\"]","\"+\",","\"+\"]","\"/\",","\"1\",","\"13\",","\"17\",","\"3\",","\"5\",","\"6\",","\"9\",","((10","((2","((9","(0","(12","(13","(4","(6","(int","*","*,","+","+,",",","/","/.","0)","0;","1)","11\",","11)))","132))","150.","17","17)","1:","22","2:","3)","3:","5","5))","6","9","=","[\"10\",","[\"2\",","[\"4\",","algorithm","alway","analysi","anoth","arithmet","between","class","code","descript","divid","divis","each","evalrpn(vector&","evalu","exampl","explanation:","express","expression.","given","input:","int","integ","mean","notat","notation.","note:","oper","operand","operation.","output:","polish","problem","public:","result","revers","rpn","solut","st;","stack","tokens)","toward","truncat","two","valid","valid.","valu","won't","zero","zero.","{","波兰表达式，直接使用一个栈解决，碰到数字压入，碰到符号就计算，并且将计算结果压入栈中","程序只需要线性时间遍历数组即可，时间复杂度o(n)"],"151.-Reverse-Words-in-a-String.html":["\"","\"a","\"blue","\"exampl","\"the","\"world!","')","++i;","151.","1:","1;","2:","3:",";","a\"","algorithm","analysi","begin=0,end=s.size()","between","blue\"","c","characters.","class","code","contain","defin","descript","end","exampl","example\"","explanation:","extra","follow","given","good","hello","hello\"","however,","i=0;","input","input:","int","lead","multipl","need","non","note:","o(1)","output:","place","problem","programmers,","public:","reduc","revers","reversewords(str","s)","sequenc","singl","ski","solut","solv","space","space.","spaces.","string","string,","string.","the\"","thought","trail","tri","two","up:","up中提到里，如果是c程序员，尝试使用o(1)空间解决。","while(i","while(s[end]=='","while(s[i]=='","word","word.","world!","{","我寻思cpp程序员应该也行。这里可以利用数组之前的空间，由于这个算法运行之后，字符串大小肯定是小于等于原始字符串大小的。所以，我们们可以在原始字符串上操作，而不需要新开一个字符串。","虽然看起来循环挺多的，但是本质只是遍历了一遍字符串，然后翻转一此，如果长度为n，进行的次数应该是3n，时间复杂度o(n)","首先将空格啥的都去掉，得到精简的单词，将单词翻转，最后将得到的字符串翻转"],"152.-Maximum-Product-Subarray.html":["(contain","0","152.","1:","1]","2,","2,0,","2,4]","2:","6","6.","[","[2,3,","[2,3]","algorithm","analysi","array","class","code","contigu","descript","exampl","explanation:","find","for(int","given","i=1;i","input:","int","integ","largest","ma=nums[0];","maximum","maxproduct(vector&","mi=nums[0];","number)","nums)","nums,","on","output:","problem","product","product.","public:","res=nums[0];","result","solut","subarray","subarray.","thought","within","{","一次循环遍历数组，时间复杂度o(n)","典型的动态规划问题，可以这么入手去思考状态转移，如果现在得到结果为res，新来一个数字，如果是正数，那么新的res变为res*newnum。但是如果来的是一个负数，就不好解决了，所以我们不仅要保存最大值（也就是结果），还要保存一个最小值，负数乘一个最小的负数也是有可能得到最大值的。"],"153.-Find-Minimum-in-Rotated-Sorted-Array.html":["(i.e.,","0","1","153.","1:","1;","2:","[0,1,2,4,5,6,7]","[3,4,5,1,2]","[4,5,6,7,0,1,2]","[4,5,6,7,0,1,2]).","algorithm","analysi","array","array.","array那题很像。这里是找到最小值。首先，如果一个数组是有序的，那么最小值肯定就是第一个数，如果在哪个地发rotate了，那么那个点就是最小值，也是我们需要找的值。","ascend","assum","becom","beforehand.","class","code","descript","duplic","element.","exampl","exist","find","findmin(vector&","input:","int","left=0,right=nums.size()","left=mid+1;","minimum","nums)","nums[left];","order","output:","pivot","problem","public:","return","right=mid;","rotat","solut","sort","suppos","target","thought","unknown","while(left=nums[left])","{","}","};","利用二分查找解决问题，时间复杂度o(lgn)","这里一样可以用二分查找解决，首先我们判断数组首是否小于尾，如果小于那就是有序的，直接返回数组首值。否则，找到mid，判断mid和首元素的关系，如果是顺序的，那么我们下一个找的应该是右数组，如果不是有序的，那么就在左数组中找到那个rotate点","这题和之前find"],"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":["(i.e.,","0","1","154.","1:","1;","2:",">=","[0,1,2,4,5,6,7]","[1,3,5]","[2,2,2,0,1]","[4,5,6,7,0,1,2]).","affect","algorithm","allow","analysi","array","array.","ascend","becom","beforehand.","class","code","complexity?","contain","descript","duplic","duplicates.","element.","exampl","find","findmin(vector&","follow","ii","input:","int","left=0,right=nums.size()","left=mid+1;","left，left","mid这段就是有序的，最小值肯定不再中间，mid","minimum","note:","nums)","nums[left];","order","output:","pivot","problem","public:","return","right=mid;","rotat","run","solut","sort","suppos","thought","time","unknown","up","while(left=nums[left])","why?","{","}","};","上一题时间复杂度是o(lgn),这里加入了重复数组计算，如果所有数字都是重复的，那么处理重复数字的时间复杂度会达到o(n)，所以这里时间复杂度是o(n)","上一题的拓展版本，可以有重复数字，我们需要处理的也是重复数字。每次对于最左边的数字，如果和右边的数字重复，就将left++。之后的处理基本和上一题一样了","这里需要理解的是，如果数组有序，直接返回left，否组数组肯定是两段有序，mid肯定在两段中的一段。mid和left相比，如果mid"],"155.-Min-Stack.html":["*","*/","/**","0.","155.","2);","2.","3);","3.","=",">",">getmin();",">pop();",">push(x);",">top();","algorithm","analysi","call","class","code","constant","data","descript","design","element","element.","example:","getmin()","here.","if(mist.empty()||x","initi","instanti","int","min","minimum","minstack","minstack()","minstack();","minstack*","minstack.getmin();","minstack.pop();","minstack.push(","minstack.push(0);","minstack.top();","mist;","new","obj","object","onto","param_3","param_4","pop()","pop,","problem","public:","push","push(int","push(x)","push,","remov","retriev","return","st.push(x);","st;","stack","stack.","stack有普通stack的接口，能够处理正常stack的数据。所以肯定需要一个stack来充当正常的stack。","structur","such:","support","thought","time.","top","top()","top,","void","x","x)","{","}","};","不仅如此，还希望能在o(1)时间内返回最小值，这就希望我们保存最小值，如果只用一个值保存，肯定是不行的。因为如果这个最小值被弹出，找到下一个最小值的时间需要o(n)。这里用第二个栈来保存最小值，因为最得到栈中的最小值过程也需要有先进后出的特性。","所有操作时间复杂度都是o(1)的","首先min"],"160.-Intersection-of-Two-Linked-Lists.html":["!=","&&","(note","(p1","(p2","*","*/","*getintersectionnode(listnod","*heada,","*headb)","*next;","*p1","*p2","/**","//","//updat","0","0,","1","160.","1:","2","2,","2:","3","3,","3:","8","8,",":","=","==",">next;","[0,9,1,2,4],","[0,9,1,2,4].","[1,5],","[1,5].","[2,6,4],","[2,6,4].","[3,2,4],","[3,2,4].","[4,1,8,4,5],","[4,1,8,4,5].","[5,0,1,8,4,5],","[5,0,1,8,4,5].","a,","a;","a=a","algorithm","all,","analysi","anywher","arbitrari","assum","b,","b.","b=b","befor","begin","begins.","both","c1.","class","code","collid","collis","cycl","definit","descript","earlier","end","entir","equidist","exampl","example,","explanation:","find","follow","function","go","head","heada;","heada=heada","headb;","headb=headb","if(len1next;","input","input:","int","intersect","intersect).","intersect,","intersectv","len1++;","len1=0,len2=0;","len2++;","link","list","list.","lista","listb","listnod","listnode(int","listnode*a=heada,*b=headb;","lists:","memory.","move","next(null)","node","node'","notes:","null","null)","null.","null;","o(1)","o(n)","on","onc","origin","output:","p1","p1;","p2","p2)","point.","pointers.","prefer","problem","program","public:","reach","read","reassigning,","refer","retain","return","returns.","reus","run","singli","skipa","skipb","solut","struct","structur","structure.","thought","through","time","togeth","two","update:更新图片的时候，发现discuss有更好的算法，我这里需要3次遍历链表，其实开始两次得到链表长度的目的就是让两个链表能同步开头，最后一起结束，还有一种办法能达到这个目的。两个链表一起移动，到达尾节点的时候，两个链表交换继续执行。也就是a到尾节点的时候，领tmpa=headb，b到尾节点的时候，令tmpb=heada。这样，也能消除两个链表之间的差距","us","val(x),","val;","valu","values.","while(a!=b){","while(heada){","while(headb){","without","write","x)","{","{}","||","}","};","这里如果使用一个hashmap保存所有节点，很简单就能得到答案，但是空间复杂度是o(n)，这里要求使用o(1)的空间复杂度解题，首先我们遍历两个链表，得到两个链表的长度，如果有一个长一个短，首先让长的链表头节点先移动两链表的差值，这时候两个链表一样长了，只需要一起移动，并且每次都判断是否为同一个节点即可。","遍历了很多次链表，时间复杂度是o(n)，没有用额外的空间，空间复杂度o(1)"],"164.-Maximum-Gap.html":["(3,6)","(6,9)","//需要多一个bucket装最大的那个数字","0","0.","164.","1:","1，就能得到平均的gap。也就是这个题的可能的最小值。我们令这个值为桶的大小。桶里的数字直接的差值我们是不需要记录的，只需要记录桶直接的数字差值。","2","2:","3","3.","32","[1,3,6,9],","[10]","[3,6,9,1]","algorithm","analysi","array","array,","assum","between","bit","bucket(bucket_number+1,make_pair(int_max,int_min));","bucket[index].first=min(bucket[index].first,num);","bucket[index].second=max(bucket[index].second,num);","class","code","contain","descript","differ","element","elements,","elements.","exampl","explanation:","find","fit","for(auto","form","form.","gap","given","i=0,res=int_min;","if(nums.size()>","index=(num","input:","int","integ","less","linear","maximum","maximumgap(vector&","mi)/min_gap;","neg","non","note:","num:nums){","nums)","output:","problem","public:","range.","return","sign","solut","solv","sort","success","therefor","thought","time/space.","tri","unsort","while(i","{","}","乍一看发现只要排好序，然后得到两两直接差值的最大值就行了。问题是这里要求我们使用线性时间解决问题，使用普通的比较排序，最快的就是快排，时间复杂度是o(lgn)。使用比较排序是不行的，这里需要使用线性时间排序算法，桶排序就很适合这里。桶排序原理是将数据按组分入桶中，对于桶里的数在进行线性时间排序。但是对于这题，巧妙的处理可以省去桶里数据排序这一步。","桶排序只需要线性时间，时间复杂度o(n)，空间复杂度o(n).","桶的大小是关键，这里我们首先遍历一遍数组，得到数组的最大值和最小值。最大值减去最小值就可以得到最大的gap。然后除以siz","然后就是遍历数组，将数字放入桶内，保存桶的最大最小值。最后再遍历一次桶，得到最后的max_gap"],"169.-Majority-Element.html":["169.","1:","2","2:","3",";","[2,2,1,1,1,2,2]","[3,2,3]","algorithm","alway","analysi","appear","array","array.","assum","class","code","continue;","count","count++;","count=0;","descript","element","element.","element出现的次数肯定是数组的一半以上，所以只需要定义一个count保存出现最多次数数字的次数，遍历数组，如果重复出现则count++，否则","element留下来了","empti","exampl","exist","find","for(int","given","if(count==0){","if(num==res)","input:","int","major","majorityelement(vector&","more","n,","n/2","non","num:nums){","nums)","output:","problem","public:","res;","res=num;","return","size","solut","thought","times.","{","}","};","⌊","⌋","。如果为0，重新更换数字。因为次数肯定是一半以上，所以最后结果肯定是major","因为规定了major","时间复杂度o(n)，这里最重要的是优化空间复杂度，空间复杂度到o(1)是个很大的优化"],"179.-Largest-Number.html":["\"210\"","\"9534330\"","179.","1:","2:","[10,2]","[3,30,34,5,9]","algorithm","analysi","arrang","class","code","descript","exampl","for(int","for(str","form","given","input:","instead","integer.","integers,","large,","largest","largestnumber(vector&","list","need","neg","non","note:","num:nums)","number","number.","nums)","output:","problem","public:","res+=str;","res.erase(0,1);","res;","result","return","s1+s2>s2+s1;});","s1,string","s2){return","solut","sort(tmp.begin(),tmp.end(),[](str","str:tmp)","string","such","thought","tmp.push_back(to_string(num));","tmp;","vector","veri","while(res[0]=='0'&&res.size()>1){","{","}","};","其实这题本质上，就是将给定的数组，排个序。原始的排序算法，是将数字按照顺序排列，但是我们这里显然需要自己定义自己的顺序。这个顺序也很好定义，就是a+b>b+a。可以仔细理解一下，比较函数这么写的意义。","字符串比较中如果两个字符串大小差不多可能需要时间复杂度为o(n),如果字符串平均长度为m，数组平均长度为n，那么时间复杂度为o(nlgn*m)"],"187.-Repeated-DNA-Sequences.html":["\"aaaaacccccaaaaaccccccaaaaagggttt\"","\"acgaattccg\".","\"cccccaaaaa\"]","(substrings)","10","187.","9,10));","=","[\"aaaaaccccc\",","a,","abbrevi","algorithm","analysi","c,","cache;","cache[hash]++;","class","code","compos","descript","dna","dna,","dna.","example:","find","findrepeateddnasequences(str","function","g,","hash=0,mask=(1=9){","hash=hash&mask;","hashmap插入和取值操作是o(1),循环中时间复杂度是o(1)，最后时间复杂度是o(n)","identifi","if(cache[hash]==2){","input:","int","letter","long","ma{{'a',0},{'c',1},{'g',2},{'t',3}};","molecule.","more","nucleotid","occur","onc","output:","problem","public:","repeat","res.push_back(s.substr(i","res;","return","s","s)","sequenc","seri","solut","sometim","studi","t,","thought","tips：这里能用int表示，一是因为只有4个字符，二是长度只有10.如果有5个字符就需要3个bit，9个字符就需要4个bit。长度为10的话，int类型就不能表示所有的substr了，需要64位的longlong来辅助解题了。如果再长，就还是用字符串解题吧","unordered_map","us","vector","vectorres;","within","write","{","}","};","简单暴力的办法就是用一个map保存所有的切割的字符串，遍历字符串，每次substr","长度为10的字符串，然后与之前记录的字符串比较。如果有重复就加入res。但是对字符串操作是麻烦的，比较也需要一位位比。这里限制的条件是字符串中只有4个字符，如果用bit表示的话，4个字符只需要两位，一共10个字符，所以20位bit就可以表示所有substr的情况了。int类型是32位的，所以使用int就可以表示每个substr，用int来比较和保存也比字符串快多了。"],"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":["(ie,","(price","0","0)","1","188.","1:","1]);","1]){","2","2)","2.","2:","3","3),","3.","4","4),","4.","5","6","6),","7","=","[2,4,1],","[3,2,6,5,0,3],","again).","algorithm","analysi","array","befor","best","buy","cases在209个的时候tel了。这种方法也会把代码贴出来","class","code","complet","day","descript","design","element","engag","exampl","explanation:","find","for(auto","for(int","given","i.","i=1;i&","i=1;i&prices){","i=1;iprices[i","if(k>prices.size()/2){","input:","int","iv","k","k,","k=min(k,int(prices.size()));","maximum","maxprofit(int","multipl","note:","output:","p:prices){","price","prices)","prices[i","problem","profit","profit.","public:","res+=(prices[i]","res;","res=0;","return","same","sell","shortpro(prices);","solut","stock","tc(k+1,make_pair(int_min,0));","th","thought","time","transact","transactions.","vector&","vector>","{","}","};","其实上面这个方法是可行的，但是还需要考虑优化。如果一共只有n个价格，那么最多就进行n/2次交易。换句话说，如果k>n/2，那么就可以认为可以进行任意次交易。将时间复杂度降到o(n).如果不这么处理的话，时间复杂度降是o(kn)，空间复杂度也会达到o(k)。所以加一个短处理对时间复杂度影响挺大的","对于第一个算法，时间复杂度是o(kn)。对于第二个加了快速处理的方法，在leetcode上运行时间能降到4ms，复杂度分析应该要用均摊分析。也不太了解，就不多分析了。","这是这系列的第四题，第一题是只能一次交易，第二题是可以任意次交易，第三题是可以两次交易，这三题都能o(n)时间内完成。这题是可以k次交易，其实在第三题（可以完成两次交易）已经可以从两次交易推出任意次交易的情况了。只是每次遍历到一个商品，就要进行k次交易，时间复杂度太高了，一共211个test"],"199.-Binary-Tree-Right-Side-View.html":["*","*/","*left;","*right;","/**","//","//修改的先根遍历的方法","//层次遍历的方法","1","1);","199.","3,","4]",":",">left);",">left,level+1,res);",">right);",">right,level+1,res);",">val);",">val;","[1,","[1,2,3,null,5,null,4]","algorithm","analysi","binari","bottom.","class","code","continue;","coutleft);","definit","descript","example:","explanation:","given","if(res.size()val);","if(root==null)","if(root==nullptr)","if(t==null){","if(t==tmp){","imagin","input:","int","it,","left(null),","level,vector&res){","modify_preorder(root","modify_preorder(root,1,res);","modify_preorder(treenode*","node","node.","order","output:","problem","public:","qu.pop();","qu.push(root","qu.push(t","qu.push(tmp);","qu;","queue","r;","r=t","res.push_back(root","res;","return","return;","right","right(null)","rightsideview(treenode*","root)","root,int","see","side","solut","stand","struct","t=qu.front();","thought","tmp=new","top","tree","tree,","treenod","treenode(","treenode(int","treenode*","val(x),","val;","valu","vector","vectorres;","view","void","while(!qu.empty()){","x)","yourself","{","{}","}","};","两个算法都是需要将树遍历一遍才能得到答案，时间和空间复杂度都是o(n)。","但是第二中算法在遍历中每次操作的次数明显比第一种少，并且简洁。所以第二种算法更好","在discuss中看到一个很聪明的办法，直接用改动的先根遍历找到结果，改动的地方就是，访问顺序变为，先根后右再左。每次访问时，判断层次和结果大小的关系。因为是先访问右再左，每一层第一个访问的，肯定是最右边的节点。第一个访问的就直接push到结果。","如果这题是求出最左的节点，按照上面的方法，直接用先根遍历就可以得出结果。","找到每一层最右边的节点，简单办法是直接用层次遍历，遍历每一层。跳到下一层的时候，将每一层最后的一个节点push到结果中。"],"200.-Number-of-Islands.html":["&&","&grid,","'0'","'0';","'1'","'1')","(land)","(water),","0","00000","00011","00100","1","1);","1,","11000","11010","11110","1:","1]","1][y]","200.","2:","2d","3","=","==",">","adjac","algorithm","analysi","assum","class","code","connect","count","descript","dfs(grid,","edg","exampl","for(int","form","four","given","grid","grid)","grid[x","grid[x][i","grid[x][y]","horizont","i=0;i>","if(i","if(x","input:","int","island","islands.","land","map","number","numislands(vector>&","output:","problem","public:","res=0;","solut","surround","thought","vertically.","water","water.","x","x,","y","y)","y);","{","对于二维数组，每个节点最多访问两次，所以总的最多访问的次数是2*n².最后时间复杂度o(n²)","每次进行dfs的时候，将res+1.","这题不是很难，直接遍历所有，对每个为1的点，进行dfs遍历。没遍历到一个1的节点就赋值为0."],"201- Bitwise-AND-of-Numbers-Range.html":["0","1:","201.","2:","4","[0,1]","[5,7]","[m,","algorithm","analysi","bitwis","class","code","descript","exampl","given","input:","int","m,","n)","n>m?(rangebitwiseand((m>>1),(n>>1))","n]","number","output:","problem","public:","rang","rangebitwiseand(int","return","solut","thought","{","最后一位肯定是0。b>=a+1,range(a,b)中所有数相与，最后一位肯定为0.","确定好了最后一位了，前面的可以递归解决，让ab都右移一位，递归判断，直到最后，a","这个算法最多执行32次，时间复杂度o(1)","这题可以从递归的角度思考问题。如果a>b,那么range(a,b)中的所有数字相与，最后一位bit肯定是0。这个很好证明，a&a+1"],"202.-Happy-Number.html":["\"happy\".","(where","+","0²","1","1.","100","19","1²","202.","2²","68","6²","82","8²","9²","=","a){","a=a/10;","algorithm","analysi","bool","class","code","cycl","defin","descript","determin","digits,","end","endlessli","equal","example:","explanation:","false;","fast=happy(happy(fast));","fast=n;","follow","happi","happy(int","if(fast==1)","if(fast==slow)","includ","input:","int","integer,","ishappy(int","loop","n)","number","numbers.","number认定为是带圈的链表，最后就是找出圈就行。","number问题会有两种情况，一种就是能找到结果，结果为1，还有一种就是会一直循环，形成一个圈。","output:","posit","problem","process","process:","public:","repeat","replac","res+=(a%10)*(a%10);","res;","res=0;","return","slow=happy(slow);","slow=n;","solut","squar","start","stay),","sum","those","thought","true","true;","until","while(1){","while(a){","write","{","}","};","把结果能得到1的，认定为是没有圈的链表，而会一直循环的happi","时间复杂度o(n)，重要的是，空间复杂度只有o(1)。如果用一个hashtable保存之前出现的数字，也是能找到重复的，但是这样就需要o(n)的时间复杂度了。","这题其实就是链表判圈问题的建模版本，happi","链表找环问题可以看前面的题解。"],"204.-Count-Primes.html":["10","10,","18","2,","204.","3,","4","5,","7.","algorithm","analysi","class","code","continue;","count","countprimes(int","descript","dp(n,false);","example:","explanation:","for(int","half=sqrt(n);","i=3;ihalf)","if(n","input:","int","j=i*i;j","less","log","n)","n).","n.","neg","non","number","number,","output:","prime","problem","public:","res=1;","solut","thought","{","可以知道，所有偶数肯定不是质数。直接从3开始计算，排除所有3的倍数。注意要从33开始，也就是9开始，而不是3或者是32=6开始。因为6已经在从2开始计算中计算过了。再比如计算5的倍数，不需要计算53=15，因为之前计算3的时候计算过35=15了。","将所有质数加起来。描述的应该不是很清楚，可以仔细看看代码","直接求一个数是不是质数需要o(lgn)时间，遍历查看是否有两数相乘能得到n。这里是求n数中所有的质数，可以从反方向来考虑。得到一个质数之后，直接排除所有他的倍数。排除一个数只要一次计算，但是之后再来计算这个数是不是质数却需要o(lgn)时间。","等等数字明显都是偶数，可以直接不计算。于是修改计算倍数的代码，9直接加上23，43。","计算3的倍数，首先是9，然后是12，然后是15以此类推，都不是质数，可以排除。但是，这里好像还是有重复计算，12","这里空间复杂度是o(n)，时间复杂度我也不是很会分析，看题目的hint里，分析的时间复杂度是o(n","，"],"205.-Isomorphic-Strings.html":["\"add\"","\"bar\"","\"egg\",","\"foo\",","\"paper\",","\"title\"","1:","205.","2:","3:","=","algorithm","analysi","anoth","assum","bool","both","charact","characters.","class","code","descript","determin","exampl","fals","for(int","given","i=0;i","input:","isisomorphic(str","isomorph","isomorphic.","itself.","length.","ma;","map","note:","occurr","order","output:","preserv","problem","public:","replac","s","s,","same","se;","solut","string","t","t)","t,","t.","thought","true","two","unordered_map","unordered_set","{","一次遍历，时间复杂度o(n)，用了map和set保存映射关系，空间复杂度o(n)","直接用map建立起两个字符串中每个字符之间的映射关系就很好解决"],"207.-Course-Schedule.html":["0","0,","0.","1","1,","1.","1:","2","2,","207.","2:","[0,1]","[[1,0],[0,1]]","[[1,0]]","adjac","algorithm","analysi","assum","bool","canfinish(int","class","code","cours","courses?","descript","duplic","edg","edges,","exampl","explanation:","express","fals","finish","first","for(int","given","graph","graph(numcourses);","i=0;i","impossible.","indegree(numcourses);","input","input:","label","list","matrices.","more","n","note:","number","numcourses,","output:","pair:","pairs,","possibl","possible.","prerequisit","prerequisites)","prerequisites,","prerequisites.","problem","public:","read","repres","represented.","schedul","solut","take","take,","take.","thought","total","true","vector","vector>","vector>&","{","学习一门课程之前要学习先学课程，如果有两门课程是互相满足的，那就学不完。如果把这种关系构成一个图，第一个能学的课程一定是入度为0的。然后将第一个课程在图中删除，第二个能学的肯定也是入度为0的。这种处理就是拓扑排序。可以利用拓扑排序解决这题","建图的过程时间复杂度和空间复杂度都是o(n²)，找到一个入度为0的节点，平均时间复杂度为o(n)。删除一个节点，时间复杂度o(n)。第二个循环平均进行n次，循环总的时间复杂度为o(n²)。最后时间复杂度o(n²)"],"209.-Minimum-Size-Subarray-Sum.html":["0","0;","2","209.","7,","=","=nums[slow++];","[2,3,1,2,4,3]","[4,3]","algorithm","analysi","anoth","array","class","code","complex","constraint.","contigu","descript","example:","explanation:","fast++;","fast=0,slow=0;","figur","find","follow","given","if(nums.size()==0)","input:","instead.","int","integ","isn't","length","log","minim","minimum","minsubarraylen(int","n","n).","num","nums)","o(n","o(n)","one,","out","output:","posit","problem","public:","res==int_max?0:res;","res=int_max;","res=min(res,fast","return","s","s,","s.","size","slow+1);","solut","solution,","subarray","sum","sum=0;","thought","thought中已经分析了时间复杂度，这里就不多说了","time","tri","under","up:","up也提出，有o(n)和o(nlgn)的办法。","vector&","while(fast=s){","{","}","};","≥","然后是o(n)的解法，这里还是使用快慢指针，快的先加，如果超过了s，慢指针再往前，慢指针只需要减，直到小于s。直到快指针超过数组长度即可结束，中间每次比较得到最小值","这里求出连续子数组之和大于s的最小值。有两种方法，题目中follow","首先说下o(nlgn)，这种形式的时间复杂度一般是分治法，类似的有归并排序。对于这题，连续数组要不就是包含中间那个值，或者是在左半数组中或者是在右半数组中。所以首先处理连续数组在中间的情况，从中间开始左右扩展，然后左边右边递归处理即可。最后得到最大的"],"211.-Add-and-Search-Word-Data-structure-design.html":["(prefix",".","..","211.",">","add","addword(\"bad\")","addword(\"dad\")","addword(\"mad\")","addword(word)","algorithm","assum","bool","consist","contain","data","descript","design","example:","express","fals","follow","implement","letter","letter.","liter","lowercas","mean","note:","on","operations:","problem","regular","repres","search","search(\".ad\")","search(\"b..\")","search(\"bad\")","search(\"pad\")","search(word)","string","structur","support","thought","tree).md)","trie","true","two","void","word","z","z.","这题直接用字典树解决即可，接口和这题都差不多。208."],"212.-Word-Search-II.html":["\"adjacent\"","&&","&a","&board,","&res)","&visit,","'a';","'a'])","'a'],","(!p","(auto","(int","(nx","(words.empty()","*child[26];","*p","*p,","*root;","+","0","0;","0},","1,","1},","1}};","212.","2d",":","=",">",">&",">=",">child[board[i][j]",">child[board[nx][ny]",">child[i]",">child[i])",">child[i];",">str",">str);",">str.clear();",">str.empty())","[","[\"eat\",\"oath\"]","[\"oath\",\"pea\",\"eat\",\"rain\"]","['e','t','a','e'],","['i','f','l','v']","['i','h','k','r'],","['o','a','a','n'],","]","a[0]","a[1]","adjac","algorithm","analysi","board","board,","board.","board.empty()","board[0].empty())","cell","cell,","child)","child[board[i][j]","child[board[nx][ny]","class","code","consist","construct","d)","d[][2]","descript","dictionary,","distinct.","each","example:","false));","false;","find","findwords(vector","given","horizont","i,","ii","input","input:","insert(str","int","j,","j;","letter","list","lowercas","more","neighboring.","new","note:","null;","nx","nx,","ny","ny,","onc","output:","p","problem","public:","res);","res.push_back(p","res;","return","root(new","root;","s)","s;","same","search","search(board,","search(vector","sequenti","solut","str(\"\")","str;","string","struct","t.insert(a);","t.root","t;","those","thought","trie","trie()","trienod","trienode()","trienode())","trienode();","true;","us","valu","vector","vector&","vector(board[0].size(),","vertic","visit(board.size(),","visit,","visit[i][j]","void","word","word.","words)","z.","{","{0,","{1,","{{","{}","||","}","};","字典树的时空分析可以看前面几个文章介绍了","注意这里是在一个二维矩阵中查找数据，那么使用一个二维bool数组保存节点是否被访问过是有必要的。","这题也是用trie解决，这几个用字典树解决的问题一起出现，还是很有意思。这里可以总结一下，如果给你很多词，让你保存在一个数据结构中，然后提供快速的查找接口。","那么这个数据结构最好是使用字典树。这题也不例外，首先要将给你的words中的单词全部插入到字典树中。然后再查找"],"214.-Shortest-Palindrome.html":["\"aaacecaaa\"","\"aacecaaa\"","\"abcd\"","\"dcbabcd\"","1);","1,i=0;","1:","214.","2:","ad","algorithm","allow","analysi","charact","class","code","convert","descript","exampl","find","front","getnext(next,rs);","given","if(s.size()==0)","input:","int","it.","j=","j=0,i=0;","kmp只需要两次遍历字符串，时间复杂度o(n)","next(s.size(),","output:","palindrom","perform","problem","public:","return","reverse(s.begin(),s.end());","rs(s);","s)","s,","s;","shortest","shortestpalindrome(str","solut","string","thought","transformation.","vector","while(i","while(i&next,string&s){","{","做这题之前，我一直没有真正理解kmp。只是会用kmp，知道他是一种匹配算法。kmp中匹配字符串最后的index表明的是匹配字符串最前面一段和被匹配字符串最后一段的匹配情况。用在这里，恰恰合适。将字符串翻转之后，匹配出相同的前后缀，最后再将前缀加到原来字符串前面即可","还是那句话，碰到字符串问题，要不就是动态规划，还不就是匹配（kmp，trie），再就是少数的回溯。","这里我开始直接用暴力匹配的方法解决，发送时间和空间复杂度被拉满了。过不了最后一个测试样例。后来看discuss，发现可以使用kmp算法解这题。"],"216.-Combination-Sum-III.html":["1","1:","216.","2:","3,","7","9","=",">","[1,3,5],","[2,3,4]]","[[1,2,4]]","[[1,2,6],","add","algorithm","analysi","class","code","combin","combinations.","combinationsum3(int","contain","descript","duplic","each","exampl","find","for(int","given","help(res,k,n,tmp,0,1);","help(res,k,n,tmp,sum+i,i+1);","help(vector>&res,int","i=pos;in)","if(sum==n){","if(tmp.size()==k){","iii","input:","int","integers.","k","k,","k,int","n","n)","n,","n,vector&tmp,int","note:","number","numbers.","o(9^k),","o(c(9,k))","output:","pos){","posit","possibl","problem","public:","res.push_back(tmp);","res;","return","return;","set","solut","sum","sum,int","thought","tmp.pop_back();","tmp.push_back(i);","tmp;","uniqu","up","us","vector","vector>","void","{","}","};","空间复杂度:","组合问题，直接用回溯法解决，中间加入剪枝，如果sum已经大于n了，就可以不用继续往下求解了","遍历求解3个数的组合，时间复杂度"],"217.-Contains-Duplicate.html":["//","1:","217.","2:","3:","[1,1,1,3,3,4,3,2,4,2]","[1,2,3,1]","[1,2,3,4]","algorithm","analysi","appear","array","array,","bool","class","code","contain","containsduplicate(vector&","descript","distinct.","duplic","duplicates.","element","exampl","fals","false;","find","for(auto&num:nums){","function","given","if(nums.size()","if(se.count(num))","input:","integers,","next","nums)","o(n)","output:","problem","public:","return","se(nums.size());","se.insert(num);","solut","sort","table保存之前出现的值，如果出现重复的，就return。","thought","true","true;","twice","unordered_set","valu","version","{","}","判断是否有重复数组，o(n)的解法就是使用一个hash","唯一可能的解释，排序算法比o(n)算法快的理由就是，n不大，lgn小于o(n)解法前面的系数。","对于o(n)的算法，开始定义set的时候，要给他分配n的空间。因为stl里的alloc是动态递增空间的。如果空间不够，会重新开辟空间。所以提前分配好n的空间，能减少算法运行的时间和空间。","还有一种方法是我做完o(n)解法之后，发现有人用o(nlgn)的排序解法做出来的，竟然还快一点。首先排序数组，然后判断连续的index是否有重复的数字。"],"219.-Contains-Duplicate-II.html":["(nums.empty()","1","1:","2","219.","2:","3","3:","=",">","[1,0,1,1],","[1,2,3,1,2,3],","[1,2,3,1],","absolut","algorithm","analysi","array","between","bool","class","code","contain","containsnearbyduplicate(vector&","descripiton","differ","distinct","duplic","exampl","fals","false;","find","for(int","given","i=0;i=k)","ii","index","indic","input:","int","integ","j","k","k)","k,","k.","k==35000.这是我看比我速度快很多但是和我算法一样的人，在前面加的。我也加了个试试，确实快很多。我猜测他肯定是知道一个测试样例，所以直接return了。","k]);","num","nums,","nums[i]","nums[j]","out","output:","problem","public:","return","se(k);","se.erase(nums[i","solut","such","thought","true","two","whether","{","||","}","};","。如果下一次碰到这个num，就查看index相差是否小于k，这是可行的，但是空间复杂度大了一点。","和上一题类似，这里就是多了k个数字的限制。我第一次做这个题的时候，用了一个map保存数据，映射关系是num","至于代码中为啥开始有个","这个算法空间复杂度只有o(k)时间复杂度o(n)，还是很不错的","这次做这题的时候，我想了下，如果k很小，比如为3，我们就不需要关注之前的数字，甚至不需要保存。每次往前看3个就行。但是如果k很大，这个效率就没有保存数字高了。不过我们可以换个角度想，每次把超出k的那个数字删除。"],"220.-Contains-Duplicate-III.html":["(ma.count(bucket_num+1)&&ma[bucket_num+1]","0","1,","1:","2","2,","220.","2:","3","3,","3:","=","[1,0,1,1],","[1,2,3,1],","[1,5,9,1,5,9],","absolut","algorithm","analysi","array","between","bool","class","code","contain","containsnearbyalmostduplicate(vector&","descript","differ","distinct","duplic","exampl","fals","false;","find","for(int","given","i=0;i(nums[i])","if(k","if(ma.count(bucket_num)||","iii","indic","input:","int","int_min)/(tmp+1));","int_min)/(tmp+1);","integers,","j","k","k,","k.","k])","long","ma(k);","ma.erase((static_cast(nums[i","num","nums,","nums[i]","nums[i]=0){","nums[j]","out","output:","problem","public:","return","solut","such","t","t)","thought","tmp=static_cast(t);","true","two","whether","{","}","};","最开始，我想的是，还是和前一题一样处理，只不过判断是是否存在的时候，使用一个for循环判断这个范围内的值。但是这个题目的测试样例很bug，有个测试样例是int_max，直接超时。","看了discuss，发现有人用桶的方法解这题，我感觉很巧妙。和之前桶排序一样。首先定下桶的大小，这里设为t+1。从int_min开始，每个桶只能放一个数。如果出现相同的桶，那么就可以直接返回true，因为同一个桶中，最大的差值就是t。然后还需要在这个桶的前一个和后一个桶中找数，判断差值是否小于t。如果存在，返回true。通过这种办法，将数字换成桶，再重复利用上题的算法，这里时间复杂度可以到o(n)","这是这个系列的第三题，第二题加入了k表示只看前面k个数。第三题加入了t，代表数字的范围可以再t以内波动。","这里遍历一次数组得到结果，时间复杂度o(n)"],"221.-Maximal-Square.html":["'0');","0","0'","0;","1","1'","1's,","1]))+1;","1],min(dp[i","1][j","1][j],dp[i][j","221.","2d","4","algorithm","analysi","area.","binari","class","code","contain","descript","dp(matrix.size(),vector(matrix[0].size(),0));","dp[i][j]=min(dp[i","example:","fill","find","for(int","given","i=0;i(matrix[i][j]","if(matrix.size()==0||matrix[0].size()==0)","input:","int","largest","matrix","matrix)","maxim","maximalsquare(vector>&","output:","problem","public:","res*res;","res=0;","res=max(res,dp[i][j]);","return","solut","squar","thought","vector>","{","}","};","}else{","上面那个正方形代表了右侧边的最大值，左边正方形的长度代表了下侧边的最大值。左上正方形代表了左上角点的最大值。他们的最小值就是当前正方形的边长。这样就能用动态规划的方式，一次遍历二维数组得到结果","将计算正方形的面积首先转化为计算正方形的边长，边长求出来了，面积自然不在话下。这里用二维数组中一个点代表一个正方形，二维数组的值代表边长。这个点是正方形的右下角。","第一次做这个题的时候，直接暴力解题，得到最大的正方形。感觉多了很多重复计算。后来知道这里可以用动态规划。","这个算法遍历二维数组，遍历过程中每次操作时间复杂度是o(1)，最后时间复杂度o(n²)","这样如果当前点为1，那么当前点代表的正方形边长就取决于他上面左边和左上正方形的边长了。"],"222.-Count-Complete-Tree-Nodes.html":["(1left);","(lgn","*","*/","*left;","*right;","+","...","/","/**","//由于保证是完全二叉树，所以计算高度直接在左边即可","1","1)","1:height(root","1?(1right):","1?0:","1]","1。对于一个完全二叉树，他左子树和右子树肯定有一个是完美二叉树，只要找到这个完美二叉树，就可以直接计算出结果，然后对另一个子树递归调用这个函数。直到节点为null","2","2)","222.","2h","3","4","5","6",":","=",">left)+1;",">right)==h","[lgn","\\","algorithm","analysi","between","binari","c","c1","c2","class","code","complet","count","countnodes(treenode*","definit","descript","example:","except","far","filled,","given","h.","h==","h=height(root);","height(root","height(treenode*","inclus","input:","int","last","last,","left","left(null),","level","level,","lgn","node","node.","nodes.","note:","number","o(lgn*lgn)","output:","possibl","possible.","problem","public:","return","right(null)","root)","root){","root==null?","solut","struct","t(1)","t(n)","t(n/2)","t(n/4)","thought","tree","tree,","treenod","treenode(int","val(x),","val;","wikipedia:","x)","{","{}","}","};","第一次做这个题的时候，直接没考虑这是个完全二叉树，直接写了个计算二叉树节点数量的函数，直接提交，对了就没管了。","这个时间复杂度是o(lgn*lgn)，具体时间复杂度分析如下","这次做的时候，觉得肯定有更好的办法，因为完全二叉树和普通二叉树相比，多了太多信息。","这里用递归结题，我们知道，计算一个完美二叉树（忘了具体是啥名字了，就是最后一层都是null，其他节点都不为null）的节点数量很简单，如果有h层，结果就是2^h"],"223.-Rectangle-Area.html":["(long","0,","0;","1,","2","223.","2d","3,","4,","45","9,","=","a)*(d","a,","algorithm","analysi","area","assum","b","b)+(long","b,","beyond","bottom","c","c,","class","code","computearea(int","corner","cover","d","d,","defin","descript","e","e)*(h","e,","each","example:","f","f);","f,","figure.","find","g","g,","h","h)","if(k","input:","int","int.","j","k","l","left","long","long)(c","long)(g","max(a,e);","max(b,f);","maximum","min(c,g);","min(d,h);","never","note:","output:","plane.","possibl","problem","public:","rectangl","rectilinear","right","shown","solut","thought","top","total","two","valu","{","求出两个矩形的覆盖面积，实质是求出他们的公共面积，然后用两个矩形的总面积减去公共面积即可。","用两个点定义矩形，左下角和右上角。只需要得到a和e以及b和f中的最大值，将得到的两个值作为公共面积的左下角。同理对于右上角两个点，采用取最小值的办法。就能得到公共矩形，之前还需要判断公共矩形是否合法","这个算法中所有的操作都是o(1)的，总的时间复杂度是o(1)"],"224.-Basic-Calculator.html":["\"","\"(1+(4+5+2)","\"1","')","'0');","(","),","+",",",".","1","1\"","1:","1;","2","224.","23","2:","3","3)+(6+8)\"","3:","=","algorithm","alway","analysi","assum","basic","built","calcul","calculate(str","class","close","code","contain","continue;","descript","else即可。这里一共就4种类型的符号。操作符，数字，括号，括回。","empti","eval","evalu","exampl","express","for(auto&ch:s){","function.","given","if(ch='0'){","if(ch=='","if(ch=='('){","if(ch==')'){","if(ch=='+')","implement","input:","int","integ","librari","minu","neg","non","note:","num","num*10","num=0;","number,ops;","number.pop();ops.pop();","number.push(res);","open","ops.push(sign);","output:","parenthes","plu","problem","public:","res+=sign*num;","res;","res=0,num=0,sign=1;","res=0;","res=res*ops.top()+number.top();","return","s)","sign","sign=","sign=1;","simpl","solut","space","stack","static_cast(ch","string","string.","thought","us","valid.","{","}","};","}els","}else{","只需要一次遍历字符串，时间复杂度o(n)，使用栈保存结果，最坏情况下空间复杂度o(n)","基本计算器，只有加减法，之前数据结构学习栈的时候，提到了可以直接用两个栈解决。这学期学习编译原理课，也学到了栈式计算机，也是提供简单的栈指令可以实现计算器。","碰到括号，将当前结果和操作符保存。括号就相当于一次递归调用函数，括号里面就是一次计算，需要保存之前的结果。","碰到括回，弹出上次保存的结果，将其与括号里的相加。","碰到操作符，因为这里没有优先级，可以直接计算上一个操作的结果，然后将sign改为这次操作对应操作符","碰到数字，将当前保存的数字乘10，加上这次数字","这里使用一个sign符号代表当前的操作符。","这里状态不多，不需要使用switch语句，构建dfa。直接使用if"],"225.-Implement-Stack-using-Queues.html":["(doubl","(for","*","*/","/**","//","1次之后，队列头就是开始的队列尾了，也就是最后push进队列的数，也就是stack","1次，将队列头push到队列尾。siz","2","225.","=","algorithm","analysi","assum","back,","bool","cache;","cache=qu.front();","cache=x;","call","class","code","data","depend","dequ","descript","element","element.","empti","empty()","empty.","end","example,","example:","fals","follow","front,","here.","implement","initi","instanti","int","language,","list","long","mean","mystack","mystack()","mystack();","natively.","new","notes:","obj","obj.empty();","obj.pop();","obj.push(x);","obj.top();","object","onto","oper","param_2","param_3","param_4","peek/pop","pop","pop()","pop操作需要pop的数字。可以看到这里时间复杂度是o(n)，stack的pop操作，时间复杂度是o(1)","pop操作：首先得到当前的size，然后执行s","problem","public:","push","push(int","push(x)","qu.empty();","qu.pop();","qu.push(cache);","qu.push(x);","qu;","queue","queue),","queue.","queues.","remov","res;","res=cache;","return","simul","size,","stack","stack).","stack.","stack.empty();","stack.pop();","stack.push(1);","stack.push(2);","stack.top();","standard","structur","such:","support","thought","times){","times=qu.size();","top","top()","top操作：可以像上面一样，使用o(n)时间得到顶元素。但是也可以使用cache减少操作。时间复杂度降低到o(1)，在每次push的时候，将cache设置为push的元素。每次pop的时候，将cache重新设置为队列倒数第二个数。这样top操作直接返回cache即可","us","valid","valid.","void","whether","while(","x","x)","{","}","};","主要要实现的是top和pop操作。其他操作不需要改动。","使用队列实现一个栈。队列和栈的性质是不同的，一个是fifo一个是filo。所以使用队列实现的栈，时间效率肯定很低。","这里面只有pop操作时间复杂度是o(n)的，其他操作都是o(1)"],"226.-Invert-Binary-Tree.html":["(homebrew),","*","*/","*left;","*right;","/","/*","/**","//下面是迭代做法","1","2","226.","3","4","6","7","9","90%",":",">left);",">left,t",">left;",">left=inverttree(root",">right);",">right=inverttree(tmp);","\\","algorithm","analysi","binari","can’t","class","code","definit","descript","engin","example:","f*","google:","howell:","if(root==null)","if(t){","input:","inspir","int","invert","inverttree(treenode*","left(null),","max","node.","off.","origin","output:","problem","public:","return","right(null)","root","root)","root;","softwar","solut","st.pop();","st.push(root);","st.push(t","st;","stack","struct","swap(t","t=st.top();","thought","tmp=root","tree","tree.","treenod","treenode(int","treenode*","trivia:","tweet","us","val(x),","val;","while(!st.empty()){","whiteboard","wrote","x)","{","{}","}","};","这有点意思","这里使用递归和迭代都能做。思想就是先将左右子树翻转了，然后交换左右子树即可","遍历一遍树，时间复杂度o(n)"],"229.-Majority-Element-II.html":["1:","229.","2:",";","[1,1,1,3,3,2,2,2]","[1,2]","[3,2,3]","[3]","algorithm","analysi","appear","array","candidate1=i;","candidate1=nums[0];","candidate2=i;","candidate2=nums[0];","class","code","continue;","count1","count1++;","count1=0;","count1=1;","count2","count2++;","count2=0;","count2=1;","descript","element","exampl","find","for(int","given","i:nums){","if(count1==0){","if(count1>nums.size()/3)","if(count2==0){","if(count2>nums.size()/3)","if(i==candidate1)","if(i==candidate1){","if(i==candidate2)","if(i==candidate2){","if(nums.size()==0)","ii","input:","int","integ","linear","major","majorityelement(vector&","more","n,","n/3","note:","nums)","o(1)","output:","problem","public:","res.push_back(candidate1);","res.push_back(candidate2);","res;","return","run","size","solut","space.","time","times.","vector","{","}","};","⌊","⌋","如何证明这里不会将超过1/3的candidate排除呢？","时间复杂度o(n)，空间复杂度o(1)","第一题用的类似投票的方法，由于肯定有一个数超过一半以上。如果当前当选元素和当前遍历到的元素一样，当选元素得票数加一。否则减一。如果为0，则换当选元素。由于有一半以上保证了为一个数，这个算法能选出一个主元素。","这一题有点不同，需要得到占1/3元素以上的数字。这里只保证肯定有答案。所以这里有两种情况，只有一个数和两个数。","这里是得出其中两个。其实可以从第一题类似的方法衍生出来。","这里至少有一个candidate超过1/3，所以还剩2/3，就算剩下部分全都不同，也只会有1/3次投票的时候，会将两个候选者的票数减去。还有1/3的情况时第二个候选者票数为0，被替代。所以这里肯定会有一个结果，可能有两个。最后的时候，要确认一下，是否两个candidate的票数超过1/3","这题是这个系列的第二题，第一题是求出一个占一半以上元素的主元素。","首先我们来看如果利用第一题类似的投票机制。这里维护两个candidate，如果当前元素和其中一个candidate相等，就投一票。如果两个都不想等，两个候选者都减一票。"],"230.-Kth-Smallest-Element-in-a-BST.html":["(insert/delet","*","*/","*left;","*right;","/","/**","0;","1","1+count(root","1:","2","230.","2:","3","4","5","6",":","=",">left)+count(root",">left);",">left;",">right);",">val;","[3,1,4,null,2],","[5,3,6,2,4,null,null,1],","\\","algorithm","alway","analysi","assum","binari","bst","bst'","class","code","count(treenode*","definit","descript","element","elements.","exampl","find","follow","frequently?","function","given","if(number+1==k){","if(number+1right;","if(root==null)","input:","int","it.","k","k)","kth","kthsmallest","kthsmallest(treenode*","left(null),","modifi","need","node.","note:","number=count(root","operations)","optim","output:","problem","public:","return","right(null)","root","root){","root,","root=root","routine?","search","smallest","solut","struct","thought","total","tree","tree,","treenod","treenode(int","up:","val(x),","val;","valid,","while(true){","write","x)","{","{}","}","};","}els","}else{","≤","得到第k个数，这里其实可以利用之前得到数组中k大的数的解法。只是之前那个是要用o(n)时间将第k个数归位，这里是用o(n)时间得到当前root是第几大的数。对于bst来说，只要得到左子节点位置即可","最坏情况下时间复杂度还是需要o(n)时间。"],"231.-Power-of-Two.html":["1","16","1:","218","231.","2:","2^0","2^4","3:","=","algorithm","analysi","bool","class","code","descript","determin","exampl","explanation:","fals","function","given","input:","integer,","ispoweroftwo(int","leetcode检测一个题的答案是一直调用这个函数，如果再函数里声明一个static变量，那么，就只会初始化一次。之后直接返回即可。用在这题最好不过","n)","output:","power","problem","public:","se{1","solut","static","thought","true","two","two.","unordered_set","write","{","不难看出，这里时间和空间都是复杂度o(1)","这里有种解法是一直除二，但是还可以利用leetcode的漏洞。"],"232.-Implement-Queue-using-Stacks.html":["(doubl","(for","*","*/","/**","//","1","232.","=",">empty();",">peek();",">pop();",">push(x);","algorithm","analysi","assum","back","bool","call","class","code","data","depend","dequ","descript","element","element.","empti","empty()","empty.","end","example,","example:","fals","follow","front","here.","if(output.size()==0){","implement","initi","input,output;","input.empty()&&output.empty();","input.push(x);","instanti","int","language,","list","long","mean","myqueu","myqueue()","myqueue();","myqueue*","natively.","new","notes:","obj","object","oper","output.pop();","output.push(input.top()),input.pop();","output.top();","param_2","param_3","param_4","peek","peek()","peek/pop","pop","pop()","private:","problem","public:","push","push(int","push(x)","queue","queue),","queue).","queue.","queue.empty();","queue.peek();","queue.pop();","queue.push(1);","queue.push(2);","remov","res;","res=peek();","return","simul","size,","stack","stack.","stacks.","stack。如果需要peek或者pop，直接返回output","stack中。因为，只要反转一次，就不用再复原了，直接保持状态，之后就可以不用反转。","stack中所有元素push到output中。这里确实需要o(n)的时间，但是和平均o(1)不矛盾。","stack为空，就将input","stack和output","stack的元素。如果output","standard","structur","such:","support","thought","top,","us","valid","valid.","void","whether","while(input.size()){","x","x)","{","}","};","一般的做法是，一直弹出，直到最后一个数，返回，然后将栈复原。但是这里直接保存在output","使用stack实现一个queue，这里需要两个栈。第一次做的时候，我实现的pop操作，时间复杂度为o(n)，并且认为应该没有地方能改了。但是这次抱着试一试的心态去看了discuss，发现确实有很厉害的算法，将所有操作的平均时间复杂度降低到了o(1)","使用一个input","由于这个算法，对于每个数字只需要一次入栈操作，和一次转移栈操作以及一次出栈操作。这几个操作是o(n)的，所以对于每个数字而言，平均时间复杂度是o(1)"],"234.-Palindrome-Linked-List.html":["*","*/","*next;","/**","1","1:","234.","2:",":",">1",">2",">next",">next!=null){",">next;",">val!=st.top())",">val);","algorithm","analysi","bool","class","code","definit","descript","determin","exampl","fals","false;","fast=fast","fast=head,*slow=head;","follow","given","head)","if(fast)","if(slow","input:","int","ispalindrome(listnode*","link","list","list,","list.","listnod","listnode(int","listnode*","next(null)","o(1)","o(n)","output:","palindrom","palindrome.","problem","public:","return","singli","slow=slow","solut","space?","st.pop();","st.push(slow","st;","stack","struct","thought","time","true","true;","up:","val(x),","val;","while(fast!=null&&fast","while(slow){","x)","{","{}","}","};","一次遍历，时间复杂度是o(n)，使用栈辅助，空间复杂度也是o(n)","这里主要是找到链表的中点，将链表分成两半，然后匹配是否是回文串。找到中点用快慢指针。使用一个stack来辅助，就只需要一次遍历可的结果"],"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":["(bst),","(lca)","(where","*","*/","*left;","*right;","/**","1:","2","2,","235.","2:","4","6","6.","8",":","=",">left;",">val);",">val,q",">val>ma){",">valright;","[6,2,8,0,4,7,9,null,null,3,5]","[6,2,8,0,4,7,9,null,null,3,5],","accord","algorithm","allow","analysi","ancestor","between","binari","both","break;","bst.","class","code","common","defin","definit","definition.","descend","descript","differ","exampl","exist","explanation:","find","given","if(root","input:","int","itself","itself).”","lca","left(null),","lowest","lowestcommonancestor(treenode*","ma=max(p","mi=min(p","node","node.","nodes'","note:","output:","p","p,","problem","public:","q","q)","return","right(null)","root","root,","root;","root=root","search","solut","struct","t","thought","tree","tree:","treenod","treenode(int","treenode*","two","unique.","val(x),","val;","valu","while(root){","wikipedia:","x)","{","{}","}","};","}els","}else{","“the","得到最小公共祖先，对于bst来说不是很难，毕竟bst是有自己的“顺序”的，如果当前节点的值在给定的两个节点之间，直接可以返回当前节点。因为小的那个肯定在左子树，大的肯定在右子树","这里最差情况下，时间复杂度是o(lgn),最坏情况就是在最底层的叶子节点才找到最小公共祖先。"],"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":["(lca)","(where","*","*/","*left;","*right;","/**","1","1:","236.","2:","3","3.","4","5","5,",":","=",">left,p,q);",">right,p,q);","[3,5,1,6,2,0,8,null,null,7,4]","[3,5,1,6,2,0,8,null,null,7,4],","accord","algorithm","allow","analysi","ancestor","between","binari","both","class","code","common","defin","definit","definition.","descend","descript","else{","exampl","explanation:","find","follow","given","if(le==null)","if(ri==null)","if(root==null||root==p||root==q)","input:","int","itself","itself).”","lca","le;","left(null),","lowest","lowestcommonancestor(treenode*","node","node.","output:","p","p,","problem","public:","q","q)","return","ri;","right(null)","root","root,","root;","solut","struct","t","thought","tree","tree,","tree.","tree:","treenod","treenode(int","treenode*","treenode*le=lowestcommonancestor(root","treenode*ri=lowestcommonancestor(root","two","val(x),","val;","wikipedia:","x)","{","{}","}","};","“the","这里和上题不同的地方在于，这里需要将树都遍历一遍。时间复杂度o(n)","这里用递归来做，从根节点开始，首先在它的左子树进行一次寻找，如果找到p或者找到q，就会有个返回值，如果都没找到，返回null。在右子树进行同理查找方式。最后两个查找结束之后，返回到根节点检查。如果两个返回都不是null，说明两个节点分别出现在两个子树，这时候根节点是公共节点，返回根。如果只有一个子树返回了，说明两个节点都在那个子树中，这里直接返回那个值即可。如果两个都是null节点，返回null。","这题是上题的进阶，这里的树不再是bst，不是bst的话，treenode里的val节点就对我们没啥用了。这里也必须遍历所有节点才能找到最小公共祖先。"],"238.-Product-of-Array-Except-Self.html":["(the","1,","1]=nums.back();","238.",">","[1,2,3,4]","[24,12,8,6]","algorithm","analysi","analysis.)","array","class","code","complex","complexity?","constant","count","descript","divis","element","equal","example:","except","extra","follow","for(int","given","i=1;i","input:","int","integ","left(size),right(size),res(size);","left[0]=nums[0];","n","note:","num","nums)","nums[i].","o(n).","output","output:","output[i]","pleas","problem","product","productexceptself(vector&","public:","purpos","return","right[siz","self","size=nums.size();","solut","solv","space","such","thought","up:","up明确静止这么做。为了在o(n)时间做完，还是得先保存一些结果。","vector","without","{","定义一个left和一个right数组。保存从最左边和最右边开始，连续数的乘积。将所有的乘积都保存之后，再次遍历数组，就能在o(1)时间算出每个位置应该填的值了。","时间复杂度o(n)，只需要3次遍历数组。空间复杂度o(n)，用了两个vector来保存数据。","本来这题最简单的解决办法就是将所有的乘起来，然后每次除一个数，就能得到结果。但是follow"],"239.-Sliding-Window-Maximum.html":["&&","1","1)","1,","1]","239.","3","3,5,3,6,7],","3]","5","5]","6","6]","7","7]","=","[","[1","[1,3,","[3","[3,3,5,5,6,7]","[5","algorithm","alway","analysi","ans.push_back(nums[q.front()]);","ans;","array","array'","array.","assum","class","code","dequ","descript","each","empti","example:","explanation:","follow","for(int","given","i=0;i=k)","input","input:","int","k","k)","left","linear","max","maximum","maxslidingwindow(vector&","move","non","note:","num","number","nums,","nums[q.back()]=k","on","output:","posit","position.","problem","public:","q.pop_front();","q;","return","right","right.","see","size","slide","solut","solv","thought","time","time?","up:","valid,","vector","veri","while(!q.empty()","window","window.","{","}","};","≤","现在，另一个重要的问题就是，根据上面提出的需求，选取合适的数据结构来解题。在上面的需求中，我们既要操作尾端（剔除最后一个数），也要操作首端（加入新数的时候，剔除比他小的数）。这两个操作都是线性时间的数据结构有链表和双端队列。这里我们用双端队列实现","由于前一次查找到的最大值过程中，很多信息对后一次来说肯定也是能用上的。所以需要想个办法利用之前的信息。","经典的滑动窗口问题。如果最暴力的方法就是每移动一步，循环判断所有的数字，找到最大值。但是这样做的话，时间复杂度就是o(nk)，还是需要挺久时间的。","这里需要用平均情况去分析。对于每一个数，都只进行了一个入队和出队操作，所以，平均时间复杂度是o(n)","首先需要知道的一点是，如果当前来了个很大的值，那么还在窗口中的，之前的比这个值小的值就已经失去作用了。之后肯定不会被放入结果。那么我们就在每次加入新数的时候，将之前比它小的数剔除，然后将当前值插入。这样就能保证当前最后一个数就是最大值了。还需要注意的一个点是，当窗口中的数大于k的时候，需要剔除最后一个数。"],"240.-Search-a-2D-Matrix-II.html":["1,j=0;","11,","12,","13,","14,","15],","16,","17,","19],","20,","21,","22],","23,","240.","24],","26,","2d","30]","4,","5,","6,","7,","8,","9,","=","[","[1,","[10,","[18,","[2,","[3,","]","algorithm","analysi","ascend","bool","bottom.","class","code","column","consid","descript","each","effici","example:","false.","follow","given","i=matrix.size()","ii","int","integ","left","m","matrix","matrix,","matrix.","matrix:","n","problem","properties:","public:","return","right.","row","search","searchmatrix(vector>&","solut","sort","target","target)","thought","top","true.","valu","while(i>=0&&j","write","x","{","一个很有名的题目了，这是二分查找的二维形式。这里只要求每行每列的右边和下边都比他大，上面和左边都比他小。那么如果我们从左下角出发。每次都是往上或者右移动，这样就能保证要不就是往比他大的地方移动要不就是小的。","最多走到对角线，需要花费n+m步，时间复杂度是o(n+m)","这也是二分查找的思路。要不就是往比mid大的值移动，要不就是小的值。"],"241.-Different-Ways-to-Add-Parentheses.html":["\"2","\"2*3","(((2*3)","((2","((2*(3","((2*3)","(1","(2","(2*((3","(2*(3","(4*5))","(4*5)))","*.","+,","0","1","1\"","1)","1))","10","10,","10]","14","14,","1:","2","241.","2:","2]","34","34,","4))*5)","4)*5)","4)*5))","4*5\"","=","[","[0,","add","algorithm","analysi","class","code","comput","cout","descript","differ","diffwaystocompute(str","exampl","explanation:","for(auto","for(int","given","group","i=0;i","if(input[i]=='*'){","if(input[i]=='+'){","if(res.size()==0){","input)","input:","int","l:left){","left=diffwaystocompute(input.substr(0,i));","ma;","ma[input]=res;","now=0;","number","oper","operators,","operators.","output:","parenthes","possibl","problem","public:","r);","r:right){","res.push_back(atoi(input.c_str()));","res.push_back(l","res.push_back(l*r);","res.push_back(l+r);","res;","result","return","right=diffwaystocompute(input.substr(i+1));","solut","string","thought","unordered_map>","valid","vector","way","{","}","};","}els","}else{","回溯法时间复杂度是o(2^n)的时间复杂度，这里加入了map的方式，会快一点。","在函数中，处理方式就是，找到每个操作符，对操作符左右分别进行递归处理。","最后将结果保存在map中即可","这里最简答的方法就是回溯法，因为可以随意加括号，有很多不确定性。使用回溯法，在每个能加括号的地方，进行回溯。但是回溯法时间复杂度太高，往往可以用备忘录的方式，消除重复的回溯。所以这里用一个map来保存每次运行后的结果。进入函数的时候，首先检查是否在map中已经保存了，如果保存了，就直接返回。"],"654.-maximum-binary-tree.html":["1);","654.",">left=help(nums,left,ma",">right=help(nums,ma+1,right);","algorithm","analysi","array","array.","binari","build","class","code","construct","constructmaximumbinarytree(vector&","defin","descript","divid","duplicates.","follow:","for(int","given","help(nums,0,nums.size()","help(vector&nums,int","i=left+1;inums[i]?ma:i;","if(left==right){","if(left>right)","int","integ","left","left,int","ma=left;","maximum","node","null;","number","number.","nums)","output","part","problem","public:","re","res;","res=new","return","right","right){","root","solut","subarray","subtre","thought","tree","tree.","treenode(nums[left]);","treenode(nums[ma]);","treenode*","{","}","};","碰到树以及链表的题，首先观察返回值，如果返回值是一个treenode*,也就是一个根节点。那基本上可以用递归解决。这里首先用递归的思想去想是否可行，首先便利数组找到最大值作为根节点。根节点左边的数组变成左子树，右边为右子树。对于左右子树，使用一样的解法就能得到答案。递归思想一相同，之后就问题不大了","这个时间复杂度不是很好分析，但是在leetcode中运行时间也很快了，贴个图。"],"657.-robot-reaturn-to-origin.html":["\"facing\"","\"l\"","\"r\"","(0,","(down).","(left),","(right),","(up),","0)","0),","2d","657.","algorithm","also,","alway","analysi","assum","bool","ch:moves){","charact","class","code","complet","d","descript","each","end","etc.","false.","finish","for(auto","given","if(ch=='d'){","if(ch=='l'){","if(ch=='r'){","if(ch=='u'){","if(lr.empty()||lr.top()=='l'){","if(lr.empty()||lr.top()=='r'){","if(ud.empty()||ud.top()=='d'){","if(ud.empty()||ud.top()=='u'){","irrelevant.","ith","judg","judgecircle(str","l","left,","lr.empty()&&ud.empty();","lr.pop();","lr.push(ch);","lr;","magnitud","make","move","move.","movement","moves)","moves,","moves.","moves[i]","note:","once,","origin","origin,","otherwise,","plane.","posit","problem","public:","r","repres","return","right","robot","robot'","same","sequenc","solut","stack","start","string,","thought","true.","u","ud.pop();","ud.push(ch);","ud;","up","valid","way","{","}","};","}els","一个循环遍历数组，时间是o(n)，最开始拿到题目的时候直接类比成了括号匹配，就动手做了。其实括号匹配比这个多了一点位置上的限制，而这里只要统计数字即可。直接定义4个变量会更快，直接用4个寄存器存count，最后比较。","机器人从原点出发，最后判断能否到达原点，一共4个操作，将所有的操作统计起来，最后比较上下是否一样，左右是否一样即可"],"659.-split-array-into-consecutive-subsequences.html":["1","1,","1:","2,","2:","3","3,","3.","3:","4,","5","659.",":","[1,2,3,3,4,4,5,5]","[1,2,3,3,4,5]","[1,2,3,4,4,5]","algorithm","analysi","array","ascend","bool","class","code","consecut","consist","constraints:","cut,tail;","cut[num]++;","descript","desctipt","each","exampl","explanation:","fals","for(auto","given","if(cut[n]","input:","integ","ispossible(vector&","length","more","n:nums){","num","num:nums)","nums)","order,","output:","pass解决问题，时间复杂度o(n).hashmap插入操作时间也是o(1)。","problem","public:","return","solut","sort","split","subsequ","such","true","two","unordered_map","{","第一次想这题，没看清是连续的数字。导致分析了很久也没结果。知道是连续的数字之后，就很好办了。可以直接用hashmap保存数字出现的次数，以及保存3个以上链表的末尾节点，每次访问到数字，首先查看链表后面末尾节点是否有值，有的话直接加一。如果没有，就将这个数字后面两个数字和这个组合起来，然后加入到将这个链表末尾节点加入hashmap，如果不能进行上面两个操作，说明这里有问题"],"662.-maximum-width-of-binary-tree.html":["(3,2).","(5,3).","(5,3,null,9).","(6,null,null,null,null,null,null,7).","(the","*","*/","*left;","*right;",",","/","/**","//coutleft,left,(2*pos)%int_max,level+1);","0;","0，它的子树就是","1","1:","1，它的子树就是","2","2:","2_index","2_index+1","2_index+1.","2_index+2","3","32","3:","4","4:","5","6","662.","7","8","9",":",">right,left,(2*pos+1)%int_max,level+1)));","\\","algorithm","analysi","answer","base","between","binari","bit","calculation.","class","code","count","defin","definit","descript","dfs遍历树，每次遍历中间时间复杂度为o(1)，最后时间复杂度o(n)","end","exampl","exist","explanation:","explanation:th","fourth","full","function","given","help(root,left,1,0);","help(treenode*root,vector&left,long","if(level>=left.size())","if(root==null)","index","input:","int","int_max。保证不溢出。修改代码之后发现能通过。","integer.","left(null),","left.push_back(pos);","left;","left[level]+1,max(le,help(root","leftmost","length","level","level){","level,","levels.","long","max(po","maximum","modul","node","node.","non","note:","null","null.","on","output:","pos,int","problem","public:","rang","return","right","right(null)","root)","same","second","sign","solut","struct","structur","third","thought","tree","tree,","tree.","treenod","treenode(int","val(x),","val;","vector","width","widthofbinarytree(treenode*","write","x)","{","{}","}","};","于是我参考了下discuss，发现有人在进入下一层的时候，将index","如果first","然后用dfs或者是bfs遍历数，将最右的值减去最左的值即可。但是如果就这样，不加处理，会在最后两个case失败。因为我们用int类型表达index，这样树最多只能有32层。如果用long类型，树也只能有64层，这两种类型都不能通过测试。","这题是求每一层的宽度。如果要求宽度，关键是要得到最左和最右节点的位置，然后将两个位置相减就行。关键是如何安排每个节点的值。这里可以用类似heap的表示法。"],"1223.-dice-roll-simulation.html":["(1,1)","(2,2)","*","+","1","1)","1,sizeof(cache));","10^9","1223.","181","1:","1;","2","2,","2:","3,","30","34","34.","36","3:","6","7.","=","==",">rollmax=rollmax;","[1,1,1,1,1,1]","[1,1,1,2,2,3]","[1,1,2,2,2,3]","algorithm","analysi","answer","appear","array","array,","cache[5002][7][16];","cache[pos][number][per];","case,","class","code","combinations.","consecut","consecutively,","consid","constraint","constraints:","descript","dice","die","die,","diesimulator(int","differ","distinct","dp(0,0,0,n);","dp(int","each","element","error。所以这里用数组保存之前的结果。整个动态规划的状态有3个维度，一是前面出现的次数，二是前一个数字，三是当前防止的轮数。","exact","exampl","explanation:","f(1,1,1),f(1,2,1),f(1,3,1),f(1,4,1),f(1,5,1),f(1,6,1).","final","for(int","gener","given","i=1;i","if(cache[pos][number][per]!=","if(pos==n)","indexed)","input:","int","integ","introduc","large,","limit","long","look","memset(cache,","mod=1000000000+7;","modulo","more","n","n){","n,","number","number,int","obtain","occur,","on","onc","other.","output:","per,int","pos,int","possibl","problem","public:","random","res=0;","return","roll","roll.","rollmax","rollmax)","rollmax.length","rollmax;","rollmax[i](1","rolls.","sequenc","simul","solut","such","therefor","thought","times.","two","vector","vector&","{","}","如果不加记忆模式，时间复杂度就跟回溯法是一样的，但是加了记忆模式，算法快了很多，时间复杂度这里不好分析","所以，所有的结果可以看成是下面6项相加","第三次参加比赛了，当时又止步在第三题。第三题当时其实想到用记忆化保存的方法解决问题，但是最后没有想通状态转移的过程。于是之后参考了discuss里大神的逻辑，然后自己写出代码","类似一个安放数字问题，也很像回溯法构建一个排列的问题。只是回溯法需要列举出所有的情况，但是这里只需要返回最后的数字。所以就可以不用回溯的过程。这里需要多考虑的一点是，存在一个限制数组，rollmax。这里就需要记录当前数字之前出现了多少次，如果超过了限制，那么这次安放就不安放这个数字。这里的算法中，会出现很多重复计算的过程，很多前面的数字最后会汇聚到一个节点，如果不用记忆化方法保存之前的数据，肯定会tim"]},"length":174},"tokenStore":{"root":{"0":{"0":{"0":{"0":{"0":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}},"docs":{}},"1":{"1":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}},"docs":{}},"docs":{}},"1":{"0":{"0":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}},"docs":{}},"docs":{}},"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.023809523809523808}}},"1":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}},"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.08823529411764706},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.012232415902140673},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.045454545454545456},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.024793388429752067},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.08235294117647059},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.023809523809523808},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}}},")":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},".":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}},",":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.016}}},"?":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"位":{"docs":{},"置":{"docs":{},"又":{"docs":{},"可":{"docs":{},"以":{"docs":{},"递":{"docs":{},"归":{"docs":{},"调":{"docs":{},"用":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"后":{"docs":{},"面":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{},"第":{"docs":{},"一":{"docs":{},"位":{"docs":{},"置":{"docs":{},"补":{"docs":{},"上":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"所":{"docs":{},"有":{"docs":{},"排":{"docs":{},"列":{"docs":{},"了":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"2":{"5":{"0":{"0":{"0":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}},"docs":{}},"docs":{}},"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}},"docs":{}},"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}},"'":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}},"s":{"docs":{},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886}}}}},"²":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.01652892561983471}}},"}":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}}},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"子":{"docs":{},"树":{"docs":{},"就":{"docs":{},"是":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}},"1":{"0":{"0":{"0":{"docs":{},".":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}},"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}},".":{"0":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}},"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":3.3407407407407406}}},")":{"docs":{},";":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}},"1":{"docs":{},".":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":3.3407407407407406}}}},"2":{"4":{"docs":{},".":{"0":{"0":{"0":{"0":{"0":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"6":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},".":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}},"docs":{},".":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":1.6744186046511627}}}},"3":{"docs":{},".":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":1.4323450134770888}}}},"4":{"docs":{},".":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":2.0098039215686274}}}},"5":{"docs":{},".":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":1.4370460048426148}}}},"6":{"docs":{},".":{"docs":{"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":1.5535714285714284}}}},"7":{"docs":{},".":{"docs":{"107.-binary-tree-level-order-traversal-ii.html":{"ref":"107.-binary-tree-level-order-traversal-ii.html","tf":1.5535714285714284}}}},"8":{"docs":{},".":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":1.4363233665559245}}}},"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.023076923076923078}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":2.5049019607843137}}},",":{"9":{"docs":{},",":{"2":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}},"docs":{}}}}}}},"生":{"docs":{},"成":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"利":{"docs":{},"用":{"5":{"docs":{},"当":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"1":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}},"]":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},"^":{"9":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"docs":{}}},"1":{"0":{"0":{"0":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.029411764705882353}}},"docs":{}},"1":{"0":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}},"docs":{}},"docs":{},".":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":2.5072463768115942}}}},"1":{"1":{"0":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}},"docs":{}},"docs":{},".":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":2.0072463768115942}}}},"2":{"docs":{},".":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":3.340909090909091}}}},"3":{"docs":{},".":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":2.506849315068493}}}},"4":{"docs":{},".":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":1.6748633879781418}}}},"5":{"docs":{},".":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":3.338951310861423}}}},"8":{"docs":{},".":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":3.3466666666666662}}}},"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}},",":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},".":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":3.346153846153846}}},")":{"docs":{},".":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}},")":{"docs":{},")":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775}}}}},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"2":{"0":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}},".":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":5.012820512820513}}}},"1":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.030612244897959183}},".":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":1.675213675213675}}}},"2":{"3":{"docs":{},".":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":2.505434782608696}}}},"docs":{},".":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":1.4343853820598005}}}},"3":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.023809523809523808}},".":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":1.4343853820598005},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}},"4":{"docs":{},".":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":1.6805555555555554}}}},"7":{"docs":{},".":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":3.339147286821705}}}},"8":{"docs":{},".":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":2.5123456790123457}}}},"9":{"docs":{},".":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":2.004}}}},"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},".":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"3":{"0":{"docs":{},".":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":3.341333333333333}}}},"1":{"docs":{},".":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":3.3494623655913975}}}},"2":{"docs":{},".":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":2.5125}}},")":{"docs":{},")":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"3":{"docs":{},".":{"docs":{"133.-Clone-Graph.html":{"ref":"133.-Clone-Graph.html","tf":3.6666666666666665}}}},"4":{"docs":{},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":3.336391437308868}}}},"5":{"docs":{},".":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":5.009433962264151}}}},"6":{"docs":{},".":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":3.3487179487179484}}}},"7":{"docs":{},".":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":2.511904761904762}}}},"9":{"docs":{},".":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":3.340909090909091}}}},"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},".":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"4":{"0":{"docs":{},".":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":2.5057471264367814}}}},"1":{"docs":{},".":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":2.5058479532163744}}}},"2":{"docs":{},".":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":2.0059171597633134}}}},"3":{"docs":{},".":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":3.341145833333333}}}},"4":{"docs":{},".":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":2.0063694267515926}}}},"5":{"docs":{},".":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":2.0093457943925235}}}},"7":{"docs":{},".":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":2.504201680672269}}}},"8":{"docs":{},".":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":3.3400900900900896}}}},"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},".":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":2.514705882352941}}},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"5":{"0":{"docs":{},".":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":2.00561797752809}}}},"1":{"docs":{},".":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":2.5074626865671643}}}},"2":{"docs":{},".":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":2.5142857142857142}}}},"3":{"docs":{},".":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":1.6809523809523808}}}},"4":{"docs":{},".":{"docs":{"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":1.4401993355481726}}}},"5":{"docs":{},".":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":3.341463414634146}}}},"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}},"]":{"docs":{},",":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},".":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":5.01}}},",":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}},"6":{"0":{"docs":{},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":2.0025906735751295}}}},"4":{"docs":{},".":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":3.3430420711974107}}}},"9":{"docs":{},".":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":3.345833333333333}}}},"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.03508771929824561}},".":{"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":5.037037037037037}}}}}},"docs":{}},",":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"7":{"9":{"docs":{},".":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":3.347222222222222}}}},"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}},".":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":2.01010101010101}}},")":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.028089887640449437}}},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"8":{"1":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"7":{"docs":{},".":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":2.5120481927710845}}}},"8":{"docs":{},".":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":1.4347063978965817}}}},"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}},".":{"docs":{"18.-4sum.html":{"ref":"18.-4sum.html","tf":5.045454545454546}}}},"9":{"9":{"docs":{},".":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":1.6734234234234233}}}},"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}},".":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":1.6746031746031744}}},"]":{"docs":{},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}},"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.0392156862745098},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.02830188679245283},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.023622047244094488},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.025477707006369428},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.021052631578947368},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.0761904761904762},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.026785714285714284},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.04040404040404041},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.024},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.03614457831325301},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.07228915662650602},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.025157232704402517},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.05925925925925926},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.01744186046511628},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.01744186046511628},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.02},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.025},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.009174311926605505},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.03125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.02027027027027027},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.024793388429752067},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.15294117647058825},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.030864197530864196},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.03508771929824561},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.06707317073170732},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.020618556701030927},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.016597510373443983},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.021739130434782608}},".":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":3.343537414965986},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.009174311926605505},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471}}},"]":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},".":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}},",":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}},")":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}},";":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}},"{":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}},")":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}},"docs":{}}}},":":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}},"docs":{}},"=":{"docs":{},"t":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}},"=":{"docs":{},"t":{"docs":{},"[":{"docs":{},"j":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}}}}}}},";":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}},"j":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}},"]":{"docs":{},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}},")":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}}},"{":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}},"!":{"docs":{},"个":{"docs":{},"。":{"docs":{},"同":{"docs":{},"理":{"docs":{},"可":{"docs":{},"以":{"docs":{},"退":{"docs":{},"出":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"排":{"docs":{},"列":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"我":{"docs":{},"们":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"确":{"docs":{},"定":{"docs":{},"的":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"利":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"一":{"docs":{},"直":{"docs":{},"将":{"docs":{},"数":{"docs":{},"字":{"docs":{},"推":{"docs":{},"出":{"docs":{},"。":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},":":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"]":{"docs":{},".":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}},"，":{"docs":{},"就":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"0":{"docs":{},"。":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}},"docs":{}}}}},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"平":{"docs":{},"均":{"docs":{},"的":{"docs":{},"g":{"docs":{},"a":{"docs":{},"p":{"docs":{},"。":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"的":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"令":{"docs":{},"这":{"docs":{},"个":{"docs":{},"值":{"docs":{},"为":{"docs":{},"桶":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"。":{"docs":{},"桶":{"docs":{},"里":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"直":{"docs":{},"接":{"docs":{},"的":{"docs":{},"差":{"docs":{},"值":{"docs":{},"我":{"docs":{},"们":{"docs":{},"是":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"记":{"docs":{},"录":{"docs":{},"的":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"记":{"docs":{},"录":{"docs":{},"桶":{"docs":{},"直":{"docs":{},"接":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"差":{"docs":{},"值":{"docs":{},"。":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"它":{"docs":{},"的":{"docs":{},"子":{"docs":{},"树":{"docs":{},"就":{"docs":{},"是":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}},";":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.03636363636363636},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.02857142857142857},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"j":{"docs":{},"=":{"docs":{},"y":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}},"docs":{}}}}},"i":{"docs":{},">":{"0":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}},"docs":{}}}},",":{"0":{"docs":{},"}":{"docs":{},"}":{"docs":{},";":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}}},"1":{"docs":{},"]":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516}}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}},"]":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}},"3":{"1":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"docs":{}}},"docs":{}}},"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"docs":{}}},"3":{"docs":{},",":{"2":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"5":{"docs":{},",":{"1":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"docs":{}}},"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.06},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.022727272727272728},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.020618556701030927}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}},"docs":{}}}}}},"e":{"docs":{},"s":{"docs":{},"=":{"docs":{},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}}}}}},"j":{"docs":{},",":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}},"docs":{}}}}}},"=":{"0":{"docs":{},";":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"docs":{},"n":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}},"docs":{}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}},"i":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}},"docs":{}}}},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"这":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"要":{"docs":{},"单":{"docs":{},"独":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"下":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}}}}}}}}}},"/":{"2":{"2":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}},"docs":{}},"4":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}},"docs":{}},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"就":{"docs":{},"会":{"docs":{},"变":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}},"}":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},"{":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}},";":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}},"}":{"docs":{},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}},"→":{"3":{"docs":{},"→":{"1":{"docs":{},"→":{"1":{"docs":{},"→":{"1":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},"l":{"2":{"docs":{},"→":{"docs":{},"l":{"docs":{},"n":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}},"docs":{},"n":{"docs":{},",":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}},"'":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}},"s":{"docs":{},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"，":{"docs":{},"每":{"docs":{},"当":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"就":{"docs":{},"要":{"docs":{},"改":{"docs":{},"变":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"g":{"docs":{},"i":{"docs":{},"h":{"docs":{},"t":{"docs":{},"，":{"docs":{},"当":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"1":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"改":{"docs":{},"变":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"和":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"具":{"docs":{},"体":{"docs":{},"行":{"docs":{},"为":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"代":{"docs":{},"码":{"docs":{},"理":{"docs":{},"解":{"docs":{},"。":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"他":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"和":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"完":{"docs":{},"美":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"这":{"docs":{},"个":{"docs":{},"完":{"docs":{},"美":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"计":{"docs":{},"算":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"树":{"docs":{},"递":{"docs":{},"归":{"docs":{},"调":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"。":{"docs":{},"直":{"docs":{},"到":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"²":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.01652892561983471}}},"?":{"0":{"docs":{},":":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}},"docs":{},"(":{"1":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}},"docs":{}}},"\"":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},"次":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"队":{"docs":{},"列":{"docs":{},"头":{"docs":{},"就":{"docs":{},"是":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"队":{"docs":{},"列":{"docs":{},"尾":{"docs":{},"了":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"进":{"docs":{},"队":{"docs":{},"列":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"将":{"docs":{},"队":{"docs":{},"列":{"docs":{},"头":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"到":{"docs":{},"队":{"docs":{},"列":{"docs":{},"尾":{"docs":{},"。":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}},"+":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}}}},"2":{"0":{"0":{"docs":{},",":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}},".":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":3.3431372549019605}}}},"1":{"9":{"docs":{},".":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}},"/":{"1":{"0":{"docs":{},"/":{"1":{"6":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},".":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":2.522727272727273}}}},"2":{"docs":{},".":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":3.3415977961432506}}}},"4":{"docs":{},".":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":3.348958333333333}}}},"5":{"docs":{},".":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":3.343537414965986}}}},"7":{"docs":{},".":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":3.3415977961432506}}}},"9":{"docs":{},".":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":2.0098039215686274}}}},"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}},".":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":3.3422619047619047}}},"]":{"docs":{},",":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818}}}},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"1":{"1":{"docs":{},".":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":1.4437229437229435}}}},"2":{"docs":{},".":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":2.5037735849056606}}}},"4":{"7":{"4":{"8":{"3":{"6":{"4":{"9":{"docs":{},";":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},".":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":3.348039215686274}}}},"6":{"docs":{},".":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":2.5091743119266057}}}},"7":{"docs":{},".":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":3.345238095238095}}}},"8":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}},"9":{"docs":{},".":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":2.5103092783505154}}}},"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}},".":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":2.009433962264151}}},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"2":{"0":{"docs":{},".":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":2.509009009009009}}}},"1":{"docs":{},".":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":3.345098039215686}}}},"2":{"docs":{},".":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":2.00625}}}},"3":{"docs":{},".":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":3.341333333333333}}}},"4":{"docs":{},".":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":3.3409669211195925}}}},"5":{"docs":{},".":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":2.0045871559633026}}}},"6":{"docs":{},".":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":2.507042253521127}}}},"9":{"docs":{},".":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":2.508771929824561}}}},"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775}},".":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":3.3468468468468466},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}},",":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}},"]":{"docs":{},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}},"3":{"0":{"docs":{},".":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":2.006172839506173}}}},"1":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}},".":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":3.350877192982456}}}},"2":{"docs":{},".":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":2.0045662100456623}}}},"4":{"docs":{},".":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":2.5095238095238095}}}},"5":{"docs":{},".":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":1.4339477726574499}}}},"6":{"docs":{},".":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":1.6726190476190474}}}},"8":{"docs":{},".":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":2.0126582278481013}}}},"9":{"docs":{},".":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":2.5060975609756095}}}},"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}},".":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":2.0078740157480315}}},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"4":{"0":{"docs":{},".":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":2.010204081632653}}}},"1":{"docs":{},".":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":2.0076923076923077}}}},"docs":{},".":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":2.511111111111111}}},"]":{"docs":{},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}},"5":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},".":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}},"6":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}},")":{"docs":{},",":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"7":{"docs":{},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":3.338514680483592}}}},"8":{"docs":{},".":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":3.3424242424242423}}}},"9":{"docs":{},".":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":2.5112359550561796}}}},"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0375},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.031578947368421054},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.039473684210526314},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.05714285714285714},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.03225806451612903},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.030120481927710843},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.060240963855421686},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.025157232704402517},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.044444444444444446},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.02962962962962963},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.012232415902140673},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.04294478527607362},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.022900763358778626},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.029045643153526972},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.016304347826086956}},".":{"0":{"0":{"0":{"0":{"0":{"docs":{},",":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.025}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"1":{"0":{"0":{"0":{"0":{"docs":{},",":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"8":{"2":{"8":{"4":{"2":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":2.5083333333333333},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}},":":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},";":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}},"i":{"docs":{},">":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}},"1":{"docs":{},";":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}},"docs":{}}}}},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"找":{"docs":{},"到":{"docs":{},"中":{"docs":{},"间":{"docs":{},"夹":{"docs":{},"着":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"分":{"docs":{},"布":{"docs":{},"的":{"docs":{},"。":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}},",":{"0":{"docs":{},",":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}},"1":{"docs":{},",":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}},"4":{"docs":{},"]":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}},"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.020618556701030927},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}}},"]":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},")":{"docs":{},"{":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}},"相":{"docs":{},"比":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"大":{"docs":{},"于":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"当":{"docs":{},"前":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"要":{"docs":{},"加":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"等":{"docs":{},"于":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"那":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"就":{"docs":{},"是":{"docs":{},"前":{"docs":{},"面":{"docs":{},"已":{"docs":{},"经":{"docs":{},"放":{"docs":{},"置":{"docs":{},"了":{"docs":{},"两":{"docs":{},"个":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"再":{"docs":{},"写":{"docs":{},"了":{"docs":{},"。":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.02586206896551724},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":2.5090909090909093},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":2.010204081632653},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},"'":{"docs":{},"s":{"docs":{},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}},".":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}},")":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}},"展":{"docs":{},"示":{"docs":{},"的":{"docs":{},"那":{"docs":{},"样":{"docs":{},"，":{"docs":{},"一":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"还":{"docs":{},"是":{"docs":{},"以":{"docs":{},"第":{"docs":{},"一":{"docs":{},"题":{"docs":{},"（":{"docs":{},"一":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"）":{"docs":{},"，":{"docs":{},"为":{"docs":{},"基":{"docs":{},"础":{"docs":{},"解":{"docs":{},"此":{"docs":{},"题":{"docs":{},"。":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"→":{"docs":{},"…":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}},"²":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}},"h":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}},"^":{"0":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}},"4":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}},"docs":{}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"+":{"1":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},".":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}},"2":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},"docs":{}}}}}}}}},"3":{"0":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},",":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818}}},"]":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"1":{"docs":{},".":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":3.3406862745098036}}}},"2":{"1":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.023809523809523808}}},"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.023809523809523808},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},".":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":2.5086206896551726}}}},"3":{"docs":{},".":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":2.0113636363636362}}}},"4":{"2":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}},"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},".":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":1.2584745762711864},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},",":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"5":{"docs":{},".":{"docs":{"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":2.5384615384615383}}}},"6":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}},".":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":3.3397027600849256}}}},"9":{"docs":{},".":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":3.3397027600849256}}}},"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.019801980198019802},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.033707865168539325},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.02631578947368421},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.02608695652173913},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.021505376344086023},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.03614457831325301},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.07228915662650602},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.025157232704402517},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.014814814814814815},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.02962962962962963},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.021739130434782608},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.03363914373088685},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.024691358024691357},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.10365853658536585},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.024896265560165973}},")":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775}},",":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}},"+":{"docs":{},"(":{"6":{"docs":{},"+":{"8":{"docs":{},")":{"docs":{},"\"":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}},"docs":{}}},"docs":{}}}},".":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":1.6963696369636962},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.009174311926605505},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}},":":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":5.01}}}}},",":{"0":{"docs":{},",":{"5":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}},"5":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}},"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.024691358024691357},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.016},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.030927835051546393},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"x":{"3":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}},"docs":{}},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}}}}}}}},"]":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}}}},"4":{"0":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},".":{"docs":{"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":2.5123456790123457},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}},"1":{"docs":{},".":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":2.5161290322580645}}}},"2":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}},".":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":2.512987012987013}}}},"4":{"docs":{},".":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":3.3397027600849256}}}},"5":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},".":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":2.513157894736842}}}},"6":{"5":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}},"docs":{},".":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":5.011111111111111}}}},"7":{"docs":{},".":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":3.3470319634703194}}}},"8":{"docs":{},".":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":3.3419540229885056}}}},"9":{"1":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},".":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}},"5":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},".":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}},"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}},".":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":3.349206349206349}}}},"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.021052631578947368},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.015151515151515152},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.01744186046511628},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.016},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.03058103975535168},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.03125},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},")":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}},",":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}},")":{"docs":{},"*":{"5":{"docs":{},")":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"docs":{}}},"*":{"5":{"docs":{},")":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},")":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}},"docs":{}}},":":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},"]":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}},",":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}},".":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"都":{"docs":{},"是":{"docs":{},"代":{"docs":{},"表":{"3":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"每":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"通":{"docs":{},"量":{"docs":{},"就":{"docs":{},"是":{"3":{"docs":{},"个":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"输":{"docs":{},"入":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"18.-4sum.html":{"ref":"18.-4sum.html","tf":5.045454545454546}}}}},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.030927835051546393}}},"当":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"来":{"docs":{},"避":{"docs":{},"免":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"。":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"当":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"用":{"6":{"docs":{},"当":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"会":{"docs":{},"碰":{"docs":{},"到":{"1":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"*":{"5":{"docs":{},"\"":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"docs":{}}},"5":{"0":{"docs":{},".":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":3.345833333333333}}},"]":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818}}}},"1":{"docs":{},".":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":3.3416666666666663}}}},"2":{"docs":{},".":{"docs":{"52.-n-queens-ii.html":{"ref":"52.-n-queens-ii.html","tf":2.7}}}},"3":{"docs":{},".":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":3.345833333333333}}}},"4":{"docs":{},".":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":3.343234323432343}}}},"5":{"docs":{},".":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":3.3446969696969693}}}},"6":{"docs":{},".":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":3.342342342342342}}}},"7":{"docs":{},".":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":3.3416666666666663}}}},"9":{"docs":{},".":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":2.513157894736842}}}},"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.024096385542168676},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.015151515151515152},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.023255813953488372},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.033707865168539325},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.017857142857142856},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.036585365853658534},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.030927835051546393},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.016597510373443983}},".":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":2.5126582278481013},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},":":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}},"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.017857142857142856},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612}}},"]":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},")":{"docs":{},",":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}},")":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"6":{"0":{"docs":{},".":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":3.3466666666666662}}}},"1":{"docs":{},".":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":3.3385964912280697}}}},"2":{"docs":{},".":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":3.342028985507246}}}},"3":{"docs":{},".":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":2.5088495575221237}}}},"4":{"docs":{},".":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":2.515873015873016}}}},"5":{"4":{"docs":{},".":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":2.50990099009901}}}},"7":{"docs":{},".":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":2.5076923076923077}}}},"9":{"docs":{},".":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":2.0103092783505154}}}},"docs":{}},"6":{"2":{"docs":{},".":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":2.004149377593361}}}},"docs":{}},"7":{"docs":{},".":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":3.346320346320346}}}},"8":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}},"9":{"docs":{},".":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":5.0131578947368425}}}},"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.025974025974025976},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.036585365853658534},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.021739130434782608}},".":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":3.3416666666666663},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},")":{"docs":{},",":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}},".":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}},"²":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}},"]":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}},"7":{"0":{"docs":{},".":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":3.3428571428571425}}}},"2":{"docs":{},".":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":3.341085271317829}}}},"3":{"docs":{},".":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":2.5140845070422535}}}},"4":{"docs":{},".":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":2.5090909090909093}}}},"5":{"docs":{},".":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":3.342767295597484}}}},"6":{"docs":{},".":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":2.5106382978723403}}}},"7":{"docs":{},".":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":5.013888888888889}}}},"8":{"docs":{},".":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":5.013888888888889}}}},"9":{"docs":{},".":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":3.3398268398268396}}}},"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.036585365853658534},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},"]":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},".":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":3.345238095238095},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"]":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818}}}}},"8":{"0":{"7":{"docs":{},".":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}},"docs":{},".":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":1.6723484848484846}}}},"1":{"docs":{},".":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":1.6771929824561402}}}},"2":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}},".":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":1.675595238095238}}}},"3":{"docs":{},".":{"docs":{"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":2.01010101010101}}}},"4":{"docs":{},".":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":2.512987012987013}}}},"5":{"docs":{},".":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":3.3476190476190473}}}},"6":{"docs":{},".":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":3.340852130325814}}}},"7":{"docs":{},".":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":3.339506172839506}}}},"8":{"docs":{},".":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":2.510752688172043}}}},"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},"'":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}},".":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}},"docs":{}},"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},"]":{"docs":{},",":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"²":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.01652892561983471}}}},"9":{"0":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}},".":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":3.3448275862068964}}},"%":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}},"1":{"docs":{},".":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":3.344086021505376}}}},"2":{"docs":{},".":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":2.008}}}},"3":{"docs":{},".":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":2.522727272727273}}}},"4":{"docs":{},".":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":2.005291005291005}}}},"5":{"docs":{},".":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":1.6726907630522088}}}},"6":{"docs":{},".":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":2.0120481927710845}}}},"7":{"docs":{},".":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":3.3468468468468466}}}},"8":{"docs":{},".":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":2.006802721088435}}}},"9":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}},".":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":2.006289308176101}}}},"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.03184713375796178},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},",":{"1":{"0":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}},"docs":{}},"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},".":{"2":{"6":{"1":{"0":{"0":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":3.343537414965986}}},"x":{"9":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}},".":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}},"docs":{}},"]":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"²":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}},"docs":{},"g":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.018518518518518517},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"地":{"docs":{},"址":{"docs":{},"：":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"k":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"z":{"docs":{},"h":{"docs":{},"u":{"docs":{},"g":{"docs":{},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},".":{"docs":{},"i":{"docs":{},"o":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"/":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}},"n":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.023809523809523808},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.02702702702702703},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.022222222222222223},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.02586206896551724},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.04},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.025974025974025976},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.024096385542168676},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.0196078431372549},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.015503875968992248},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.021739130434782608},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.022727272727272728},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.02054794520547945},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0234375},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.017857142857142856},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"?":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":3.3603603603603602},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}}}}},"(":{"1":{"docs":{},",":{"docs":{},"n":{"docs":{},",":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}},"t":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}}}}},"r":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}},"e":{"docs":{},"r":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}}},"i":{"docs":{},"d":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.02654867256637168},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549}},".":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}},"s":{"docs":{},".":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}},")":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}},"[":{"docs":{},"x":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}},"y":{"docs":{},"]":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":3.3650793650793647},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}},"w":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"133.-Clone-Graph.html":{"ref":"133.-Clone-Graph.html","tf":3.6666666666666665},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471}},"i":{"docs":{},"c":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}},"a":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":3.370030581039755}},"m":{"docs":{},"e":{"2":{"docs":{},"类":{"docs":{},"似":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"不":{"docs":{},"限":{"docs":{},"制":{"docs":{},"你":{"docs":{},"跳":{"docs":{},"跃":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"每":{"docs":{},"次":{"docs":{},"记":{"docs":{},"录":{"docs":{},"能":{"docs":{},"达":{"docs":{},"到":{"docs":{},"的":{"docs":{},"最":{"docs":{},"远":{"docs":{},"距":{"docs":{},"离":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"循":{"docs":{},"环":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"更":{"docs":{},"新":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"更":{"docs":{},"新":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"和":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"只":{"docs":{},"能":{"docs":{},"跳":{"docs":{},"到":{"docs":{},"这":{"docs":{},"里":{"docs":{},"了":{"docs":{},"，":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":2.513157894736842},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":3.3446969696969693}}}},"s":{"docs":{},",":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}},"i":{"docs":{},"]":{"docs":{},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}}}}}}}},"p":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":3.3430420711974107}}}},"o":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}},"a":{"docs":{},"l":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105}}}},"o":{"docs":{},"d":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358}}},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}},",":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}},"r":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.018518518518518517},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"e":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}},"a":{"docs":{},"d":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.030612244897959183},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.015544041450777202},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}},"m":{"docs":{},"e":{"docs":{},".":{"docs":{},"m":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":10.125}}}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176}}}}}}},"c":{"docs":{},"h":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.039473684210526314},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.025974025974025976},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.028},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}},".":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":1.6864686468646863},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.014705882352941176},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":2.5240963855421685},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.01910828025477707}}},",":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.02040816326530612}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.05},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.019801980198019802},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.03571428571428571},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.04411764705882353},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.030303030303030304},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.03571428571428571},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.05660377358490566},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.02702702702702703},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.031496062992125984},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.044444444444444446},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.04145077720207254},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.045454545454545456},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.044444444444444446},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0273972602739726},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.0297029702970297},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.021052631578947368},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.039473684210526314},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.027777777777777776},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.07142857142857142},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.045454545454545456},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.026785714285714284},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.02857142857142857},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.034482758620689655},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.021164021164021163},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.030120481927710843},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.022222222222222223},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.02962962962962963},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.023255813953488372},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.022641509433962263},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.029411764705882353},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.03389830508474576},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.023255813953488372},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.050724637681159424},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.036231884057971016},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.03787878787878788},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.02666666666666667},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.020833333333333332},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.029069767441860465},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.012},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.03225806451612903},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0375},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.012232415902140673},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.022727272727272728},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.022988505747126436},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.023668639053254437},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.025477707006369428},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.018691588785046728},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.060810810810810814},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.024390243902439025},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.018134715025906734},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.027777777777777776},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.02702702702702703},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.03305785123966942},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.029411764705882353},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.029411764705882353},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.047619047619047616},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.03529411764705882},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.04128440366972477},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.02112676056338028},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.024691358024691357},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0410958904109589},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.023809523809523808},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.039603960396039604},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":2.5384615384615383},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.016597510373443983},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.02717391304347826}},";":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.02054794520547945},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421}}}}},":":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}},"s":{"docs":{},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}},"s":{"docs":{},";":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.030303030303030304},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.02702702702702703},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.044444444444444446},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0273972602739726},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.031746031746031744},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.027777777777777776},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.034482758620689655},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.031746031746031744},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.012048192771084338},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.022641509433962263},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.04},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.013888888888888888},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.03225806451612903},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.03184713375796178},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.018691588785046728},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.025},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.027777777777777776},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.02702702702702703},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.011320754716981131},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.02631578947368421},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}}},"=":{"0":{"docs":{},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"=":{"1":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}},"docs":{}}}}}}}},"docs":{}}}}}}},"1":{"docs":{},";":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}},"2":{"docs":{},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}}},"docs":{}}},";":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"i":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}},"e":{"docs":{},"s":{"docs":{},"*":{"docs":{},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},"\"":{"docs":{},";":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{},"b":{"docs":{},"l":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}},"{":{"docs":{},"{":{"docs":{},"}":{"docs":{},"}":{"docs":{},";":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},";":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}},"a":{"docs":{},"x":{"docs":{},";":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"?":{"0":{"docs":{},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}},"docs":{}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}},")":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}},"x":{"docs":{},"%":{"1":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}},"docs":{}},"docs":{}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}},")":{"docs":{},";":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.022988505747126436},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.02666666666666667},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}},"2":{"docs":{},")":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}},"docs":{}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}}}}},")":{"docs":{},";":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}}}},"o":{"docs":{},"w":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.012738853503184714}}}}},"m":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}}}}},"{":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}}}},"docs":{}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.021164021164021163},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}},")":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}},"v":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.011320754716981131}}}}}},"p":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"*":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}},"+":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}},"docs":{}}},"docs":{}}}}}}}},"(":{"1":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}},"docs":{}},"2":{"docs":{},",":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}},"docs":{},"n":{"docs":{},"r":{"docs":{},"*":{"docs":{},"n":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}}}},",":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}},"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}}},"docs":{}}}}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}}}},"docs":{}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}}}},"docs":{}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"=":{"1":{"docs":{},";":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"=":{"1":{"docs":{},";":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}},"docs":{}}}},"docs":{}}}}}}},"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}}},"1":{"docs":{},"]":{"docs":{},"=":{"1":{"docs":{},";":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},"=":{"2":{"docs":{},";":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}}},"docs":{}}}},"docs":{}}}}}}},"docs":{}}}},"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{},"=":{"docs":{},"x":{"docs":{},"%":{"1":{"0":{"docs":{},";":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}},"docs":{}},"docs":{}}}}}}}}}},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"=":{"docs":{},"'":{"1":{"docs":{},"'":{"docs":{},";":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}},"docs":{}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}}},"docs":{}},"]":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}},"&":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}},")":{"docs":{},";":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}},"{":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":2.5454545454545454}},"e":{"docs":{},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}}}}}}}}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}},"=":{"docs":{},"(":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"*":{"1":{"0":{"docs":{},"+":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}},"docs":{}},"docs":{}}}},"%":{"1":{"0":{"docs":{},")":{"docs":{},"*":{"docs":{},"(":{"docs":{},"a":{"docs":{},"%":{"1":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},";":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"*":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.015267175572519083}}}}}}}}}}}}},"^":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385}}}}}}}},"*":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":3.3690476190476186},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":2.016},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":2.0112359550561796},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":2.544776119402985}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}}}}}}}}},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":2.5098039215686274},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":3.365333333333333}},".":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":1.6904761904761902},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":3.343696027633851},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":1.678030303030303},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":1.675595238095238},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":2.01010101010101},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}},".":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":2.538961038961039},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":3.3619047619047615},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":3.365333333333333}}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}}}}},"o":{"docs":{},"v":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":2.0125786163522013}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}}}}}},"d":{"docs":{},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.02830188679245283}}},"u":{"docs":{},"c":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358}}}}},"l":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}},"+":{"docs":{},"=":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}}}},";":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}},"u":{"docs":{},"s":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.015151515151515152},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":3.364583333333333}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.0782608695652174},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.061946902654867256},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.031746031746031744},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.02040816326530612},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":1.6801801801801801},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253}}}}}}}}},",":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}},")":{"docs":{},"{":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},";":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}},":":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.031578947368421054}}},".":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}},"h":{"docs":{},")":{"docs":{},">":{"1":{"docs":{},")":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}},"docs":{}}},"=":{"docs":{},"i":{"docs":{},"s":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}},":":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}},";":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}},"o":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}},"w":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},"s":{"docs":{},":":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}},",":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},";":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}},".":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":2.022727272727273},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":3.376436781609195},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":3.375438596491228},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":1.7087719298245612},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":1.7095238095238094},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":1.463455149501661}},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"t":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.02608695652173913},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.02654867256637168},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":2.546153846153846}},"'":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"o":{"docs":{},"t":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.012048192771084338},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.015151515151515152},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.02054794520547945},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":2.044},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.018518518518518517},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.017857142857142856},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}},")":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.021164021164021163},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.012738853503184714},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"{":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}},"=":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.026455026455026454},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"?":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}},";":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.02112676056338028},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904}}},",":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}},".":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}},"r":{"docs":{},"s":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}}},"s":{"docs":{},"e":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"?":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}},"l":{"docs":{},"l":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":2.516304347826087}},".":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.02717391304347826}},")":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}},";":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"(":{"1":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"docs":{}}}}}}}},"s":{"docs":{},".":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":2.5454545454545454},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"e":{"docs":{},":":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}},"语":{"docs":{},"句":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"和":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}}}}}}}}}}}}}}}}},"k":{"docs":{},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}},"[":{"docs":{},"f":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"i":{"docs":{},"n":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":2.5259740259740258}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}},"s":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}},"b":{"docs":{},"b":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.016853932584269662}}}}}}},"t":{"docs":{},"e":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}},"u":{"docs":{},"n":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}},":":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288}}}}}},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},";":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288}}}}},"a":{"docs":{},"x":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}}}}}},"t":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}},"g":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}},"t":{"docs":{},"a":{"docs":{},"e":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}},"p":{"docs":{},"n":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}},";":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}},")":{"docs":{},";":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},":":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}},"我":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"做":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"做":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"做":{"docs":{},"了":{"docs":{},"一":{"docs":{},"些":{"docs":{},"简":{"docs":{},"单":{"docs":{},"题":{"docs":{},"，":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"就":{"docs":{},"算":{"docs":{},"做":{"docs":{},"不":{"docs":{},"出":{"docs":{},"也":{"docs":{},"能":{"docs":{},"看":{"docs":{},"懂":{"docs":{},"别":{"docs":{},"人":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"就":{"docs":{},"开":{"docs":{},"始":{"docs":{},"看":{"docs":{},"不":{"docs":{},"起":{"docs":{},"简":{"docs":{},"单":{"docs":{},"题":{"docs":{},"。":{"docs":{},"慢":{"docs":{},"慢":{"docs":{},"的":{"docs":{},"，":{"docs":{},"后":{"docs":{},"面":{"docs":{},"只":{"docs":{},"做":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"级":{"docs":{},"别":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"级":{"docs":{},"别":{"docs":{},"确":{"docs":{},"实":{"docs":{},"很":{"docs":{},"难":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"很":{"docs":{},"久":{"docs":{},"时":{"docs":{},"间":{"docs":{},"。":{"docs":{},"做":{"docs":{},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"题":{"docs":{},"目":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"自":{"docs":{},"己":{"docs":{},"前":{"docs":{},"面":{"docs":{},"做":{"docs":{},"的":{"docs":{},"已":{"docs":{},"经":{"docs":{},"忘":{"docs":{},"了":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"：":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}},"次":{"docs":{},"做":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"认":{"docs":{},"为":{"docs":{},"这":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"定":{"docs":{},"义":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"三":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"用":{"docs":{},"类":{"docs":{},"似":{"docs":{},"做":{"docs":{},"最":{"docs":{},"长":{"docs":{},"增":{"docs":{},"长":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"。":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"控":{"docs":{},"制":{"docs":{},"的":{"docs":{},"还":{"docs":{},"不":{"docs":{},"错":{"docs":{},"了":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"需":{"docs":{},"要":{"docs":{},"的":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"用":{"docs":{},"优":{"docs":{},"先":{"docs":{},"队":{"docs":{},"列":{"docs":{},"来":{"docs":{},"做":{"docs":{},"的":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}}}}},"描":{"docs":{},"述":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"好":{"docs":{},"懂":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"看":{"docs":{},"这":{"docs":{},"个":{"docs":{},"网":{"docs":{},"站":{"docs":{},"的":{"docs":{},"例":{"docs":{},"子":{"docs":{},":":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"a":{"docs":{},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"/":{"docs":{},"k":{"docs":{},"m":{"docs":{},"p":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"们":{"docs":{},"通":{"docs":{},"过":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"法":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"排":{"docs":{},"列":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"太":{"docs":{},"慢":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"排":{"docs":{},"列":{"docs":{},"直":{"docs":{},"接":{"docs":{},"明":{"docs":{},"显":{"docs":{},"有":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"规":{"docs":{},"律":{"docs":{},"。":{"docs":{},"查":{"docs":{},"询":{"docs":{},"维":{"docs":{},"基":{"docs":{},"百":{"docs":{},"科":{"docs":{},"可":{"docs":{},"以":{"docs":{},"知":{"docs":{},"道":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"排":{"docs":{},"列":{"docs":{},"的":{"docs":{},"定":{"docs":{},"义":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"当":{"docs":{},"前":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"上":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"则":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},"=":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"先":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"从":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"自":{"docs":{},"己":{"docs":{},"写":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"双":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"记":{"docs":{},"录":{"docs":{},"之":{"docs":{},"前":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"好":{"docs":{},"的":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"记":{"docs":{},"录":{"docs":{},"左":{"docs":{},"右":{"docs":{},"括":{"docs":{},"号":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"后":{"docs":{},"面":{"docs":{},"看":{"docs":{},"了":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"发":{"docs":{},"现":{"docs":{},"其":{"docs":{},"实":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"就":{"docs":{},"行":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"直":{"docs":{},"接":{"docs":{},"一":{"docs":{},"次":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"完":{"docs":{},"当":{"docs":{},"前":{"docs":{},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"右":{"docs":{},"括":{"docs":{},"号":{"docs":{},"没":{"docs":{},"多":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"右":{"docs":{},"括":{"docs":{},"号":{"docs":{},"多":{"docs":{},"了":{"docs":{},"，":{"docs":{},"就":{"docs":{},"改":{"docs":{},"变":{"docs":{},"一":{"docs":{},"下":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"其":{"docs":{},"实":{"docs":{},"一":{"docs":{},"点":{"docs":{},"都":{"docs":{},"不":{"docs":{},"陌":{"docs":{},"生":{"docs":{},"。":{"docs":{},"大":{"docs":{},"一":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"学":{"docs":{},"习":{"docs":{},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"设":{"docs":{},"计":{"docs":{},"课":{"docs":{},"，":{"docs":{},"就":{"docs":{},"有":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"。":{"docs":{},"说":{"docs":{},"实":{"docs":{},"话":{"docs":{},"，":{"docs":{},"就":{"docs":{},"用":{"docs":{},"死":{"docs":{},"方":{"docs":{},"法":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"能":{"docs":{},"做":{"docs":{},"出":{"docs":{},"来":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"很":{"docs":{},"多":{"docs":{},"冗":{"docs":{},"余":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"条":{"docs":{},"件":{"docs":{},"判":{"docs":{},"断":{"docs":{},"。":{"docs":{},"我":{"docs":{},"记":{"docs":{},"得":{"docs":{},"我":{"docs":{},"当":{"docs":{},"时":{"docs":{},"用":{"4":{"docs":{},"个":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"变":{"docs":{},"量":{"docs":{},"确":{"docs":{},"定":{"docs":{},"行":{"docs":{},"动":{"docs":{},"方":{"docs":{},"向":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"4":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"定":{"docs":{},"义":{"docs":{},"行":{"docs":{},"动":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{},"我":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"做":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"好":{"docs":{},"像":{"docs":{},"也":{"docs":{},"是":{"docs":{},"这":{"docs":{},"么":{"docs":{},"做":{"docs":{},"的":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"我":{"docs":{},"第":{"docs":{},"三":{"docs":{},"次":{"docs":{},"做":{"docs":{},"题":{"docs":{},"我":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"我":{"docs":{},"不":{"docs":{},"可":{"docs":{},"能":{"docs":{},"还":{"docs":{},"用":{"docs":{},"这":{"docs":{},"中":{"docs":{},"办":{"docs":{},"法":{"docs":{},"。":{"docs":{},"于":{"docs":{},"是":{"docs":{},"我":{"docs":{},"看":{"docs":{},"了":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"确":{"docs":{},"实":{"docs":{},"有":{"docs":{},"很":{"docs":{},"好":{"docs":{},"地":{"docs":{},"办":{"docs":{},"法":{"docs":{},"。":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"定":{"docs":{},"义":{"docs":{},"当":{"docs":{},"前":{"docs":{},"行":{"docs":{},"动":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"模":{"4":{"docs":{},"就":{"docs":{},"能":{"docs":{},"得":{"docs":{},"出":{"docs":{},"行":{"docs":{},"动":{"docs":{},"的":{"docs":{},"当":{"docs":{},"前":{"docs":{},"方":{"docs":{},"向":{"docs":{},"。":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"模":{"2":{"docs":{},"就":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"是":{"docs":{},"左":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{},"还":{"docs":{},"是":{"docs":{},"上":{"docs":{},"下":{"docs":{},"移":{"docs":{},"动":{"docs":{},"。":{"docs":{},"左":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"下":{"docs":{},"一":{"docs":{},"次":{"docs":{},"左":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{},"就":{"docs":{},"要":{"docs":{},"减":{"docs":{},"一":{"docs":{},"。":{"docs":{},"再":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"移":{"docs":{},"动":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"保":{"docs":{},"存":{"docs":{},"能":{"docs":{},"够":{"docs":{},"左":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{},"和":{"docs":{},"上":{"docs":{},"下":{"docs":{},"移":{"docs":{},"动":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"算":{"docs":{},"法":{"docs":{},"就":{"docs":{},"省":{"docs":{},"去":{"docs":{},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"判":{"docs":{},"断":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"寻":{"docs":{},"思":{"docs":{},"c":{"docs":{},"p":{"docs":{},"p":{"docs":{},"程":{"docs":{},"序":{"docs":{},"员":{"docs":{},"应":{"docs":{},"该":{"docs":{},"也":{"docs":{},"行":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"数":{"docs":{},"组":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"这":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"运":{"docs":{},"行":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"大":{"docs":{},"小":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"原":{"docs":{},"始":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"在":{"docs":{},"原":{"docs":{},"始":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"上":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"新":{"docs":{},"开":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"然":{"docs":{},"后":{"docs":{},"开":{"docs":{},"始":{"docs":{},"第":{"docs":{},"二":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"这":{"docs":{},"次":{"docs":{},"我":{"docs":{},"每":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"都":{"docs":{},"会":{"docs":{},"去":{"docs":{},"做":{"docs":{},"。":{"docs":{},"很":{"docs":{},"多":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"y":{"docs":{},"的":{"docs":{},"题":{"docs":{},"，":{"docs":{},"做":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"档":{"docs":{},"速":{"docs":{},"度":{"docs":{},"其":{"docs":{},"实":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"容":{"docs":{},"易":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"很":{"docs":{},"多":{"docs":{},"题":{"docs":{},"当":{"docs":{},"你":{"docs":{},"把":{"docs":{},"你":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"从":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"平":{"docs":{},"方":{"docs":{},")":{"docs":{},"优":{"docs":{},"化":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"，":{"docs":{},"你":{"docs":{},"会":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"到":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"进":{"docs":{},"步":{"docs":{},"。":{"docs":{},"并":{"docs":{},"且":{"docs":{},"很":{"docs":{},"多":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"y":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"是":{"docs":{},"很":{"docs":{},"多":{"docs":{},"难":{"docs":{},"题":{"docs":{},"的":{"docs":{},"基":{"docs":{},"础":{"docs":{},"。":{"docs":{},"这":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"我":{"docs":{},"做":{"docs":{},"了":{"3":{"0":{"0":{"docs":{},"多":{"docs":{},"题":{"docs":{},"，":{"docs":{},"题":{"docs":{},"数":{"docs":{},"到":{"docs":{},"了":{"6":{"0":{"0":{"docs":{},"多":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"好":{"docs":{},"题":{"docs":{},"也":{"docs":{},"会":{"docs":{},"做":{"docs":{},"做":{"docs":{},"笔":{"docs":{},"记":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"之":{"docs":{},"后":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"自":{"docs":{},"己":{"docs":{},"做":{"docs":{},"题":{"docs":{},"能":{"docs":{},"力":{"docs":{},"提":{"docs":{},"升":{"docs":{},"很":{"docs":{},"快":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"去":{"docs":{},"看":{"docs":{},"了":{"docs":{},"一":{"docs":{},"下":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"，":{"docs":{},"真":{"docs":{},"的":{"docs":{},"是":{"docs":{},"发":{"docs":{},"现":{"docs":{},"每":{"docs":{},"次":{"docs":{},"看":{"docs":{},"都":{"docs":{},"会":{"docs":{},"发":{"docs":{},"现":{"docs":{},"很":{"docs":{},"意":{"docs":{},"想":{"docs":{},"不":{"docs":{},"到":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"在":{"docs":{},"上":{"docs":{},"面":{"docs":{},"得":{"docs":{},"到":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"最":{"docs":{},"低":{"docs":{},"成":{"docs":{},"本":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"的":{"docs":{},"最":{"docs":{},"高":{"docs":{},"利":{"docs":{},"润":{"docs":{},"，":{"docs":{},"每":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"都":{"docs":{},"记":{"docs":{},"录":{"docs":{},"。":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"将":{"docs":{},"数":{"docs":{},"字":{"docs":{},"放":{"docs":{},"入":{"docs":{},"桶":{"docs":{},"内":{"docs":{},"，":{"docs":{},"保":{"docs":{},"存":{"docs":{},"桶":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"再":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"次":{"docs":{},"桶":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"g":{"docs":{},"a":{"docs":{},"p":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"还":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"快":{"docs":{},"的":{"docs":{},"先":{"docs":{},"加":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"超":{"docs":{},"过":{"docs":{},"了":{"docs":{},"s":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"再":{"docs":{},"往":{"docs":{},"前":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"减":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"小":{"docs":{},"于":{"docs":{},"s":{"docs":{},"。":{"docs":{},"直":{"docs":{},"到":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"超":{"docs":{},"过":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"即":{"docs":{},"可":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"中":{"docs":{},"间":{"docs":{},"每":{"docs":{},"次":{"docs":{},"比":{"docs":{},"较":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"docs":{},"b":{"docs":{},"f":{"docs":{},"s":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"，":{"docs":{},"将":{"docs":{},"最":{"docs":{},"右":{"docs":{},"的":{"docs":{},"值":{"docs":{},"减":{"docs":{},"去":{"docs":{},"最":{"docs":{},"左":{"docs":{},"的":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"就":{"docs":{},"这":{"docs":{},"样":{"docs":{},"，":{"docs":{},"不":{"docs":{},"加":{"docs":{},"处":{"docs":{},"理":{"docs":{},"，":{"docs":{},"会":{"docs":{},"在":{"docs":{},"最":{"docs":{},"后":{"docs":{},"两":{"docs":{},"个":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"失":{"docs":{},"败":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"我":{"docs":{},"们":{"docs":{},"用":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"类":{"docs":{},"型":{"docs":{},"表":{"docs":{},"达":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"树":{"docs":{},"最":{"docs":{},"多":{"docs":{},"只":{"docs":{},"能":{"docs":{},"有":{"3":{"2":{"docs":{},"层":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"用":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"类":{"docs":{},"型":{"docs":{},"，":{"docs":{},"树":{"docs":{},"也":{"docs":{},"只":{"docs":{},"能":{"docs":{},"有":{"6":{"4":{"docs":{},"层":{"docs":{},"，":{"docs":{},"这":{"docs":{},"两":{"docs":{},"种":{"docs":{},"类":{"docs":{},"型":{"docs":{},"都":{"docs":{},"不":{"docs":{},"能":{"docs":{},"通":{"docs":{},"过":{"docs":{},"测":{"docs":{},"试":{"docs":{},"。":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"而":{"docs":{},"我":{"docs":{},"看":{"docs":{},"我":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"做":{"docs":{},"的":{"docs":{},"记":{"docs":{},"录":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"更":{"docs":{},"好":{"docs":{},"(":{"docs":{},"大":{"docs":{},"概":{"docs":{},"律":{"docs":{},"是":{"docs":{},"看":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"的":{"docs":{},")":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"不":{"docs":{},"是":{"docs":{},"记":{"docs":{},"录":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"记":{"docs":{},"录":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"跳":{"docs":{},"转":{"docs":{},"到":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"一":{"docs":{},"次":{"docs":{},"次":{"docs":{},"慢":{"docs":{},"慢":{"docs":{},"走":{"docs":{},"。":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"现":{"docs":{},"在":{"docs":{},"已":{"docs":{},"经":{"docs":{},"做":{"docs":{},"了":{"3":{"0":{"0":{"docs":{},"多":{"docs":{},"道":{"docs":{},"题":{"docs":{},"了":{"docs":{},"，":{"docs":{},"之":{"docs":{},"前":{"docs":{},"一":{"docs":{},"直":{"docs":{},"在":{"docs":{},"本":{"docs":{},"地":{"docs":{},"用":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"记":{"docs":{},"录":{"docs":{},"心":{"docs":{},"得":{"docs":{},"，":{"docs":{},"现":{"docs":{},"在":{"docs":{},"在":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"记":{"docs":{},"录":{"docs":{},"。":{"docs":{},"正":{"docs":{},"好":{"docs":{},"也":{"docs":{},"借":{"docs":{},"着":{"docs":{},"这":{"docs":{},"个":{"docs":{},"机":{"docs":{},"会":{"docs":{},"第":{"docs":{},"三":{"docs":{},"次":{"docs":{},"从":{"docs":{},"头":{"docs":{},"开":{"docs":{},"始":{"docs":{},"再":{"docs":{},"做":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"就":{"docs":{},"当":{"docs":{},"是":{"docs":{},"复":{"docs":{},"习":{"docs":{},"了":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}},"是":{"docs":{},"第":{"docs":{},"三":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"做":{"docs":{},"第":{"docs":{},"三":{"docs":{},"遍":{"docs":{},"的":{"docs":{},"原":{"docs":{},"因":{"docs":{},"一":{"docs":{},"是":{"docs":{},"做":{"docs":{},"了":{"3":{"0":{"0":{"docs":{},"多":{"docs":{},"题":{"docs":{},"了":{"docs":{},"，":{"docs":{},"该":{"docs":{},"回":{"docs":{},"头":{"docs":{},"复":{"docs":{},"习":{"docs":{},"一":{"docs":{},"下":{"docs":{},"了":{"docs":{},"。":{"docs":{},"二":{"docs":{},"是":{"docs":{},"找":{"docs":{},"到":{"docs":{},"了":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"这":{"docs":{},"个":{"docs":{},"很":{"docs":{},"好":{"docs":{},"的":{"docs":{},"平":{"docs":{},"台":{"docs":{},"可":{"docs":{},"以":{"docs":{},"记":{"docs":{},"录":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"，":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"上":{"docs":{},"面":{"docs":{},"提":{"docs":{},"出":{"docs":{},"的":{"docs":{},"需":{"docs":{},"求":{"docs":{},"，":{"docs":{},"选":{"docs":{},"取":{"docs":{},"合":{"docs":{},"适":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"来":{"docs":{},"解":{"docs":{},"题":{"docs":{},"。":{"docs":{},"在":{"docs":{},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"需":{"docs":{},"求":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"既":{"docs":{},"要":{"docs":{},"操":{"docs":{},"作":{"docs":{},"尾":{"docs":{},"端":{"docs":{},"（":{"docs":{},"剔":{"docs":{},"除":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"）":{"docs":{},"，":{"docs":{},"也":{"docs":{},"要":{"docs":{},"操":{"docs":{},"作":{"docs":{},"首":{"docs":{},"端":{"docs":{},"（":{"docs":{},"加":{"docs":{},"入":{"docs":{},"新":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"剔":{"docs":{},"除":{"docs":{},"比":{"docs":{},"他":{"docs":{},"小":{"docs":{},"的":{"docs":{},"数":{"docs":{},"）":{"docs":{},"。":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"都":{"docs":{},"是":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"有":{"docs":{},"链":{"docs":{},"表":{"docs":{},"和":{"docs":{},"双":{"docs":{},"端":{"docs":{},"队":{"docs":{},"列":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"用":{"docs":{},"双":{"docs":{},"端":{"docs":{},"队":{"docs":{},"列":{"docs":{},"实":{"docs":{},"现":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"还":{"docs":{},"有":{"docs":{},"个":{"docs":{},"做":{"docs":{},"题":{"docs":{},"的":{"docs":{},"技":{"docs":{},"巧":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"多":{"docs":{},"做":{"docs":{},"点":{"docs":{},"赞":{"docs":{},"数":{"docs":{},"高":{"docs":{},"的":{"docs":{},"题":{"docs":{},"，":{"docs":{},"要":{"docs":{},"是":{"docs":{},"差":{"docs":{},"评":{"docs":{},"比":{"docs":{},"点":{"docs":{},"赞":{"docs":{},"高":{"docs":{},"，":{"docs":{},"我":{"docs":{},"基":{"docs":{},"本":{"docs":{},"都":{"docs":{},"不":{"docs":{},"会":{"docs":{},"做":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"题":{"docs":{},"不":{"docs":{},"是":{"docs":{},"测":{"docs":{},"试":{"docs":{},"用":{"docs":{},"例":{"docs":{},"恶":{"docs":{},"心":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"题":{"docs":{},"目":{"docs":{},"没":{"docs":{},"有":{"docs":{},"意":{"docs":{},"义":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"有":{"docs":{},"时":{"docs":{},"候":{"docs":{},"我":{"docs":{},"会":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"一":{"docs":{},"两":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"种":{"docs":{},"思":{"docs":{},"路":{"docs":{},"利":{"docs":{},"用":{"docs":{},"异":{"docs":{},"或":{"docs":{},"的":{"docs":{},"特":{"docs":{},"性":{"docs":{},"。":{"docs":{},"异":{"docs":{},"或":{"docs":{},"两":{"docs":{},"次":{"docs":{},"回":{"docs":{},"到":{"docs":{},"原":{"docs":{},"值":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"经":{"docs":{},"历":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"之":{"docs":{},"后":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"这":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"异":{"docs":{},"或":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"之":{"docs":{},"后":{"docs":{},"回":{"docs":{},"来":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"再":{"docs":{},"异":{"docs":{},"或":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"就":{"docs":{},"能":{"docs":{},"恢":{"docs":{},"复":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"好":{"docs":{},"处":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"中":{"docs":{},"间":{"docs":{},"变":{"docs":{},"量":{"docs":{},"来":{"docs":{},"保":{"docs":{},"存":{"docs":{},"中":{"docs":{},"间":{"docs":{},"值":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"坏":{"docs":{},"处":{"docs":{},"就":{"docs":{},"是":{"docs":{},"异":{"docs":{},"或":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"值":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"对":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"程":{"docs":{},"序":{"docs":{},"产":{"docs":{},"生":{"docs":{},"影":{"docs":{},"响":{"docs":{},"，":{"docs":{},"我":{"docs":{},"当":{"docs":{},"时":{"docs":{},"就":{"docs":{},"是":{"docs":{},"用":{"docs":{},"这":{"docs":{},"种":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"到":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"样":{"docs":{},"例":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"失":{"docs":{},"败":{"docs":{},"了":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"换":{"docs":{},"了":{"docs":{},"第":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"我":{"docs":{},"做":{"docs":{},"完":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"解":{"docs":{},"法":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"有":{"docs":{},"人":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"排":{"docs":{},"序":{"docs":{},"解":{"docs":{},"法":{"docs":{},"做":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"，":{"docs":{},"竟":{"docs":{},"然":{"docs":{},"还":{"docs":{},"快":{"docs":{},"一":{"docs":{},"点":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"判":{"docs":{},"断":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"树":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}}}}}}},"那":{"docs":{},"句":{"docs":{},"话":{"docs":{},"，":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"要":{"docs":{},"不":{"docs":{},"就":{"docs":{},"是":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"，":{"docs":{},"还":{"docs":{},"不":{"docs":{},"就":{"docs":{},"是":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"（":{"docs":{},"k":{"docs":{},"m":{"docs":{},"p":{"docs":{},"，":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"）":{"docs":{},"，":{"docs":{},"再":{"docs":{},"就":{"docs":{},"是":{"docs":{},"少":{"docs":{},"数":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"。":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"+":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.022058823529411766},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.047619047619047616},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.038461538461538464},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.012},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.024464831804281346},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.07865168539325842},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.04132231404958678},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.05},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.030534351145038167},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"+":{"docs":{},"i":{"docs":{},")":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}},";":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}},"=":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"/":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.07407407407407407},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.030120481927710843},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.060240963855421686},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.02040816326530612},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.03773584905660377},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.037037037037037035},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.02962962962962963},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.0196078431372549},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.023255813953488372},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.036231884057971016},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.030303030303030304},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.03424657534246575},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.020833333333333332},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.012},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.02247191011235955},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.01875},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.04225352112676056},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.024691358024691357},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.03734439834024896}},"/":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.025906735751295335},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.10714285714285714},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.013761467889908258},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0136986301369863}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612}}},"i":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},"*":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},"%":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},">":{"docs":{},"&":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}}}}}},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"=":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}},"docs":{}}}}}},"最":{"docs":{},"原":{"docs":{},"始":{"docs":{},"的":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"法":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}},"此":{"docs":{},"题":{"docs":{},"代":{"docs":{},"码":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}}}}}}},"参":{"docs":{},"数":{"docs":{},"传":{"docs":{},"递":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}},"判":{"docs":{},"断":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"0":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}},"docs":{}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"=":{"docs":{},"'":{"docs":{},"\\":{"0":{"docs":{},"'":{"docs":{},";":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}},"docs":{}}}}}}}}}}}}}}},"类":{"docs":{},"似":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}},"s":{"docs":{},"解":{"docs":{},"法":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{},"写":{"docs":{},"法":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}},"解":{"docs":{},"法":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}},"递":{"docs":{},"归":{"docs":{},"写":{"docs":{},"法":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"性":{"docs":{},"质":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}}}}}}}}}}},"改":{"docs":{},"变":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}}}},"两":{"docs":{},"边":{"docs":{},"向":{"docs":{},"中":{"docs":{},"间":{"docs":{},"扩":{"docs":{},"展":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}},"原":{"docs":{},"始":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"方":{"docs":{},"法":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}}},"顺":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"方":{"docs":{},"法":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}},"需":{"docs":{},"要":{"docs":{},"多":{"docs":{},"一":{"docs":{},"个":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"装":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"那":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}},"修":{"docs":{},"改":{"docs":{},"的":{"docs":{},"先":{"docs":{},"根":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}},"由":{"docs":{},"于":{"docs":{},"保":{"docs":{},"证":{"docs":{},"是":{"docs":{},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"计":{"docs":{},"算":{"docs":{},"高":{"docs":{},"度":{"docs":{},"直":{"docs":{},"接":{"docs":{},"在":{"docs":{},"左":{"docs":{},"边":{"docs":{},"即":{"docs":{},"可":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}},"下":{"docs":{},"面":{"docs":{},"是":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"做":{"docs":{},"法":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}},"*":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}},"*":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.027522935779816515},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0273972602739726},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}},".":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}},"=":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.04081632653061224},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.03333333333333333},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.049019607843137254},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.04145077720207254},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.03636363636363636},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.0449438202247191},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.045454545454545456},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.03389830508474576},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.03184713375796178},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.06369426751592357},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0375},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.03333333333333333},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.06666666666666667},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.05194805194805195},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.046511627906976744},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.03636363636363636},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.025974025974025976},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.03409090909090909},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.042105263157894736},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.030864197530864196},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.043010752688172046},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.08108108108108109},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.033707865168539325},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.05128205128205128},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.0755813953488372},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.0755813953488372},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.03488372093023256},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.016},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.07033639143730887},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.03571428571428571},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.045454545454545456},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.034482758620689655},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.05847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.03550295857988166},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.046218487394957986},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.05056179775280899},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.032520325203252036},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.05958549222797927},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.08588957055214724},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.03305785123966942},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.061224489795918366},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.05660377358490566},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.03669724770642202},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.07216494845360824},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.08108108108108109},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.03125},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.112},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.022935779816513763},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.024691358024691357},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.03508771929824561},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0228310502283105},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.03763440860215054},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.041666666666666664},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.05384615384615385},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.043478260869565216}},"=":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.012953367875647668},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{},";":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}},",":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"9":{"9":{"docs":{},"]":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}},".":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}}},"2":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"0":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}},"3":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"1":{"0":{"0":{"docs":{},",":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}},"docs":{},",":{"2":{"docs":{},"]":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}},"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},"]":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}},"2":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"3":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"4":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"5":{"docs":{},",":{"1":{"3":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"4":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"6":{"docs":{},"]":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"7":{"docs":{},"]":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}},"docs":{}}},"6":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"8":{"docs":{},",":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},",":{"0":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}},",":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.028169014084507043}}}},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}},",":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},",":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}},",":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}},"2":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},":":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"4":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}},"docs":{}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}},"docs":{}}}}}}}},"docs":{}}}}}}},"]":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}},",":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}},"3":{"docs":{},"]":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}},",":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}},"docs":{}}},"docs":{}}},"1":{"docs":{},"]":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}},",":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},"]":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}},"docs":{}}},"5":{"docs":{},"]":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},"8":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"0":{"docs":{},",":{"9":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"]":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}},"6":{"docs":{},",":{"9":{"docs":{},",":{"8":{"docs":{},",":{"7":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{},"n":{"docs":{},"]":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"5":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}},"docs":{}}}}}}}},"docs":{}}}}}}}},"docs":{}},"]":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}},",":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}},"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872}}}},",":{"5":{"docs":{},"]":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}},",":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}},"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}},"docs":{}}},"5":{"docs":{},"]":{"docs":{"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}},",":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}},"6":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}},"docs":{}}},"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}},"docs":{}}}}}}}}}}}},"]":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}},",":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}}}}},"4":{"docs":{},"]":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}},",":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888}}}},",":{"6":{"docs":{},",":{"4":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}},"docs":{}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872}}}}},"9":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"6":{"docs":{},"]":{"docs":{},".":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}},"8":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"8":{"docs":{},",":{"3":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}},"docs":{}}}}}}},"]":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}},"3":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}},"docs":{}}},"docs":{}}}}}}},"]":{"docs":{},",":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}},"2":{"0":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}},"docs":{}}},"3":{"docs":{},",":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818}}}},"4":{"docs":{},",":{"1":{"2":{"docs":{},",":{"8":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}},"3":{"docs":{},"]":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}},",":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}},"4":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}},"docs":{}}}}}}}}}}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}},".":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385}}},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}},",":{"2":{"docs":{},"]":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}},"3":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}},"docs":{}}},"2":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}},"3":{"docs":{},"]":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}},"4":{"docs":{},"]":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}},"]":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}},"5":{"docs":{},"]":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}},"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}},"docs":{}}},"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}},"]":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}},",":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}}}}},"4":{"docs":{},"]":{"docs":{},",":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888}}}},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}},"docs":{}}},"5":{"docs":{},"]":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}},",":{"6":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{},".":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}}},",":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}},"docs":{}}},"6":{"docs":{},"]":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"docs":{}}},"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},"]":{"docs":{},",":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}}},"3":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}},"4":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}},"docs":{}}}}}}}}}}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}},",":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}},"docs":{}}}}}}}}}}}}},"2":{"docs":{},",":{"0":{"docs":{},",":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}},"1":{"docs":{},"]":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}},",":{"0":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"4":{"docs":{},"]":{"docs":{},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"6":{"docs":{},",":{"5":{"docs":{},",":{"0":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}},"docs":{}}}}}}}},"3":{"0":{"docs":{},",":{"3":{"4":{"docs":{},",":{"5":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},",":{"5":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},"]":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}},",":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}},",":{"3":{"docs":{},"]":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},"5":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285}}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{},",":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}},"docs":{}}},"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516}}}},"5":{"docs":{},"]":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}},",":{"docs":{},"[":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"0":{"docs":{},",":{"8":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"7":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}},",":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"9":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"2":{"0":{"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}},"docs":{}}},"docs":{}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}},":":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},"]":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}},",":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}},"4":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385}}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}},"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872}}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285}},")":{"docs":{},".":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}},",":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}},"docs":{}},"]":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}},"8":{"docs":{},"]":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666}}}},"9":{"docs":{},",":{"0":{"docs":{},",":{"5":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}},"5":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"8":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"4":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"docs":{}}},"3":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"1":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}},"docs":{}}},"docs":{}},"docs":{}}},"7":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288}}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}}},"8":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}},"docs":{}}},"docs":{}}},"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"6":{"docs":{},",":{"2":{"docs":{},",":{"8":{"docs":{},",":{"0":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},",":{"9":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}},",":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}}},"docs":{}}},"docs":{}}},"7":{"docs":{},"]":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}},",":{"1":{"docs":{},",":{"5":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}},"docs":{}}},"6":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}},"docs":{}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"9":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"5":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}},"docs":{}},"3":{"docs":{},",":{"1":{"5":{"docs":{},",":{"2":{"0":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"6":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"docs":{}}},"docs":{}}},"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.04},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.05172413793103448},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.04950495049504951},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.05263157894736842},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.056338028169014086},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"−":{"2":{"3":{"1":{"docs":{},",":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}},"docs":{}},"docs":{}},"docs":{}},"\"":{"1":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},"]":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}},"docs":{}}}}},"docs":{}}}}},"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}},"docs":{}}}}},"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"2":{"5":{"5":{"docs":{},".":{"2":{"5":{"5":{"docs":{},".":{"1":{"1":{"docs":{},".":{"1":{"3":{"5":{"docs":{},"\"":{"docs":{},",":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"4":{"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"8":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}},"5":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"7":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}},"6":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"9":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"5":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}}}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}},"7":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"2":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"6":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"8":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"7":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"6":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{},"]":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"\"":{"docs":{},"]":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"t":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"\"":{"docs":{},"]":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}}}}},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"\"":{"docs":{},"]":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}},",":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"6":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"2":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"8":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}}}}}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"9":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"8":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"6":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"4":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"9":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"5":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"8":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"7":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"9":{"docs":{},"\"":{"docs":{},"]":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},".":{"docs":{},"q":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}},"b":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},"]":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}},"\"":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"\"":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},"]":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}},"]":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}},"\"":{"docs":{},",":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"0":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}},"docs":{}}},"docs":{}}},"]":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}},"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"2":{"docs":{},",":{"1":{"6":{"docs":{},"]":{"docs":{},"]":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}},"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"2":{"docs":{},",":{"1":{"6":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}},",":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}},"6":{"docs":{},"]":{"docs":{},",":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"5":{"docs":{},",":{"1":{"8":{"docs":{},"]":{"docs":{},"]":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"6":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}},"docs":{}}},"docs":{}}}}},"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},"]":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}},"docs":{}}},"docs":{}}}}},"5":{"docs":{},"]":{"docs":{},"]":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}},",":{"docs":{},"[":{"6":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},"]":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}},"docs":{}}},"docs":{}}}}},"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"5":{"docs":{},",":{"1":{"8":{"docs":{},"]":{"docs":{},"]":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}},"]":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}}}},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}},"d":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}},"s":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"f":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"s":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}},"e":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"t":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}},"i":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"f":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"l":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"v":{"docs":{},"'":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}},"h":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"k":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"r":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}},"o":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"n":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}},"m":{"docs":{},",":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}}},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}},"a":{"1":{"docs":{},",":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}},"2":{"docs":{},",":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}},"docs":{},"d":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}},"d":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":2.5166666666666666},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":3.346320346320346},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":1.4437229437229435},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":2.0076923076923077}},"=":{"0":{"docs":{},")":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}},"docs":{}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"1":{"docs":{},",":{"docs":{},"l":{"2":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666}}}}},"docs":{}}},"docs":{}}}},"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":2.5454545454545454}}}}}},")":{"docs":{},"{":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}},"d":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}},"m":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}}}}}}},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.019801980198019802},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.023809523809523808},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.02564102564102564},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.029411764705882353},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.02702702702702703},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.015748031496062992},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.022222222222222223},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.04838709677419355},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.025974025974025976},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.02631578947368421},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0273972602739726},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.031746031746031744},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.025},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.02631578947368421},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.031746031746031744},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.025974025974025976},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.028169014084507043},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.02727272727272727},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.03773584905660377},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.027777777777777776},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.02857142857142857},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.021505376344086023},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.022988505747126436},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.045454545454545456},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.012048192771084338},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.024096385542168676},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.014814814814814815},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.0196078431372549},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.015503875968992248},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.014492753623188406},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.015151515151515152},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.02666666666666667},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.02564102564102564},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.01744186046511628},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.01744186046511628},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.013888888888888888},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.037037037037037035},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.016},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.03225806451612903},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.025},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.046153846153846156},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.03571428571428571},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.015151515151515152},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.012738853503184714},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.018691588785046728},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.02857142857142857},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.023255813953488372},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.025},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.027777777777777776},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.024096385542168676},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.018404907975460124},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.045454545454545456},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.024793388429752067},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.03125},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.02040816326530612},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.029411764705882353},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.023809523809523808},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.020618556701030927},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.023529411764705882},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.016},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.015267175572519083},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.02631578947368421},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.03508771929824561},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.02531645569620253},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.030612244897959183},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.020618556701030927},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}},".":{"docs":{},"h":{"docs":{},"t":{"docs":{},"m":{"docs":{},"l":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}},"'":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}},"h":{"docs":{},"t":{"docs":{},"m":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886}}},"w":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}},"=":{"docs":{},"a":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"b":{"docs":{},"l":{"docs":{},"=":{"docs":{},"b":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}},"s":{"docs":{},"o":{"docs":{},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"y":{"docs":{},"s":{"docs":{},"i":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"s":{"docs":{},".":{"docs":{},")":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}},"z":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":3.3650793650793647}}}}}}},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.039603960396039604},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}},".":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"q":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}},"l":{"docs":{},"y":{"docs":{},"s":{"docs":{},"i":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}}},"y":{"docs":{},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":1.4447004608294929},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":1.6845238095238093}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.03},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.02072538860103627},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":2.034090909090909},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":1.2669491525423728},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.02631578947368421},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.02830188679245283},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":1.6950757575757573},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":1.6982456140350877},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":2.521505376344086},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":1.4440753045404207},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":1.695238095238095},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":1.463455149501661},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.038834951456310676},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.025},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.023809523809523808},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.020618556701030927},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":2.050632911392405},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.0297029702970297},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":2.020618556701031},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},",":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"?":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}},".":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}},"，":{"docs":{},"这":{"docs":{},"题":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"加":{"docs":{},"入":{"docs":{},"了":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"导":{"docs":{},"致":{"docs":{},"会":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"些":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"甚":{"docs":{},"至":{"docs":{},"是":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"这":{"docs":{},"就":{"docs":{},"不":{"docs":{},"好":{"docs":{},"区":{"docs":{},"分":{"docs":{},"两":{"docs":{},"个":{"docs":{},"区":{"docs":{},"间":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"处":{"docs":{},"理":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"将":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"+":{"docs":{},"+":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"去":{"docs":{},"除":{"docs":{},"所":{"docs":{},"有":{"docs":{},"边":{"docs":{},"界":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"除":{"docs":{},"去":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"就":{"docs":{},"和":{"docs":{},"前":{"docs":{},"面":{"docs":{},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"处":{"docs":{},"理":{"docs":{},"情":{"docs":{},"况":{"docs":{},"了":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}},"那":{"docs":{},"题":{"docs":{},"很":{"docs":{},"像":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"就":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"在":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"地":{"docs":{},"发":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"了":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"那":{"docs":{},"个":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"也":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"'":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}},"n":{"docs":{},"g":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}},"i":{"docs":{},"v":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}},"i":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}},"e":{"docs":{},"a":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":3.365333333333333}},",":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}},".":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.023809523809523808},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}},"k":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}}},":":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}},"i":{"docs":{},")":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}},".":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}},"x":{"docs":{},"i":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"t":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}},",":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}},"b":{"docs":{},"o":{"docs":{},"v":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}},"e":{"docs":{},".":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}}}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018}}}}}}}},"c":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904}}}}}}},"t":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},",":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.023809523809523808},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}},"l":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},"e":{"docs":{},"\"":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},".":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}},",":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}},"r":{"docs":{},"i":{"docs":{},"l":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}},"=":{"1":{"docs":{},";":{"docs":{},"a":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}}}},"docs":{},"a":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}},"/":{"1":{"0":{"docs":{},";":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}},"docs":{}},"docs":{}}}},")":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}},"{":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}},"*":{"docs":{},"(":{"docs":{},"d":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}},"g":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}},".":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}},"\"":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601}}},"[":{"0":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"1":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"docs":{}}},"c":{"1":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}},"2":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}},"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.010582010582010581},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.012738853503184714},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}},"s":{"docs":{},"t":{"docs":{"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":5.037037037037037}}}}}},"n":{"docs":{},"e":{"docs":{"133.-Clone-Graph.html":{"ref":"133.-Clone-Graph.html","tf":3.6666666666666665}}}},"c":{"docs":{},"k":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":3.39047619047619}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}}}}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"中":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"进":{"docs":{},"行":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"只":{"docs":{},"有":{"docs":{},"查":{"docs":{},"找":{"docs":{},"和":{"docs":{},"插":{"docs":{},"入":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},".":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":3.384615384615384},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.025477707006369428},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.022988505747126436},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.015151515151515152},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.022388059701492536},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":3.3571428571428568},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":2.5103092783505154},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":2.509009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}},"s":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"b":{"docs":{},"y":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}},"n":{"docs":{},"u":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}},"e":{"docs":{},";":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.03508771929824561}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":3.3499999999999996}}},"t":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":1.4440753045404207},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}},"docs":{}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"s":{"docs":{},"t":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}},")":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":1.4455205811138012},"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":1.5535714285714284},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.0297029702970297}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}},".":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}},"s":{"docs":{},":":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":2.537037037037037},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":2.0412371134020617},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}},"f":{"docs":{},"u":{"docs":{},"s":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.024},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.03550295857988166},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}}}},"u":{"docs":{},"d":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}},"n":{"docs":{},"t":{"1":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806}}}}},"=":{"0":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806}}}},"1":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"docs":{}}},"2":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806}}}}},"=":{"0":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806}}}},"1":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"docs":{}}},"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":3.364583333333333},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":2.0125},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"=":{"0":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}}}}}}},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.025}}}}},")":{"docs":{},":":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}}}}},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}}}},"t":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}},"r":{"docs":{},"s":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":3.449035812672176}},"e":{"docs":{},"s":{"docs":{},"?":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.016}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":2.5588235294117645},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":1.4447004608294929},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":1.6845238095238093}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":2.0202020202020203},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":3.3460721868365177},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":2.5123456790123457},"77.-combinations.html":{"ref":"77.-combinations.html","tf":5.027777777777778},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":2.5275229357798166}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}},"s":{"docs":{},".":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"u":{"docs":{},"m":{"2":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357}}}}}}}}}}}}}}},"3":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}},"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888}}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},")":{"docs":{},"{":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},")":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}},"?":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}},"t":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":2.03125},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}},"u":{"docs":{},"t":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}},"e":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.016}},",":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044}}},":":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}}}}},"p":{"docs":{},"y":{"docs":{},")":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},".":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"s":{"docs":{},")":{"docs":{},",":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}},"i":{"docs":{},"d":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}},"s":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"o":{"docs":{},"r":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":3.380503144654088}}}},"=":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}},"docs":{}}}}}}}}},"s":{"docs":{},"t":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.012232415902140673}},")":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}},"i":{"docs":{},"]":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":1.6765676567656764},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.023255813953488372},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.061224489795918366},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}}}}},"n":{"docs":{},"g":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}},":":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}}}}},"o":{"docs":{},"s":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}}},"c":{"docs":{},"k":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.04716981132075472}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.02830188679245283}},",":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}},".":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}},"'":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"[":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}},"n":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"y":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"{":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}},"e":{"docs":{},"r":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":3.348600508905852}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":5.066037735849057}},"d":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.03821656050955414}},"a":{"docs":{},"t":{"docs":{},"e":{"1":{"docs":{},"=":{"docs":{},"i":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}},"docs":{}}}}}}}},"2":{"docs":{},"=":{"docs":{},"i":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}},"docs":{}}}}}}}},"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}},"[":{"docs":{},"i":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}},"]":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}}}}},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}}},".":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}}}}}}}}}}}},"'":{"docs":{},"t":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}},"&":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}}}},"’":{"docs":{},"t":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},".":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}},"s":{"docs":{},"在":{"2":{"0":{"9":{"docs":{},"个":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"了":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"也":{"docs":{},"会":{"docs":{},"把":{"docs":{},"代":{"docs":{},"码":{"docs":{},"贴":{"docs":{},"出":{"docs":{},"来":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}},"r":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}},"e":{"docs":{},"t":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}}}}},"p":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.016}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},";":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505}}},"[":{"5":{"0":{"0":{"2":{"docs":{},"]":{"docs":{},"[":{"7":{"docs":{},"]":{"docs":{},"[":{"1":{"6":{"docs":{},"]":{"docs":{},";":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}},"docs":{}},"docs":{}}}},"docs":{}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{},";":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"q":{"docs":{},"u":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}}}},"x":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}},"'":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.01910828025477707},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.016},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},".":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}},"u":{"docs":{},"r":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.02100840336134454}},";":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}},"=":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"j":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}}}}}},"t":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}},".":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}},",":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},";":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}}}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}}}}}}}}},"=":{"0":{"docs":{},";":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}},"1":{"docs":{},";":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}},"docs":{},"=":{"docs":{},"c":{"docs":{},"?":{"docs":{},"以":{"docs":{},"及":{"docs":{},"a":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"和":{"docs":{},"d":{"docs":{},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"是":{"docs":{},"否":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"a":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"docs":{},"a":{"docs":{},"=":{"docs":{},"=":{"docs":{},"c":{"docs":{},"?":{"docs":{},"以":{"docs":{},"及":{"docs":{},"a":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"c":{"docs":{},"和":{"docs":{},"d":{"docs":{},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{},"是":{"docs":{},"否":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"a":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"。":{"docs":{},"上":{"docs":{},"面":{"docs":{},"两":{"docs":{},"中":{"docs":{},"情":{"docs":{},"况":{"docs":{},"任":{"docs":{},"何":{"docs":{},"一":{"docs":{},"种":{"docs":{},"成":{"docs":{},"立":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"算":{"docs":{},"成":{"docs":{},"功":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"这":{"docs":{},"次":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"使":{"docs":{},"用":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"t":{"docs":{},")":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":2.5409356725146197},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":2.0414201183431953},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}},"e":{"docs":{},",":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}}}},",":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}},"d":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"i":{"docs":{},"t":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}},"o":{"docs":{},"n":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}},"b":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.017857142857142856}}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":1.4588744588744587}}}}}},"a":{"docs":{},"l":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"i":{"docs":{},"t":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}},"c":{"docs":{},"i":{"docs":{},"m":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421}}}},"o":{"docs":{},"d":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":3.376344086021505}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":2.0294117647058822},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":2.0217391304347827}},".":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}},"q":{"docs":{},"u":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.025477707006369428},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},".":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}},"s":{"docs":{},")":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}},",":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.025},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":3.3445692883895126},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},".":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":3.341085271317829}}}}},"u":{"docs":{},"r":{"docs":{},"b":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":2.533707865168539},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}},"n":{"docs":{},"d":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.0449438202247191}},",":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}},"s":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}},"o":{"docs":{},"r":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955}},")":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}},",":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}},".":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"i":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":2.0153846153846153},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"'":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"i":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.03787878787878788},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.028735632183908046}}}}}}}}},"e":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":2.505434782608696}}}},"e":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},",":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}},"p":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}},"(":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}},"docs":{}}},"docs":{}}},"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.025}}}}},"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"p":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}}}},"docs":{}}}}}}}}}},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}},"docs":{}}}}}}}}}}}},"+":{"1":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}}},"docs":{}}},"docs":{}},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}}}}}}}},"m":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044}}}}},"docs":{}},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"2":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"2":{"docs":{},")":{"docs":{},";":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}},"docs":{}}}}}}}}}},"docs":{}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}},"docs":{}},"=":{"1":{"docs":{},";":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}},"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}},"docs":{}}}}}}}}},"1":{"docs":{},"]":{"docs":{},"=":{"1":{"docs":{},";":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}},"docs":{}}}},"docs":{},"j":{"docs":{},"]":{"docs":{},"+":{"docs":{},"=":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}}},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},";":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}}}}},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"n":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":1.683712121212121},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":1.6845238095238093},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":2.0202020202020203},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":3.345238095238095},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":2.5103092783505154},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":2.509009009009009}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}},",":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}},".":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723}}},"y":{"docs":{},",":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}},";":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}}},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364}}}}}}},"n":{"docs":{},"e":{"docs":{},".":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},",":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}}},"w":{"docs":{},"n":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.034782608695652174},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.04424778761061947},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}},"g":{"docs":{},"\"":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},",":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}},"d":{"docs":{},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"s":{"docs":{},"，":{"docs":{},"每":{"docs":{},"层":{"docs":{},"有":{"4":{"docs":{},"个":{"docs":{},"分":{"docs":{},"量":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"挺":{"docs":{},"高":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"不":{"docs":{},"好":{"docs":{},"分":{"docs":{},"析":{"docs":{},"。":{"docs":{},"我":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"不":{"docs":{},"分":{"docs":{},"析":{"docs":{},"了":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"(":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"树":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"间":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"y":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.02564102564102564},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.05232558139534884},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.05232558139534884},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.04294478527607362}}},"t":{"docs":{},"a":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":1.4588744588744587},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}},",":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}},"n":{"docs":{},"a":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":2.536144578313253}},",":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}},".":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"[":{"docs":{},"]":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"docs":{}}}},",":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}},"e":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.018518518518518517},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.01910828025477707},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}}}},"t":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678}}},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":3.3592400690846285},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":1.2584745762711864},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.021505376344086023},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.024691358024691357},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.02100840336134454},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.032520325203252036},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":3.383333333333333},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.01834862385321101},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":2.517543859649123},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":2.0123456790123457},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0182648401826484},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},",":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.013761467889908258},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0136986301369863}}},"s":{"docs":{},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}},",":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"一":{"docs":{},"半":{"docs":{},"以":{"docs":{},"上":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"保":{"docs":{},"存":{"docs":{},"出":{"docs":{},"现":{"docs":{},"最":{"docs":{},"多":{"docs":{},"次":{"docs":{},"数":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"重":{"docs":{},"复":{"docs":{},"出":{"docs":{},"现":{"docs":{},"则":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"+":{"docs":{},"+":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"留":{"docs":{},"下":{"docs":{},"来":{"docs":{},"了":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}}}}}}},"v":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.025974025974025976}}}},"s":{"docs":{},"e":{"docs":{},"{":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"一":{"docs":{},"共":{"docs":{},"就":{"4":{"docs":{},"种":{"docs":{},"类":{"docs":{},"型":{"docs":{},"的":{"docs":{},"符":{"docs":{},"号":{"docs":{},"。":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"，":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"括":{"docs":{},"号":{"docs":{},"，":{"docs":{},"括":{"docs":{},"回":{"docs":{},"。":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"x":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"l":{"docs":{},"i":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.039603960396039604},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.0379746835443038},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.025},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.03571428571428571},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.030612244897959183},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.024509803921568627},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.029411764705882353},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.044642857142857144},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.01910828025477707},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.04838709677419355},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.03184713375796178},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0375},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.025974025974025976},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.028169014084507043},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.022222222222222223},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.014492753623188406},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.01744186046511628},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.01744186046511628},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.013888888888888888},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.03076923076923077},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.023809523809523808},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.022727272727272728},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.017241379310344827},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.016853932584269662},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.022388059701492536},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.02857142857142857},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.023255813953488372},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.025},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.027777777777777776},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.045454545454545456},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.030612244897959183},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.024793388429752067},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.029411764705882353},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.03571428571428571},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.030927835051546393},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.02702702702702703},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.022900763358778626},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.05263157894736842},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.030927835051546393},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.016597510373443983},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.016304347826086956}},"e":{"docs":{},":":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.024096385542168676},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},"g":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}},",":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}},"s":{"docs":{},".":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}},"\"":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":2.0253164556962027}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.0297029702970297},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.0196078431372549},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.025477707006369428},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.01744186046511628},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.01744186046511628},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.015151515151515152},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.016853932584269662},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.03508771929824561},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.020618556701030927},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.012448132780082987},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"t":{"docs":{},"h":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":2.5098039215686274},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.016853932584269662},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.022900763358778626}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.016597510373443983}},"s":{"docs":{},",":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}},"u":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}},"n":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.025477707006369428},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.015151515151515152},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}}}},".":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}}}}}}},"n":{"docs":{},"v":{"docs":{},"i":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}}}}},"t":{"docs":{},"i":{"docs":{},"r":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"d":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":1.6825396825396823},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}},",":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}},"(":{"0":{"docs":{},")":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}},"docs":{},"e":{"docs":{},")":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}},";":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.023255813953488372}},")":{"docs":{},",":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}},",":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186}}}}}}},")":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}},"{":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}},"g":{"docs":{},"a":{"docs":{},"g":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}},"i":{"docs":{},"n":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}},")":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}},"*":{"docs":{},"(":{"docs":{},"h":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":3.341085271317829}}}},"g":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}}}}}}}},"u":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":2.0168539325842696},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}},",":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}},"t":{"docs":{},"c":{"docs":{},".":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"整":{"docs":{},"个":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"有":{"3":{"docs":{},"个":{"docs":{},"维":{"docs":{},"度":{"docs":{},"，":{"docs":{},"一":{"docs":{},"是":{"docs":{},"前":{"docs":{},"面":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"二":{"docs":{},"是":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"三":{"docs":{},"是":{"docs":{},"当":{"docs":{},"前":{"docs":{},"防":{"docs":{},"止":{"docs":{},"的":{"docs":{},"轮":{"docs":{},"数":{"docs":{},"。":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.025},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.02857142857142857},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.022988505747126436},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.016},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.025},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.009174311926605505},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.018404907975460124},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.03125},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.020618556701030927}},"&":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},":":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.012048192771084338}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}},".":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}},"m":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}},".":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}},"n":{"docs":{},"t":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.014492753623188406},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612}},"s":{"docs":{},":":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}},":":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}},"u":{"docs":{},"r":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}},"n":{"docs":{},"d":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":1.2669491525423728},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":1.695238095238095},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":1.463455149501661},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.029411764705882353},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.03305785123966942},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}},"a":{"docs":{},"l":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}},"x":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":1.2584745762711864},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":2.5161290322580645},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886}}},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}},"v":{"docs":{},"e":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}},"l":{"docs":{},"l":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.025477707006369428},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}},"e":{"docs":{},".":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}},"t":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},",":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}},".":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}},"l":{"docs":{},"l":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.01910828025477707},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.014814814814814815},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.023809523809523808},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}},"e":{"docs":{},";":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.026785714285714284},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.025974025974025976},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.015151515151515152},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.01652892561983471},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"跳":{"docs":{},"完":{"docs":{},"，":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}},".":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},")":{"docs":{},")":{"docs":{},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}},"r":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}},"[":{"docs":{},"f":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"j":{"docs":{},"]":{"docs":{},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},";":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.023391812865497075}},")":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269}}},";":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}},"=":{"0":{"docs":{},",":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}},"docs":{}}}}}}}},"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{},"*":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},";":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}},"n":{"docs":{},";":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}}}}}}},"docs":{}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0182648401826484}},",":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}},"=":{"docs":{},"q":{"docs":{},"u":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},"?":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":1.6912568306010927}},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}},"i":{"docs":{},"p":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.024}}}}},")":{"docs":{},";":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}},",":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}},"*":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}},"(":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"4":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"5":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"6":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},".":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"i":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}},"i":{"0":{"docs":{},"?":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"+":{"docs":{},"+":{"docs":{},":":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035}}}}}}}}}}}}}}},"&":{"docs":{},"&":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516}}}}}}}}}}}},"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}},"=":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}}}}}}}}},"j":{"docs":{},">":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}},"docs":{}}}},"(":{"docs":{},"i":{"docs":{},"+":{"docs":{},"j":{"docs":{},")":{"docs":{},"=":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}},"docs":{}}}}}}}}},"docs":{}}}}}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},",":{"docs":{},"s":{"docs":{},"z":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"&":{"docs":{},"&":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{},")":{"docs":{},"{":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}},")":{"docs":{},"{":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}},"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{},"{":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},")":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}},"&":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}},">":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},"&":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}}}}}},"(":{"docs":{},"{":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"[":{"docs":{},"f":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{},"{":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}}}}}},",":{"docs":{},"j":{"docs":{},"=":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},";":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}},"1":{"docs":{},";":{"docs":{},"i":{"0":{"docs":{},"?":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}}}},";":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}},"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"=":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}},"=":{"0":{"docs":{},";":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}},"docs":{}},"&":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}}}}},"2":{"docs":{},";":{"docs":{},"i":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}}},"3":{"docs":{},";":{"docs":{},"i":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}}}}}}},"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}},"x":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}},"m":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},";":{"docs":{},"i":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}},">":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}},"n":{"docs":{},")":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},";":{"docs":{},"i":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},";":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"+":{"1":{"docs":{},"+":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},";":{"docs":{},"i":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"?":{"docs":{},"m":{"docs":{},"a":{"docs":{},":":{"docs":{},"i":{"docs":{},";":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.022058823529411766},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.05263157894736842},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.03409090909090909},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}},",":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364}}},".":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.02631578947368421},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.03409090909090909},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},"=":{"0":{"docs":{},";":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}},"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.029411764705882353},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.04310344827586207},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.01680672268907563},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},":":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.0297029702970297},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.03571428571428571},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.030612244897959183},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.024509803921568627},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.029411764705882353},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.044642857142857144},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.04838709677419355},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.03184713375796178},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0375},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.025974025974025976},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.028169014084507043},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.022222222222222223},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.01744186046511628},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.01744186046511628},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.013888888888888888},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.03076923076923077},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.023809523809523808},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.022727272727272728},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.017241379310344827},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.016853932584269662},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.022388059701492536},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.02857142857142857},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.023255813953488372},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.025},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.027777777777777776},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.045454545454545456},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.030612244897959183},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.029411764705882353},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.03571428571428571},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.030927835051546393},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.02702702702702703},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.022900763358778626},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.05263157894736842},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.030927835051546393},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.016597510373443983},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.016304347826086956}}},",":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"&":{"docs":{},"&":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}},")":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.0297029702970297},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.03333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.038461538461538464},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.1111111111111111},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.03626943005181347},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.05454545454545454},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.05172413793103448},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.045454545454545456},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.11538461538461539},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.01910828025477707},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.037037037037037035},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.03225806451612903},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.07792207792207792},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0273972602739726},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.039603960396039604},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.02702702702702703},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.03333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.039473684210526314},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.015789473684210527},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.02727272727272727},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.03896103896103896},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.02857142857142857},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.03225806451612903},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.024},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.024096385542168676},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.018867924528301886},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.011320754716981131},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.0196078431372549},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.015503875968992248},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.028985507246376812},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.021739130434782608},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.015151515151515152},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.02564102564102564},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.01744186046511628},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.041666666666666664},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.01744186046511628},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.037037037037037035},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.02},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.016},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.021406727828746176},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.03076923076923077},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.023809523809523808},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.05714285714285714},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.02857142857142857},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.023255813953488372},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.02912621359223301},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0375},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0392156862745098},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.045454545454545456},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.03305785123966942},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.046875},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0392156862745098},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.018867924528301886},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.029411764705882353},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.023529411764705882},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.025},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.096},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.015267175572519083},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.03211009174311927},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.03508771929824561},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.030864197530864196},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0228310502283105},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"e":{"docs":{},"g":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":3.3809523809523805},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.030612244897959183},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":2.544943820224719},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.02727272727272727},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.020618556701030927},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}},".":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}},",":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}},".":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}},"r":{"docs":{},"n":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}},"v":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":3.378378378378378},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":3.408333333333333}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},".":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}},".":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}},"s":{"docs":{},",":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666}}},".":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":3.3603603603603602}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":2.0259067357512954}},")":{"docs":{},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}},"v":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135}}}}}}}},"n":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},";":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}},"。":{"docs":{},"保":{"docs":{},"证":{"docs":{},"不":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"。":{"docs":{},"修":{"docs":{},"改":{"docs":{},"代":{"docs":{},"码":{"docs":{},"之":{"docs":{},"后":{"docs":{},"发":{"docs":{},"现":{"docs":{},"能":{"docs":{},"通":{"docs":{},"过":{"docs":{},"。":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},"/":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}},";":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}},"docs":{}}}}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.016}}}}}}}}}},".":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}},".":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667}}}}}}},"d":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}},"t":{"docs":{},"i":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}},".":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":2.5384615384615383},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":3.3499999999999996},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":2.533613445378151}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},".":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":2.5211267605633805}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":2.0105820105820107},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":1.4539951573849876},"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":1.5535714285714284},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.010582010582010581}},")":{"docs":{},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},")":{"docs":{},"{":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}},"g":{"docs":{},"l":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":3.333333333333333}}}}},"f":{"docs":{},"(":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666}}}},"docs":{}}}}},"l":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{},"i":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}},"docs":{}}}},"l":{"1":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},"{":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}}}}},"2":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},"{":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}}}}},"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}},")":{"docs":{},"{":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}},"=":{"docs":{},"=":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}},"docs":{}}}}}}}}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"&":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}},"|":{"docs":{},"|":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}},">":{"docs":{},"=":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}},"docs":{}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}},"h":{"docs":{},"=":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"|":{"docs":{},"|":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"h":{"docs":{},"=":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"|":{"docs":{},"|":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"h":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"1":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}},"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},">":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},">":{"docs":{},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}},"docs":{}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"+":{"docs":{},"l":{"docs":{},"+":{"docs":{},"r":{"docs":{},">":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}}}}},"r":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{},"l":{"docs":{},"r":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{},"l":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"r":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"1":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"docs":{},"s":{"2":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"!":{"docs":{},"=":{"docs":{},"s":{"3":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}},"docs":{}}},">":{"1":{"0":{"docs":{},"|":{"docs":{},"|":{"docs":{},"(":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"1":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"s":{"docs":{},">":{"docs":{},"\"":{"2":{"1":{"4":{"7":{"4":{"8":{"3":{"6":{"4":{"7":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}},"t":{"2":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}}}}}},"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}},"1":{"docs":{},")":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}},"docs":{}}}}}}}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"!":{"docs":{},"=":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},")":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}},"[":{"docs":{},"'":{"docs":{},")":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}},"{":{"docs":{},"'":{"docs":{},")":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}}}}}}}}}}}}}},")":{"docs":{},"{":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},">":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},"{":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"=":{"docs":{},"=":{"1":{"docs":{},")":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}},"docs":{}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},")":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}},"docs":{}}}}}},"docs":{},"i":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}}},"n":{"docs":{},")":{"docs":{},"{":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}}}},"i":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},"!":{"docs":{},"=":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"i":{"docs":{},"!":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}}}}}}}}},"docs":{}}},"=":{"docs":{},"=":{"docs":{},"j":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"1":{"docs":{},")":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}},"{":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}},"2":{"docs":{},")":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}},"{":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}},"docs":{}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{},"j":{"docs":{},">":{"docs":{},"=":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{},"\\":{"0":{"docs":{},"'":{"docs":{},"|":{"docs":{},"|":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{},"!":{"docs":{},"=":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{},"!":{"docs":{},"=":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},")":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"f":{"docs":{},"(":{"docs":{},"f":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{},"j":{"docs":{},",":{"docs":{},"i":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{},"*":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}},"+":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}},"j":{"docs":{},"+":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"2":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}},"docs":{}}}}}}},"n":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}},"u":{"docs":{},"m":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}},"1":{"docs":{},")":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}},"docs":{}}}}}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456}}}}}},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"docs":{}}},">":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}},"!":{"docs":{},"=":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}}}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"+":{"1":{"docs":{},"=":{"docs":{},"=":{"docs":{},"k":{"docs":{},")":{"docs":{},"{":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}},"docs":{}}}}}}},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}},"1":{"docs":{},")":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}}},"docs":{}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}},"docs":{}}}}}}}}}}}}}},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}},"c":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"docs":{}}}},"r":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"docs":{}}}}},"x":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549}},"\"":{"2":{"1":{"4":{"7":{"4":{"8":{"3":{"6":{"4":{"7":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"=":{"docs":{},"x":{"docs":{},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}},"docs":{}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"=":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"&":{"docs":{},"&":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"=":{"docs":{},"=":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"=":{"docs":{},"=":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}}}}}}}}}},")":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}}},"r":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}},"e":{"docs":{},"v":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"=":{"docs":{},"=":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},")":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}}}}}},")":{"docs":{},"{":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}},"&":{"docs":{},"&":{"docs":{},"q":{"docs":{},"&":{"docs":{},"&":{"docs":{},"(":{"docs":{},"p":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"&":{"docs":{},"q":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.015267175572519083}},")":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}},"]":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}},"}":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}},"(":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}},"+":{"docs":{},"'":{"docs":{},")":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}},"d":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"l":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"r":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"u":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}},"'":{"0":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}},"docs":{}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"1":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}},"docs":{}}},">":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"/":{"3":{"docs":{},")":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"docs":{}}}}}}}}}}}}}}},"2":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}},"docs":{}}},">":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"/":{"3":{"docs":{},")":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"docs":{}}}}}}}}}}}}}}},"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}},"1":{"docs":{},"|":{"docs":{},"|":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"3":{"docs":{},")":{"docs":{},"{":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}},"docs":{}}}}}}}}}}},"2":{"docs":{},"|":{"docs":{},"|":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}}}}}}}},"docs":{}}},">":{"docs":{},"=":{"2":{"docs":{},")":{"docs":{},"{":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}},"docs":{}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"[":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"2":{"docs":{},")":{"docs":{},"{":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}},"docs":{}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{},"!":{"docs":{},"=":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}},"docs":{}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.024},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},"{":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}},"|":{"docs":{},"|":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"p":{"docs":{},"|":{"docs":{},"|":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"q":{"docs":{},")":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}},"!":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},">":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}},"m":{"docs":{},"p":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.01509433962264151}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}},")":{"docs":{},"{":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}},"k":{"docs":{},")":{"docs":{},"{":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}}}}}}}}}}},"o":{"docs":{},"u":{"1":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}},"docs":{}}},"q":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},"{":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},"{":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},"{":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}},")":{"docs":{},"{":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"|":{"docs":{},"|":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}},")":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}}}}}}},"&":{"docs":{},"&":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}},"docs":{}}}}}}}}}}}}}}},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}},"docs":{}}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"=":{"docs":{},"=":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}}}}},"k":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}},"docs":{}}},">":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},")":{"docs":{},"{":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}},"docs":{}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},"|":{"docs":{},"|":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909}},"=":{"docs":{},"=":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}},"docs":{}}}}}}}}}}}}}},"p":{"docs":{},"[":{"docs":{},"s":{"docs":{},"[":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},">":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}},"docs":{}}}}}}}}}}}}}}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"*":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"+":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},"!":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{},"x":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"!":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"&":{"docs":{},"p":{"docs":{},"r":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"&":{"docs":{},"p":{"docs":{},"r":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}}}}}}}},"r":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"1":{"docs":{},")":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"|":{"docs":{},"|":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}},")":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}},"q":{"1":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}},"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},")":{"docs":{},"{":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},"|":{"docs":{},"|":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"=":{"docs":{},"=":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"=":{"docs":{},"=":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"docs":{}}}}}}}}}}}}}}}},"u":{"docs":{},"d":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{},"u":{"docs":{},"d":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{},"d":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"u":{"docs":{},"'":{"docs":{},")":{"docs":{},"{":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}},"t":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}},".":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}},")":{"docs":{},".":{"docs":{},"”":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}},"e":{"docs":{},"r":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},"?":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}},".":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}}}}},".":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}},"h":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},",":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}},";":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"s":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}}}}}}},":":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}},"s":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}}}}},"y":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"f":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":3.352941176470588}},"s":{"docs":{},".":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}}}},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"h":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":3.353741496598639}},"i":{"docs":{},"c":{"docs":{},".":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}},"]":{"docs":{},"和":{"docs":{},"p":{"docs":{},"[":{"0":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}},"docs":{}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":3.351515151515151},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":2.0091743119266057},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":2.009132420091324}}}}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":3.3591954022988504}},"e":{"docs":{},"!":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}},".":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}},"i":{"docs":{},"n":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}},")":{"docs":{},"{":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},"i":{"docs":{},"为":{"0":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}},"docs":{}}}},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}},"docs":{},"+":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}},"i":{"docs":{"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":2.5123456790123457},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":2.513157894736842},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":3.3470319634703194},"52.-n-queens-ii.html":{"ref":"52.-n-queens-ii.html","tf":2.7},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":2.513157894736842},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":2.5088495575221237},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":1.6723484848484846},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":1.6771929824561402},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":1.675595238095238},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":3.3448275862068964},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":2.008},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":1.6726907630522088},"107.-binary-tree-level-order-traversal-ii.html":{"ref":"107.-binary-tree-level-order-traversal-ii.html","tf":1.5535714285714284},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":2.506849315068493},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":1.4343853820598005},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":2.5125},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":2.511904761904762},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":2.5057471264367814},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":2.0059171597633134},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":1.4401993355481726},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":2.5037735849056606},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":2.5103092783505154},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":2.508771929824561},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":2.010204081632653}},"i":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":1.4343853820598005},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":2.5091743119266057},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":2.509009009009009}}}},",":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.011320754716981131}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}},">":{"docs":{},"=":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},">":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"?":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}},"p":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":2.5454545454545454}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}},".":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}},"e":{"docs":{},".":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}},"长":{"docs":{},"度":{"docs":{},"的":{"docs":{},"s":{"docs":{},"能":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"s":{"docs":{},",":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"i":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"中":{"docs":{},"，":{"docs":{},"能":{"docs":{},"和":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"当":{"docs":{},"前":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"r":{"docs":{},"n":{"docs":{},"g":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"的":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"数":{"docs":{},"组":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"即":{"docs":{},"可":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":1.4347063978965817}}},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}}}}}},"m":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.02608695652173913},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.03225806451612903},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.024},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},"a":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}},";":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},"p":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.025974025974025976},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.02040816326530612}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}},"(":{"1":{"2":{"8":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}}}},">":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}},"x":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}},"i":{"docs":{},"m":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":3.3476190476190473},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":3.345098039215686}},"u":{"docs":{},"m":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":3.345833333333333},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":2.0294117647058822},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":1.6874999999999998},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":2.5142857142857142},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":3.362459546925566},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":2.5060975609756095},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":2.5792079207920793},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":2.029045643153527}},"g":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}},"docs":{}}}}}},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}},"docs":{}}}}}}}}}}}}}}},"a":{"docs":{},",":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}},"b":{"docs":{},",":{"docs":{},"f":{"docs":{},")":{"docs":{},";":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}},"p":{"docs":{},"o":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":2.534313725490196},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":3.403397027600849}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}},".":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.0603448275862069},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":3.3630363036303628},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":2.526315789473684},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":2.5140845070422535},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":2.536363636363636},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":2.020408163265306}},")":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}},"看":{"docs":{},"a":{"docs":{},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}}}}}}}}},",":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},".":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},":":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}},"[":{"8":{"docs":{},"]":{"docs":{},"=":{"docs":{},"{":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"h":{"docs":{},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"j":{"docs":{},"k":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"q":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"u":{"docs":{},"v":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"x":{"docs":{},"y":{"docs":{},"z":{"docs":{},"\"":{"docs":{},"}":{"docs":{},";":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"*":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"+":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}},"=":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"]":{"docs":{},"=":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}}}},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}},"k":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},"{":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},",":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}}}}}}}}},"p":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}}},"docs":{}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},";":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}},"n":{"docs":{},"i":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":3.383333333333333},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":2.508771929824561}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}},"{":{"docs":{},"{":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"0":{"docs":{},"}":{"docs":{},",":{"docs":{},"{":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"1":{"docs":{},"}":{"docs":{},",":{"docs":{},"{":{"docs":{},"'":{"docs":{},"g":{"docs":{},"'":{"docs":{},",":{"2":{"docs":{},"}":{"docs":{},",":{"docs":{},"{":{"docs":{},"'":{"docs":{},"t":{"docs":{},"'":{"docs":{},",":{"3":{"docs":{},"}":{"docs":{},"}":{"docs":{},";":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},";":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}},".":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"d":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}},"r":{"docs":{},"g":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":2.018867924528302},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":2.015748031496063},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":3.3603603603603602},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":2.521505376344086}},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},"?":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},",":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.014705882352941176},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"大":{"docs":{},"概":{"docs":{},"路":{"docs":{},"径":{"docs":{},"和":{"9":{"4":{"docs":{},".":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}},"docs":{}},"docs":{}}}}}}}}}}}}},"d":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}},"i":{"docs":{},"f":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364}},"i":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}},"y":{"docs":{},"_":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514}},",":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}},"docs":{}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"o":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}},"=":{"1":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{},"+":{"7":{"docs":{},";":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"v":{"docs":{},"e":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.03076923076923077}},"{":{"docs":{},"{":{"0":{"docs":{},",":{"1":{"docs":{},"}":{"docs":{},",":{"docs":{},"{":{"1":{"docs":{},",":{"0":{"docs":{},"}":{"docs":{},",":{"docs":{},"{":{"0":{"docs":{},",":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"=":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}},".":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"s":{"docs":{},")":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}},".":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}},"=":{"1":{"docs":{},";":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}},"docs":{}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.01744186046511628},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}},"i":{"docs":{},"d":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},";":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364}}},"d":{"docs":{},"l":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}},"=":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"+":{"docs":{},"(":{"docs":{},"(":{"docs":{},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{},"*":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},";":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}},"这":{"docs":{},"段":{"docs":{},"就":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"，":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"再":{"docs":{},"中":{"docs":{},"间":{"docs":{},"，":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":2.532258064516129}}},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},".":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}},"n":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":3.341463414634146}},"i":{"docs":{},"m":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.031746031746031744},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549}},"u":{"docs":{},"m":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.02631578947368421},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":2.515873015873016},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":2.5319148936170213},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":2.028985507246377},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":1.695238095238095},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":1.463455149501661},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":2.0098039215686274}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.032520325203252036}},"(":{"docs":{},")":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018}}}}},"*":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}},"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},",":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}},"d":{"docs":{},",":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}}},"u":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},";":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}}}}}}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}}},"docs":{}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}}}},")":{"docs":{},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"g":{"docs":{},"a":{"docs":{},"p":{"docs":{},";":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},")":{"docs":{},"{":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}},"y":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}}}}}}}}},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.01834862385321101}},"(":{"docs":{},")":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0136986301369863}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}}}}},"*":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}},",":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"2":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}},"docs":{}}}}}},")":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}},"[":{"docs":{},"s":{"docs":{},"]":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}},"=":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}},"n":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.038461538461538464},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.023809523809523808},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.02702702702702703},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.025},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":3.3749999999999996},"52.-n-queens-ii.html":{"ref":"52.-n-queens-ii.html","tf":2.7},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.06666666666666667},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.02608695652173913},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.021505376344086023},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.02531645569620253},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.021739130434782608}},"u":{"docs":{},"m":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.03},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.03626943005181347},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.025423728813559324},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.03409090909090909},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.031578947368421054},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.030927835051546393},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.02702702702702703},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.02531645569620253},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":2.533333333333333},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":3.343537414965986},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":2.0202020202020203},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.03821656050955414},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.02631578947368421},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.02666666666666667},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":2.028},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":3.3487179487179484},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":2.511904761904762},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":3.347222222222222},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":3.352941176470588},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":2.522727272727273},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":3.3911845730027546},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.046875},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.03669724770642202},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.021739130434782608}},"s":{"docs":{},".":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}},",":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}},")":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}},".":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}},"认":{"docs":{},"定":{"docs":{},"为":{"docs":{},"是":{"docs":{},"带":{"docs":{},"圈":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"就":{"docs":{},"是":{"docs":{},"找":{"docs":{},"出":{"docs":{},"圈":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"会":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"一":{"docs":{},"种":{"docs":{},"就":{"docs":{},"是":{"docs":{},"能":{"docs":{},"找":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"就":{"docs":{},"是":{"docs":{},"会":{"docs":{},"一":{"docs":{},"直":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"形":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"圈":{"docs":{},"。":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"=":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}}}}}},"s":{"1":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.053763440860215055}},",":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}},"[":{"docs":{},"r":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}},"2":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.03225806451612903}},",":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.021505376344086023}}},".":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}},"docs":{},",":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}},"1":{"docs":{},"]":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}},"docs":{}},".":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}}}}}}}}}},"k":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}},"]":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.022058823529411766}},")":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}},"l":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}},".":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}}}}},"j":{"docs":{},"]":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}},"q":{"docs":{},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},"=":{"docs":{},"k":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}}},")":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.022988505747126436},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}},"s":{"docs":{},")":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}},";":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}},"{":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}},",":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}}}},"=":{"0":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}},"{":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}}}}}},",":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}},"*":{"1":{"0":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}},"docs":{}},"docs":{}}},"l":{"docs":{},"l":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},";":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}},".":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},")":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601}}}}},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"d":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}},"e":{"docs":{},"g":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}}}},"x":{"docs":{},"t":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":3.3553921568627447},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.037815126050420166},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186}}}}}}}}}}}}},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.025210084033613446}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"&":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"&":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815}}}}},"w":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.025},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016}},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}},"l":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.05454545454545454}},"e":{"docs":{},")":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}},"y":{"docs":{},")":{"docs":{},".":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}},"s":{"docs":{},".":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":1.6904761904761902},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":2.533333333333333},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.022556390977443608},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.018518518518518517},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.027210884353741496},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.029411764705882353},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.021739130434782608},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.027777777777777776},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.031088082901554404},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":2.01875},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.03763440860215054},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.041666666666666664},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.02074688796680498}},"s":{"docs":{},",":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}},"'":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}},".":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}},".":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.0196078431372549},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},"'":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.02040816326530612},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}}},"n":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.015151515151515152},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"e":{"docs":{},")":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}},"t":{"docs":{},"e":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},":":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"b":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}},"y":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}},"s":{"docs":{},":":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},".":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}},":":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}},")":{"docs":{},".":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}},"h":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}},"a":{"docs":{},"t":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":2.00561797752809}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}}}},"w":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}},";":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}},"=":{"0":{"docs":{},";":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},";":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}}}}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.01910828025477707}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{},"*":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}},"}":{"docs":{},"次":{"docs":{},"。":{"docs":{},"循":{"docs":{},"环":{"docs":{},"需":{"docs":{},"要":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"平":{"docs":{},"方":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"平":{"docs":{},"方":{"docs":{},")":{"docs":{},"。":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":3.358333333333333},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.021505376344086023},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}},"{":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},".":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}},",":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}},"t":{"docs":{},"h":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":1.6746031746031744}}}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}},",":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}},"×":{"docs":{},"n":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}},"c":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}}}}}}}},"docs":{}}}}}}}}}},"r":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{},"n":{"docs":{},"c":{"docs":{},"=":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}}},"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"{":{"docs":{},"n":{"docs":{},"c":{"docs":{},",":{"docs":{},"n":{"docs":{},"r":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}},",":{"docs":{},"n":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}}}}}}},"!":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667}}},"个":{"docs":{},"数":{"docs":{},"排":{"docs":{},"列":{"docs":{},"有":{"docs":{},"n":{"docs":{},"!":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"1":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}},"docs":{}}}}}}}}}}}}}}}}},"，":{"docs":{},"那":{"docs":{},"么":{"1":{"docs":{},"开":{"docs":{},"头":{"docs":{},"的":{"docs":{},"排":{"docs":{},"列":{"docs":{},"会":{"docs":{},"有":{"docs":{},"(":{"docs":{},"n":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}}}}}}}}}},"docs":{}}},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"*":{"docs":{},"n":{"docs":{},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}}}}}}}},".":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}},"?":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}},"f":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"*":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}},"docs":{}}}}}}}}}}},"/":{"2":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}},"3":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}},"docs":{}},">":{"docs":{},"m":{"docs":{},"?":{"docs":{},"(":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"m":{"docs":{},">":{"docs":{},">":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"n":{"docs":{},">":{"docs":{},">":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}},"x":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"y":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}}}}}}},"o":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.04}},"n":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.02564102564102564},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"c":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"e":{"docs":{},",":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},".":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}},"e":{"docs":{},".":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.03076923076923077},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}},",":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}},"t":{"docs":{},"o":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":1.689922480620155},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":1.4398921832884095},"107.-binary-tree-level-order-traversal-ii.html":{"ref":"107.-binary-tree-level-order-traversal-ii.html","tf":1.5535714285714284},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}},".":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}},")":{"docs":{},".":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":2.5153846153846153}},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}},"u":{"docs":{},"t":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.02531645569620253},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}},":":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.0297029702970297},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.03571428571428571},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.030612244897959183},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.024509803921568627},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.029411764705882353},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.044642857142857144},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.04838709677419355},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.03184713375796178},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0375},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.025974025974025976},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.028169014084507043},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.022222222222222223},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.01744186046511628},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.01744186046511628},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.013888888888888888},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.03076923076923077},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.023809523809523808},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.022727272727272728},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.017241379310344827},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.016853932584269662},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.022388059701492536},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.02857142857142857},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.023255813953488372},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.025},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.027777777777777776},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.045454545454545456},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.030612244897959183},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.029411764705882353},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.03571428571428571},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.030927835051546393},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.02702702702702703},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.022900763358778626},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.05263157894736842},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.030927835051546393},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.016597510373443983},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.016304347826086956}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},".":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}}}}}},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}},"s":{"docs":{},",":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}},"r":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.027522935779816515},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0273972602739726},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}},".":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}},"s":{"docs":{},",":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},".":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}},"s":{"docs":{},":":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}},")":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}},"n":{"docs":{},"d":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}},"(":{"1":{"docs":{},")":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}},"9":{"docs":{},"^":{"docs":{},"k":{"docs":{},")":{"docs":{},",":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}},"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}},"g":{"docs":{},"n":{"docs":{},"*":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}},"n":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}},")":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"适":{"docs":{},"用":{"docs":{},"于":{"docs":{},"数":{"docs":{},"字":{"docs":{},"比":{"docs":{},"较":{"docs":{},"少":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"一":{"docs":{},"共":{"docs":{},"就":{"3":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"是":{"docs":{},"比":{"docs":{},"较":{"docs":{},"适":{"docs":{},"合":{"docs":{},"的":{"docs":{},"。":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}},"c":{"docs":{},"(":{"9":{"docs":{},",":{"docs":{},"k":{"docs":{},")":{"docs":{},")":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}},"docs":{}}}},"c":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}},"r":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}},",":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}},"e":{"docs":{},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}},".":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.02654867256637168}},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}}}}}}}}}}},"j":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.04065040650406504},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0228310502283105}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}},")":{"docs":{},",":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}},"f":{"docs":{},"f":{"docs":{},".":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}},"p":{"1":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135}},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}},"2":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.012953367875647668}},")":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}},"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.03333333333333333},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.029411764705882353},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.03821656050955414},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.022641509433962263},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.026881720430107527},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.023809523809523808}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.023255813953488372},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},",":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}},".":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}}},";":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}},"t":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":2.5285714285714285},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":2.0253164556962027}},".":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.023255813953488372},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.023255813953488372},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.018404907975460124}},".":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.01652892561983471}},":":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}},"e":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.012738853503184714},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.025210084033613446}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":2.5441176470588234}},",":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}},"e":{"docs":{},"r":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"=":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},";":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}},"p":{"docs":{},"r":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},";":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}}}}},"o":{"docs":{},"w":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}},"v":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.010582010582010581}},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909}}}}},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":1.4539951573849876},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":2.0127388535031847}},",":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.012738853503184714}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}},",":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}},".":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{},"c":{"docs":{},"m":{"docs":{},"p":{"docs":{},">":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}},"c":{"docs":{},"e":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}},".":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}},":":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}},"m":{"docs":{},"e":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":3.380208333333333}}}}},"=":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{},"i":{"docs":{},")":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}},"docs":{}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},":":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.015873015873015872},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.012738853503184714},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}},"r":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}},"z":{"docs":{},"z":{"docs":{},"l":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666}},"e":{"docs":{},".":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}},"s":{"docs":{},"h":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.013761467889908258},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0136986301369863}},"进":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"，":{"docs":{},"访":{"docs":{},"问":{"docs":{},"到":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"时":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"就":{"docs":{},"是":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"x":{"docs":{},")":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},",":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}},"o":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.029239766081871343},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.029585798816568046}},"s":{"docs":{},"(":{"2":{"5":{"6":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}},"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}},"docs":{}},"docs":{}},"docs":{},"s":{"1":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"=":{"1":{"docs":{},";":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}},"docs":{}}}},"docs":{}}}},"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},"=":{"docs":{},"i":{"docs":{},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}}}}}}}},",":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"e":{"docs":{},",":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},".":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}},"=":{"0":{"docs":{},";":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}},"\"":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}},"i":{"docs":{},"t":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":1.2669491525423728},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":2.5384615384615383},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":2.532258064516129},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}},")":{"docs":{},"{":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}},"_":{"1":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"_":{"2":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}},"docs":{}}},"docs":{}}}}}}},"docs":{}}},"docs":{}},";":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":1.5535714285714284},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":2.0186915887850465}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}},"w":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":3.358333333333333}}}}},"e":{"docs":{},"r":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":3.3684210526315788}}}}},"r":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":2.0112359550561796}}}}}},"p":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}},"(":{"docs":{},")":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}}}},",":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}},"操":{"docs":{},"作":{"docs":{},"需":{"docs":{},"要":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"到":{"docs":{},"这":{"docs":{},"里":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"的":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{},"首":{"docs":{},"先":{"docs":{},"得":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"执":{"docs":{},"行":{"docs":{},"s":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":2.5253164556962027},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":3.353741496598639},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":3.365591397849462},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":2.5375},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":3.3774509803921564},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":2.5095238095238095}},"e":{"docs":{},".":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.030612244897959183},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714}}}}}},"h":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":3.359420289855072},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":2.517699115044248},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":2.5476190476190474},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":3.3636363636363633},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":2.5136986301369864},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":1.7013888888888888},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.028}},".":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872}}},"'":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}},")":{"docs":{},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}},"t":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":3.3483709273182956},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":3.397849462365591},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":2.5625}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}},"s":{"docs":{},".":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":3.3422619047619047},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":3.3468468468468466},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":2.5344827586206895},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":2.0076923076923077}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}},".":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"_":{"2":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}},"3":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}},"4":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}},"docs":{}}}}},"s":{"docs":{},"s":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364}},"?":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}},".":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"插":{"docs":{},"入":{"docs":{},"操":{"docs":{},"作":{"docs":{},"时":{"docs":{},"间":{"docs":{},"也":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"'":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":3.373333333333333}}}}}}},"i":{"docs":{},"r":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":2.511111111111111}},":":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}},"s":{"docs":{},",":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}},")":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}},";":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186}}}},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":2.01010101010101}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}},"s":{"docs":{},",":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}},".":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}},"。":{"docs":{},"于":{"docs":{},"是":{"docs":{},"我":{"docs":{},"将":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"和":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"标":{"docs":{},"志":{"docs":{},"位":{"docs":{},"，":{"docs":{},"从":{"2":{"docs":{},"行":{"2":{"docs":{},"列":{"docs":{},"开":{"docs":{},"始":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"将":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"那":{"docs":{},"行":{"docs":{},"和":{"docs":{},"列":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"位":{"docs":{},"设":{"docs":{},"置":{"docs":{},"为":{"0":{"docs":{},"标":{"docs":{},"志":{"docs":{},"位":{"docs":{},"。":{"docs":{},"之":{"docs":{},"后":{"docs":{},"再":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"和":{"docs":{},"第":{"docs":{},"一":{"docs":{},"列":{"docs":{},"，":{"docs":{},"将":{"docs":{},"有":{"docs":{},"标":{"docs":{},"志":{"docs":{},"位":{"docs":{},"的":{"docs":{},"那":{"docs":{},"一":{"docs":{},"行":{"docs":{},"或":{"docs":{},"者":{"docs":{},"一":{"docs":{},"列":{"docs":{},"置":{"docs":{},"为":{"docs":{},"零":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},".":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}},"u":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":3.348039215686274},"46.-permutations.html":{"ref":"46.-permutations.html","tf":5.011111111111111},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":3.3470319634703194},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":3.373333333333333}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"s":{"docs":{},".":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}}}}}}},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}},"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{},")":{"docs":{},";":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}},"n":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218}}},"e":{"docs":{},"k":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}},"/":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}},"(":{"docs":{},")":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}}}}}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}},",":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}},":":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749}}}}}}}}}}}},"s":{"1":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.024691358024691357},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.04054054054054054}},",":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}}}},".":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{},"b":{"1":{"docs":{},"+":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}},"docs":{}}}},"docs":{}}}}}}},"+":{"docs":{},"s":{"2":{"docs":{},">":{"docs":{},"s":{"2":{"docs":{},"+":{"docs":{},"s":{"1":{"docs":{},";":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}},"2":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.024691358024691357},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703}},")":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}},"{":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}}}}},",":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703}}},".":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}},";":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"2":{"docs":{},",":{"docs":{},"b":{"2":{"docs":{},"+":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}},"docs":{}}}},"docs":{}}}}}}}},"3":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.04054054054054054}},")":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}},",":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}},"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.03333333333333333},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.029411764705882353},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.03821656050955414},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.0425531914893617},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.033707865168539325},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.03787878787878788},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.028735632183908046},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.061224489795918366},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":3.3629629629629627},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.02040816326530612},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},".":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}},"n":{"docs":{},"d":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.03},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.02702702702702703},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.025477707006369428},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.05},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.027777777777777776},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.022988505747126436},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.021164021164021163},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.01910828025477707},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.018691588785046728},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}},"?":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}},"v":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.02531645569620253},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}},"e":{"docs":{},"n":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":2.018867924528302},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":2.0236220472440944},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":2.022727272727273},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":1.2669491525423728},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":3.3616352201257858},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":1.678030303030303},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":1.7087719298245612},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":1.6845238095238093},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":2.0202020202020203},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":2.532258064516129},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":1.4518272425249168},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":2.533613445378151},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":3.3468468468468466},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":1.695238095238095},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":1.463455149501661},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.022988505747126436}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"排":{"docs":{},"序":{"docs":{},"之":{"docs":{},"后":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"认":{"docs":{},"定":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"。":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"t":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}},"f":{"docs":{},"t":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}}}},"t":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":2.0412371134020617}}}}},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.03731343283582089},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.0379746835443038}},".":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}},"?":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}},",":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}},"s":{"docs":{},".":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.022388059701492536}}}}}}},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":3.353135313531353},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":2.526315789473684}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.02564102564102564},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.029411764705882353},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},":":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}},"m":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":3.343537414965986},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":3.3460721868365177},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":2.5123456790123457},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":2.5317460317460316},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":3.3636363636363633},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":2.5205479452054793},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":1.6805555555555554},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":2.016},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.012232415902140673},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":2.0294117647058822},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":2.5091743119266057}},"和":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}},"的":{"docs":{},"基":{"docs":{},"础":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"的":{"docs":{},"是":{"docs":{},"原":{"docs":{},"来":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"数":{"docs":{},"字":{"docs":{},"本":{"docs":{},"身":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"得":{"docs":{},"不":{"docs":{},"到":{"docs":{},"答":{"docs":{},"案":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"候":{"docs":{},"能":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"逼":{"docs":{},"近":{"docs":{},"需":{"docs":{},"求":{"docs":{},"值":{"docs":{},"。":{"docs":{},"记":{"docs":{},"得":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"如":{"docs":{},"何":{"docs":{},"识":{"docs":{},"别":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"题":{"docs":{},"目":{"docs":{},"要":{"docs":{},"求":{"docs":{},"不":{"docs":{},"能":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"法":{"docs":{},"。":{"docs":{},"现":{"docs":{},"在":{"docs":{},"回":{"docs":{},"顾":{"docs":{},"一":{"docs":{},"下":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}}}}}},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"法":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"左":{"docs":{},"右":{"docs":{},"向":{"docs":{},"中":{"docs":{},"间":{"docs":{},"逼":{"docs":{},"近":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"面":{"docs":{},"也":{"docs":{},"用":{"docs":{},"到":{"docs":{},"了":{"docs":{},"一":{"docs":{},"中":{"docs":{},"额":{"docs":{},"外":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"数":{"docs":{},"组":{"docs":{},"已":{"docs":{},"经":{"docs":{},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"和":{"docs":{},"小":{"docs":{},"于":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"，":{"docs":{},"就":{"docs":{},"将":{"docs":{},"小":{"docs":{},"的":{"docs":{},"变":{"docs":{},"大":{"docs":{},"一":{"docs":{},"点":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"+":{"docs":{},"+":{"docs":{},"，":{"docs":{},"反":{"docs":{},"之":{"docs":{},"大":{"docs":{},"的":{"docs":{},"减":{"docs":{},"小":{"docs":{},"。":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"为":{"docs":{},"基":{"docs":{},"础":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"题":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"要":{"docs":{},"求":{"3":{"docs":{},"个":{"docs":{},"数":{"docs":{},"加":{"docs":{},"起":{"docs":{},"来":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"加":{"docs":{},"起":{"docs":{},"来":{"docs":{},"为":{"docs":{},"零":{"docs":{},"减":{"docs":{},"去":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"成":{"docs":{},"了":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}},"了":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"一":{"docs":{},"下":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"，":{"docs":{},"之":{"docs":{},"后":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035}}},"=":{"0":{"docs":{},";":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},";":{"docs":{"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}},".":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}},")":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}},",":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}},"一":{"docs":{},"个":{"docs":{},"意":{"docs":{},"思":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"得":{"docs":{},"到":{"docs":{},"路":{"docs":{},"径":{"docs":{},"上":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"值":{"docs":{},"。":{"docs":{},"这":{"docs":{},"就":{"docs":{},"只":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"了":{"docs":{},"。":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008}},")":{"docs":{},";":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}}}}}},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008}}}}}}}}}}}}}}}}}}}},"b":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.016853932584269662},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":2.051546391752577}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"m":{"docs":{},"d":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":3.338951310861423}}}}}}}}}}}},"t":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":5.027777777777778},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":3.3563218390804597}},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}}}}}}}}}},".":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.022988505747126436}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":1.6864686468646863},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":2.5253164556962027},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":2.5106382978723403},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}},".":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":3.358333333333333},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":2.5285714285714285},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":2.0294117647058822},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}},".":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}}}}}},"t":{"docs":{},"l":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}},"r":{"docs":{},"e":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.02040816326530612},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}},"s":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":3.365180467091295}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":3.365333333333333},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.03076923076923077},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":2.5238095238095237},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358}},"i":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905}}},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"n":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.023809523809523808},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}}}},"=":{"1":{"docs":{},";":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.015267175572519083}}}},"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}},"z":{"docs":{},"e":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":2.0098039215686274},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}},"是":{"docs":{},"n":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}},"=":{"1":{"docs":{},";":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}},")":{"docs":{},"{":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}},",":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}}}},"p":{"docs":{},"l":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}},"u":{"docs":{},"l":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":2.510869565217391}}}}},"d":{"docs":{},"e":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":1.6801801801801801}}}}},"t":{"1":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.02586206896551724}}}}},"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}}}}}},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}},"2":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}}}}},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}},"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}},"c":{"docs":{},"k":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":1.692307692307692},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":1.4518272425249168},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":1.4460132890365447},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":1.4469763365468884}},")":{"docs":{},",":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.041666666666666664},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.0196078431372549},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.058823529411764705},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.03571428571428571},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.025477707006369428},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.05194805194805195},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.05319148936170213},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":3.3888888888888884},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":3.3738738738738734},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.033707865168539325},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.01744186046511628},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.017241379310344827},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":2.544776119402985},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.041666666666666664},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":3.3741496598639453},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.04411764705882353},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},",":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},"?":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}},"s":{"docs":{},".":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.029411764705882353}}},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}},".":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}},")":{"docs":{},".":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}},"&":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}},"docs":{}},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":3.351515151515151}},".":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.015748031496062992},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"u":{"docs":{},"r":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":1.4588744588744587},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"e":{"docs":{},".":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}},":":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}},"(":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"e":{"docs":{},"p":{"2":{"docs":{},"=":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},";":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}}}},"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.02631578947368421},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.031578947368421054},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.10476190476190476},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}},"=":{"0":{"docs":{},";":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"*":{"2":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}},"docs":{}}}}}}}}}},"s":{"docs":{},".":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.026785714285714284},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}},"i":{"docs":{},")":{"docs":{},";":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}},")":{"docs":{},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}},"t":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521}},"m":{"docs":{},"p":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}}},";":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.04310344827586207},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":3.357723577235772},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":2.0275229357798166},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":2.0228310502283104},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}},".":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.024390243902439025},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.013761467889908258},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}},"2":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}},"docs":{}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}},"有":{"docs":{},"普":{"docs":{},"通":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"的":{"docs":{},"接":{"docs":{},"口":{"docs":{},"，":{"docs":{},"能":{"docs":{},"够":{"docs":{},"处":{"docs":{},"理":{"docs":{},"正":{"docs":{},"常":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"来":{"docs":{},"充":{"docs":{},"当":{"docs":{},"正":{"docs":{},"常":{"docs":{},"的":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"。":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},".":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}},"s":{"docs":{},".":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"需":{"docs":{},"要":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"或":{"docs":{},"者":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"反":{"docs":{},"转":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"用":{"docs":{},"再":{"docs":{},"复":{"docs":{},"原":{"docs":{},"了":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"保":{"docs":{},"持":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"之":{"docs":{},"后":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"反":{"docs":{},"转":{"docs":{},"。":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"到":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"中":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"确":{"docs":{},"实":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"和":{"docs":{},"平":{"docs":{},"均":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"不":{"docs":{},"矛":{"docs":{},"盾":{"docs":{},"。":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"就":{"docs":{},"将":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}}},"和":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.021406727828746176},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"=":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}},"docs":{},"s":{"docs":{},")":{"docs":{},",":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}},";":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},"=":{"0":{"docs":{},",":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}},"1":{"docs":{},";":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}},"docs":{}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}},"i":{"docs":{},"r":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":3.352380952380952}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":3.385321100917431}},"'":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},"s":{"docs":{},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}},"c":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}}}}}}},"y":{"docs":{},")":{"docs":{},",":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.03184713375796178},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.06172839506172839}}}}}}}}}}},"u":{"docs":{},"d":{"docs":{},"i":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}},")":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}},",":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}},".":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}},";":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}},"o":{"docs":{},"w":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{},"*":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},";":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}}}}}}}}}}},";":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{},";":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.02857142857142857}}}}}},"n":{"docs":{},";":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}},"docs":{}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":2.524390243902439}}}}}},"e":{"docs":{},"t":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.025477707006369428},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":2.528169014084507},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.027777777777777776},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}}}}}}}}}}}}}},")":{"docs":{},".":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"=":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},";":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":2.0113636363636362},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":2.5384615384615383},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":2.518181818181818},"79.-word-search.html":{"ref":"79.-word-search.html","tf":3.3398268398268396},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":1.687719298245614},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":1.6787148594377508},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":2.0240963855421685},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":2.020408163265306},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":2.0125786163522013},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":1.4363233665559245},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":1.4588744588744587},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":2.5037735849056606},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":1.4447004608294929},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":2.020408163265306}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},"&":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}}}}}}}},"\"":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}},"b":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}},"p":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.030303030303030304}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}}}}}}}},".":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":3.36},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":2.5246913580246915},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":2.536144578313253},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.016304347826086956}},"e":{"docs":{},")":{"docs":{},".":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}},",":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}},".":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}},"t":{"docs":{},"i":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}},"l":{"docs":{},"l":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":1.7094017094017093},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":1.4750830564784052},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":1.469269102990033},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":1.4592462751971953}}},"f":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":2.0126582278481013}}}},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.022727272727272728}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}},"r":{"docs":{},"i":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}},"e":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}},";":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}}},"k":{"docs":{},")":{"docs":{},";":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}}}},"{":{"1":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}},"docs":{}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":2.522222222222222},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.018518518518518517},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},",":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}}}}}}},"t":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":2.0185185185185186}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":3.3627450980392153}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}},"r":{"docs":{},"e":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":3.356862745098039}}}}},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}},"x":{"docs":{},")":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":5.0131578947368425}}}}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":3.376543209876543}}}}}}},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":3.3415977961432506}}}}}}}},"y":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":3.3481481481481477}},"i":{"docs":{},"c":{"docs":{},":":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"i":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358}},"p":{"docs":{},"a":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135}}},"b":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135}}}}}}},"t":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.018518518518518517},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.016853932584269662},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.04081632653061224},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.036036036036036036},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}},"a":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.03409090909090909},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.03389830508474576},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.03184713375796178},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.031578947368421054},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612}},")":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}},".":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"但":{"docs":{},"是":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"可":{"docs":{},"能":{"docs":{},"是":{"docs":{},"有":{"docs":{},"b":{"docs":{},"u":{"docs":{},"g":{"docs":{},"，":{"docs":{},"代":{"docs":{},"码":{"docs":{},"是":{"docs":{},"正":{"docs":{},"确":{"docs":{},"的":{"docs":{},"但":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"得":{"docs":{},"不":{"docs":{},"到":{"docs":{},"合":{"docs":{},"理":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.04132231404958678}},",":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}},".":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471}}}}},"i":{"docs":{},"l":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.03550295857988166}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},";":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}}}},"e":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}},"n":{"docs":{},"k":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.03058103975535168}}}},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"出":{"docs":{},"现":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"。":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.025974025974025976},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.02631578947368421},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.010582010582010581},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"中":{"docs":{},"已":{"docs":{},"经":{"docs":{},"分":{"docs":{},"析":{"docs":{},"了":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"不":{"docs":{},"多":{"docs":{},"说":{"docs":{},"了":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"g":{"docs":{},"u":{"docs":{},"h":{"docs":{},"t":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}},"i":{"docs":{},"s":{"docs":{},":":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}},"n":{"docs":{},"k":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}},"r":{"docs":{},"d":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.02830188679245283},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"e":{"docs":{},",":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}}}}},"?":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087}}},".":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}},"\"":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}},"t":{"docs":{},":":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}},"w":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}},".":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}},"o":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":3.353741496598639},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":2.5416666666666665},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.02564102564102564},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":2.0283018867924527},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":2.533707865168539},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.024691358024691357},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.014814814814814815},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":2.0207253886010363},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.030612244897959183},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":3.350877192982456},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.030927835051546393},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612}}}}}}}}}}}}},".":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.014705882352941176},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.026785714285714284},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.030303030303030304},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.02040816326530612},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.045454545454545456},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.03571428571428571},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.020618556701030927},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.03508771929824561},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.030927835051546393}},".":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},";":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.025974025974025976},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}},",":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}}}}}}},"i":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}},"s":{"docs":{},".":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}},":":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":3.3466666666666662},"120.-triangle.html":{"ref":"120.-triangle.html","tf":5.0256410256410255}},"e":{"docs":{},",":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}},".":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}},")":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}}}}}},"e":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}},"(":{"docs":{},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.018867924528301886}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":2.5259740259740258}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":2.0105820105820107},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":1.689922480620155},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":1.4398921832884095},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":1.4455205811138012},"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":1.5535714285714284},"107.-binary-tree-level-order-traversal-ii.html":{"ref":"107.-binary-tree-level-order-traversal-ii.html","tf":1.5535714285714284},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":2.0127388535031847},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":2.0186915887850465}},"a":{"docs":{},"l":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"控":{"docs":{},"制":{"docs":{},"在":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"极":{"docs":{},"大":{"docs":{},"的":{"docs":{},"减":{"docs":{},"少":{"docs":{},"了":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"主":{"docs":{},"要":{"docs":{},"是":{"docs":{},"利":{"docs":{},"用":{"docs":{},"了":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"大":{"docs":{},"量":{"docs":{},"的":{"docs":{},"空":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{},"前":{"docs":{},"面":{"docs":{},"问":{"docs":{},"题":{"docs":{},"使":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"访":{"docs":{},"问":{"docs":{},"到":{"docs":{},"后":{"docs":{},"续":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"够":{"docs":{},"再":{"docs":{},"回":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"指":{"docs":{},"向":{"docs":{},"后":{"docs":{},"继":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"方":{"docs":{},"便":{"docs":{},"回":{"docs":{},"到":{"docs":{},"前":{"docs":{},"面":{"docs":{},"。":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"很":{"docs":{},"像":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"将":{"docs":{},"输":{"docs":{},"出":{"docs":{},"值":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"改":{"docs":{},"变":{"docs":{},"了":{"docs":{},"，":{"docs":{},"在":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"解":{"docs":{},"法":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"再":{"docs":{},"进":{"docs":{},"入":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"将":{"docs":{},"值":{"docs":{},"打":{"docs":{},"印":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"先":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"访":{"docs":{},"问":{"docs":{},"到":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"就":{"docs":{},"打":{"docs":{},"印":{"docs":{},"，":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"具":{"docs":{},"体":{"docs":{},"过":{"docs":{},"程":{"docs":{},"可":{"docs":{},"以":{"docs":{},"去":{"9":{"4":{"docs":{},"题":{"docs":{},"看":{"docs":{},"思":{"docs":{},"路":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259}},")":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}}}}}},"l":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.039755351681957186}}}}},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.023255813953488372},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.01744186046511628},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.029069767441860465}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.022388059701492536}}}}},"e":{"docs":{},"e":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":2.0105820105820107},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":1.6787148594377508},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":2.0120481927710845},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":2.020408163265306},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":2.0251572327044025},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":3.355555555555555},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":3.355555555555555},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":1.689922480620155},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":1.4436657681940699},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":2.0294117647058822},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":1.4455205811138012},"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":1.5535714285714284},"107.-binary-tree-level-order-traversal-ii.html":{"ref":"107.-binary-tree-level-order-traversal-ii.html","tf":1.5535714285714284},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":1.459579180509413},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":2.5434782608695654},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":2.0217391304347827},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.030303030303030304},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.02054794520547945},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":1.6912568306010927},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":1.6944444444444442},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":2.0191082802547773},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":2.0186915887850465},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":1.6801801801801801},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":2.025},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":2.5211267605633805},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":1.4447004608294929},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":1.6785714285714284},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":2.5495049504950495},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":2.016597510373444}},",":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.015873015873015872},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.018072289156626505},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.02040816326530612},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.018867924528301886},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.022222222222222223},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.02962962962962963},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.023255813953488372},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.022641509433962263},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.029411764705882353},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.025423728813559324},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.023255813953488372},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.021739130434782608},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.021739130434782608},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.022727272727272728},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.02054794520547945},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.02459016393442623},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.020833333333333332},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.012},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.01910828025477707},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.028037383177570093},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.02027027027027027},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.01875},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.02112676056338028},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.018518518518518517},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.017857142857142856},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.012448132780082987}},"e":{"docs":{},"(":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}},")":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}}}},"*":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.018867924528301886},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.01509433962264151},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.025423728813559324},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.015503875968992248},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.02112676056338028},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.017857142857142856},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.039603960396039604}},"l":{"docs":{},"e":{"docs":{},"=":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"=":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}},".":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}},",":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}},".":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},":":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}},")":{"docs":{},".":{"docs":{},"m":{"docs":{},"d":{"docs":{},")":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":1.675213675213675},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":1.4401993355481726},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":1.4401993355481726},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":1.440841367221735},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}},"s":{"docs":{},",":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}},".":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},")":{"docs":{},".":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}},"{":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}},"=":{"docs":{},"q":{"docs":{},"u":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}}}}},"/":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}},"?":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}},"p":{"docs":{},"s":{"docs":{},"：":{"docs":{},"这":{"docs":{},"里":{"docs":{},"能":{"docs":{},"用":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"表":{"docs":{},"示":{"docs":{},"，":{"docs":{},"一":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"只":{"docs":{},"有":{"4":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"二":{"docs":{},"是":{"docs":{},"长":{"docs":{},"度":{"docs":{},"只":{"docs":{},"有":{"1":{"0":{"docs":{},".":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"5":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"就":{"docs":{},"需":{"docs":{},"要":{"3":{"docs":{},"个":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"，":{"9":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"就":{"docs":{},"需":{"docs":{},"要":{"4":{"docs":{},"个":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"。":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"1":{"0":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"类":{"docs":{},"型":{"docs":{},"就":{"docs":{},"不":{"docs":{},"能":{"docs":{},"表":{"docs":{},"示":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"了":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"6":{"4":{"docs":{},"位":{"docs":{},"的":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"来":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"解":{"docs":{},"题":{"docs":{},"了":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"再":{"docs":{},"长":{"docs":{},"，":{"docs":{},"就":{"docs":{},"还":{"docs":{},"是":{"docs":{},"用":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"解":{"docs":{},"题":{"docs":{},"吧":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}},"p":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.022935779816513763},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},".":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.02857142857142857}}},"?":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}},"(":{"docs":{},")":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505}}}},",":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}}},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{},"可":{"docs":{},"以":{"docs":{},"像":{"docs":{},"上":{"docs":{},"面":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"得":{"docs":{},"到":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"减":{"docs":{},"少":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"低":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"在":{"docs":{},"每":{"docs":{},"次":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"设":{"docs":{},"置":{"docs":{},"为":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"重":{"docs":{},"新":{"docs":{},"设":{"docs":{},"置":{"docs":{},"为":{"docs":{},"队":{"docs":{},"列":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"操":{"docs":{},"作":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"即":{"docs":{},"可":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.03305785123966942},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.016},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}},"u":{"1":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.022556390977443608}},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}}},"t":{"docs":{},"o":{"docs":{},"u":{"1":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}},"docs":{}}}}}},"2":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405}},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}}},"t":{"docs":{},"o":{"docs":{},"u":{"2":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}},"docs":{}}}}}},"docs":{},"=":{"docs":{},"t":{"docs":{},"o":{"docs":{},"u":{"2":{"docs":{},";":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}},"docs":{}}}}}},"d":{"docs":{},"o":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}}}}}}}}}},";":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}},".":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}},":":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}}},"m":{"docs":{},"p":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}}}}}}}},"t":{"docs":{},"q":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}},"o":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863}}}}}},"i":{"docs":{},")":{"docs":{},";":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}},";":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}},")":{"docs":{},"{":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}},"=":{"1":{"docs":{},";":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}},"d":{"docs":{},"i":{"docs":{},",":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}},"s":{"docs":{},"t":{"1":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}}},"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}}}}}}}},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}},"q":{"1":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}},"docs":{}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},";":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}},"+":{"docs":{},"=":{"2":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}},"docs":{},"s":{"docs":{},"t":{"1":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}}},"docs":{}}}}},"{":{"docs":{},"}":{"docs":{},";":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}},"(":{"1":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}},"docs":{}}},"docs":{}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"+":{"docs":{},"=":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"p":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}},"m":{"docs":{},"p":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}},";":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}},"(":{"1":{"docs":{},")":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}},"docs":{},"n":{"docs":{},",":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}},")":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}},"/":{"2":{"docs":{},")":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}},"4":{"docs":{},")":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}},"docs":{}}}},")":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}},",":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}},"=":{"0":{"docs":{},";":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},";":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}},"u":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}}},"q":{"docs":{},"=":{"docs":{},"q":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}},".":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"s":{"docs":{},"o":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}},"c":{"docs":{},"(":{"docs":{},"k":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"u":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.024096385542168676},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}},">":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}},"&":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":3.359420289855072},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":2.517699115044248},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":1.684738955823293},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":2.036144578313253},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}},"t":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.009174311926605505}},".":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}},"{":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}},"p":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},":":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}},"要":{"docs":{},"求":{"docs":{},"能":{"docs":{},"不":{"docs":{},"能":{"docs":{},"不":{"docs":{},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"结":{"docs":{},"题":{"docs":{},"。":{"docs":{},"于":{"docs":{},"是":{"docs":{},"又":{"docs":{},"开":{"docs":{},"始":{"docs":{},"想":{"docs":{},"如":{"docs":{},"何":{"docs":{},"不":{"docs":{},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"在":{"docs":{},"c":{"docs":{},"+":{"docs":{},"+":{"docs":{},"中":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"的":{"docs":{},"结":{"docs":{},"构":{"docs":{},"和":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"很":{"docs":{},"像":{"docs":{},"，":{"docs":{},"动":{"docs":{},"态":{"docs":{},"数":{"docs":{},"组":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"也":{"docs":{},"很":{"docs":{},"适":{"docs":{},"合":{"docs":{},"存":{"docs":{},"储":{"docs":{},"数":{"docs":{},"字":{"docs":{},"中":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"位":{"docs":{},"。":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}},"e":{"docs":{},":":{"docs":{},"更":{"docs":{},"新":{"docs":{},"图":{"docs":{},"片":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"有":{"docs":{},"更":{"docs":{},"好":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"我":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"3":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"开":{"docs":{},"始":{"docs":{},"两":{"docs":{},"次":{"docs":{},"得":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"长":{"docs":{},"度":{"docs":{},"的":{"docs":{},"目":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"让":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"能":{"docs":{},"同":{"docs":{},"步":{"docs":{},"开":{"docs":{},"头":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"起":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"办":{"docs":{},"法":{"docs":{},"能":{"docs":{},"达":{"docs":{},"到":{"docs":{},"这":{"docs":{},"个":{"docs":{},"目":{"docs":{},"的":{"docs":{},"。":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"一":{"docs":{},"起":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"到":{"docs":{},"达":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"交":{"docs":{},"换":{"docs":{},"继":{"docs":{},"续":{"docs":{},"执":{"docs":{},"行":{"docs":{},"。":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"a":{"docs":{},"到":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"领":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},"，":{"docs":{},"b":{"docs":{},"到":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"令":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"b":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"，":{"docs":{},"也":{"docs":{},"能":{"docs":{},"消":{"docs":{},"除":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"之":{"docs":{},"间":{"docs":{},"的":{"docs":{},"差":{"docs":{},"距":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"提":{"docs":{},"到":{"docs":{},"里":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"c":{"docs":{},"程":{"docs":{},"序":{"docs":{},"员":{"docs":{},"，":{"docs":{},"尝":{"docs":{},"试":{"docs":{},"使":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"空":{"docs":{},"间":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"也":{"docs":{},"提":{"docs":{},"出":{"docs":{},"，":{"docs":{},"有":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"和":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"办":{"docs":{},"法":{"docs":{},"。":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}},"明":{"docs":{},"确":{"docs":{},"静":{"docs":{},"止":{"docs":{},"这":{"docs":{},"么":{"docs":{},"做":{"docs":{},"。":{"docs":{},"为":{"docs":{},"了":{"docs":{},"在":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"做":{"docs":{},"完":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"得":{"docs":{},"先":{"docs":{},"保":{"docs":{},"存":{"docs":{},"一":{"docs":{},"些":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.03773584905660377},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":2.022935779816514},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":2.0228310502283104}}},"d":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}}}}}}}}}}},";":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815}},"u":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.02040816326530612},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.02072538860103627},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},"e":{"docs":{},".":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}},"s":{"docs":{},".":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}},"i":{"docs":{},"d":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":3.351190476190476},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":2.5344827586206895},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":3.3588110403397025},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":2.0136054421768708},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},".":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}},",":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},",":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}},";":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},")":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135}},";":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}},")":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815}}}},",":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.02702702702702703},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.0297029702970297},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.04285714285714286},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.045454545454545456},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.031746031746031744},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.024096385542168676},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.011320754716981131},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.017241379310344827},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.025477707006369428},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.018691588785046728},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.02027027027027027},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.018867924528301886},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.02531645569620253},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},">":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.09090909090909091},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.03333333333333333},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0273972602739726},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.031746031746031744},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.039473684210526314},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.027777777777777776},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.034482758620689655},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.01509433962264151},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.02666666666666667},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.03225806451612903},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.012269938650306749},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}},"&":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}},"(":{"docs":{},"p":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}}}}}}},"docs":{}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}},"docs":{}}}}}}}},"{":{"docs":{},"}":{"docs":{},";":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}},"&":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}},"docs":{}}}}}}}}}}},";":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.023809523809523808}}}}}},"i":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}}}},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}},"docs":{}},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"q":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"=":{"docs":{},"t":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}},"v":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.022222222222222223},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":1.6734234234234233}}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}}}}}}}}}}}},"{":{"0":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}}},"1":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.030612244897959183},"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.019801980198019802},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253},"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.023809523809523808},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.02564102564102564},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.029411764705882353},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.02},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.07407407407407407},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.09090909090909091},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.023809523809523808},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.02830188679245283},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.02702702702702703},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.023622047244094488},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.03333333333333333},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.02247191011235955},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.03676470588235294},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.034482758620689655},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.022727272727272728},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.07692307692307693},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.03184713375796178},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.06172839506172839},"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.03225806451612903},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.025974025974025976},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.02631578947368421},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.03333333333333333},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0547945205479452},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.031746031746031744},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.025},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.02702702702702703},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.025},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.02631578947368421},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.015789473684210527},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.031746031746031744},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.025974025974025976},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.01904761904761905},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.028169014084507043},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.02127659574468085},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.027777777777777776},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.025974025974025976},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.026785714285714284},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.030303030303030304},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.02857142857142857},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.022556390977443608},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.021505376344086023},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.034482758620689655},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.024},"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.045454545454545456},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.042328042328042326},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.018072289156626505},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.024096385542168676},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.02040816326530612},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.018867924528301886},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.022222222222222223},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.022222222222222223},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.023255813953488372},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.022641509433962263},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.029411764705882353},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.025423728813559324},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.023255813953488372},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.021739130434782608},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.021739130434782608},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.022727272727272728},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.02054794520547945},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.02459016393442623},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.02666666666666667},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.02564102564102564},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.020833333333333332},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.01744186046511628},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.04938271604938271},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.02},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.03225806451612903},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.025},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.024464831804281346},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.03076923076923077},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.023809523809523808},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.015151515151515152},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.017241379310344827},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.029239766081871343},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0234375},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.03184713375796178},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.028037383177570093},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.029411764705882353},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.02027027027027027},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.02857142857142857},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.023255813953488372},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.024390243902439025},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.015544041450777202},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.025},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.027777777777777776},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.024096385542168676},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.018404907975460124},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.033783783783783786},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.029411764705882353},"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.045454545454545456},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.01652892561983471},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.03125},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.02040816326530612},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.045283018867924525},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.029411764705882353},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.01834862385321101},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.023809523809523808},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.020618556701030927},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.023529411764705882},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.01875},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.016},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.015267175572519083},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.027522935779816515},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.02112676056338028},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.018518518518518517},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.03508771929824561},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0273972602739726},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.02857142857142857},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.017857142857142856},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.02531645569620253},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.02040816326530612},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.015384615384615385},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.020618556701030927},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.012448132780082987},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.010869565217391304}},"}":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},";":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"}":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}},"{":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{},"处":{"docs":{},"理":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"首":{"docs":{},"先":{"docs":{},"在":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"中":{"docs":{},"对":{"docs":{},"比":{"docs":{},"以":{"docs":{},"下":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"存":{"docs":{},"在":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"在":{"docs":{},"之":{"docs":{},"后":{"docs":{},"很":{"docs":{},"多":{"docs":{},"能":{"docs":{},"一":{"docs":{},"次":{"docs":{},"便":{"docs":{},"利":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"解":{"docs":{},"答":{"docs":{},"里":{"docs":{},"都":{"docs":{},"会":{"docs":{},"出":{"docs":{},"现":{"docs":{},"，":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"保":{"docs":{},"存":{"docs":{},"前":{"docs":{},"面":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"之":{"docs":{},"后":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"状":{"docs":{},"态":{"docs":{},"再":{"docs":{},"来":{"docs":{},"对":{"docs":{},"比":{"docs":{},"。":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"也":{"docs":{},"提":{"docs":{},"到":{"docs":{},"了":{"docs":{},"，":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"题":{"docs":{},"并":{"docs":{},"且":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"是":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"首":{"docs":{},"先":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"能":{"docs":{},"否":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"题":{"docs":{},"。":{"docs":{},"这":{"docs":{},"题":{"docs":{},"正":{"docs":{},"好":{"docs":{},"可":{"docs":{},"以":{"docs":{},"。":{"docs":{},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"链":{"docs":{},"表":{"docs":{},"加":{"docs":{},"法":{"docs":{},"很":{"docs":{},"相":{"docs":{},"似":{"docs":{},"，":{"docs":{},"可":{"docs":{},"能":{"docs":{},"还":{"docs":{},"简":{"docs":{},"单":{"docs":{},"一":{"docs":{},"点":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"又":{"docs":{},"题":{"docs":{},"目":{"docs":{},"做":{"docs":{},"过":{"docs":{},"合":{"docs":{},"并":{"docs":{},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"k":{"docs":{},"个":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"借":{"docs":{},"助":{"docs":{},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"两":{"docs":{},"两":{"docs":{},"合":{"docs":{},"并":{"docs":{},"，":{"docs":{},"合":{"docs":{},"并":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"了":{"docs":{},"。":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"来":{"docs":{},"做":{"docs":{},"。":{"docs":{},"用":{"docs":{},"最":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"从":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"取":{"docs":{},"出":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"这":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"值":{"docs":{},"重":{"docs":{},"新":{"docs":{},"加":{"docs":{},"入":{"docs":{},"到":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"。":{"docs":{},"在":{"docs":{},"c":{"docs":{},"+":{"docs":{},"+":{"docs":{},"中":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"自":{"docs":{},"带":{"docs":{},"的":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"类":{"docs":{},"算":{"docs":{},"法":{"docs":{},"做":{"docs":{},"这":{"docs":{},"题":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"优":{"docs":{},"先":{"docs":{},"队":{"docs":{},"列":{"docs":{},"来":{"docs":{},"做":{"docs":{},"这":{"docs":{},"题":{"docs":{},"。":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"一":{"docs":{},"直":{"docs":{},"搞":{"docs":{},"不":{"docs":{},"清":{"docs":{},"这":{"docs":{},"几":{"docs":{},"个":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"本":{"docs":{},"质":{"docs":{},"区":{"docs":{},"别":{"docs":{},"和":{"docs":{},"如":{"docs":{},"何":{"docs":{},"去":{"docs":{},"写":{"docs":{},"。":{"docs":{},"这":{"docs":{},"个":{"docs":{},"我":{"docs":{},"总":{"docs":{},"结":{"docs":{},"出":{"docs":{},"了":{"docs":{},"规":{"docs":{},"律":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"，":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"，":{"docs":{},"在":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},">":{"docs":{},"=":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"次":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"就":{"docs":{},"会":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"。":{"docs":{},"左":{"docs":{},"开":{"docs":{},"右":{"docs":{},"闭":{"docs":{},"表":{"docs":{},"示":{"docs":{},"法":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"当":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"差":{"1":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"等":{"docs":{},"于":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"最":{"docs":{},"后":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"会":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"给":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},"。":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"会":{"docs":{},"在":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"处":{"docs":{},"重":{"docs":{},"合":{"docs":{},"。":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"每":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"运":{"docs":{},"行":{"docs":{},"n":{"docs":{},"次":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"平":{"docs":{},"方":{"docs":{},")":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"次":{"docs":{},"做":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"我":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"如":{"docs":{},"何":{"docs":{},"去":{"docs":{},"计":{"docs":{},"算":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"开":{"docs":{},"根":{"docs":{},"号":{"docs":{},"。":{"docs":{},"之":{"docs":{},"后":{"docs":{},"看":{"docs":{},"了":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"了":{"docs":{},"解":{"docs":{},"到":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"。":{"docs":{},"（":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"很":{"docs":{},"多":{"docs":{},"题":{"docs":{},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"，":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"范":{"docs":{},"围":{"docs":{},"中":{"docs":{},"找":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"可":{"docs":{},"以":{"docs":{},"找":{"docs":{},"到":{"docs":{},"排":{"docs":{},"除":{"docs":{},"一":{"docs":{},"半":{"docs":{},"数":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"条":{"docs":{},"件":{"docs":{},"很":{"docs":{},"难":{"docs":{},"找":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"仔":{"docs":{},"细":{"docs":{},"体":{"docs":{},"会":{"docs":{},"）":{"docs":{},"。":{"docs":{},"我":{"docs":{},"记":{"docs":{},"得":{"docs":{},"我":{"docs":{},"前":{"docs":{},"几":{"docs":{},"周":{"docs":{},"做":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"也":{"docs":{},"是":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"，":{"docs":{},"当":{"docs":{},"时":{"docs":{},"做":{"docs":{},"出":{"docs":{},"来":{"docs":{},"之":{"docs":{},"后":{"docs":{},"很":{"docs":{},"惊":{"docs":{},"讶":{"docs":{},"。":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"解":{"docs":{},"题":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"。":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"多":{"docs":{},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"。":{"docs":{},"后":{"docs":{},"来":{"docs":{},"知":{"docs":{},"道":{"docs":{},"这":{"docs":{},"里":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"。":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"没":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"这":{"docs":{},"是":{"docs":{},"个":{"docs":{},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"写":{"docs":{},"了":{"docs":{},"个":{"docs":{},"计":{"docs":{},"算":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{},"量":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"提":{"docs":{},"交":{"docs":{},"，":{"docs":{},"对":{"docs":{},"了":{"docs":{},"就":{"docs":{},"没":{"docs":{},"管":{"docs":{},"了":{"docs":{},"。":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"目":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"我":{"docs":{},"首":{"docs":{},"先":{"docs":{},"在":{"docs":{},"行":{"docs":{},"上":{"docs":{},"做":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"找":{"docs":{},"到":{"docs":{},"的":{"docs":{},"列":{"docs":{},"上":{"docs":{},"在":{"docs":{},"来":{"docs":{},"一":{"docs":{},"次":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"慢":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"其":{"docs":{},"实":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"就":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"种":{"docs":{},"二":{"docs":{},"维":{"docs":{},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"。":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"核":{"docs":{},"心":{"docs":{},"是":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"一":{"docs":{},"次":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"能":{"docs":{},"排":{"docs":{},"除":{"docs":{},"一":{"docs":{},"部":{"docs":{},"分":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"想":{"docs":{},"这":{"docs":{},"题":{"docs":{},"，":{"docs":{},"没":{"docs":{},"看":{"docs":{},"清":{"docs":{},"是":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"导":{"docs":{},"致":{"docs":{},"分":{"docs":{},"析":{"docs":{},"了":{"docs":{},"很":{"docs":{},"久":{"docs":{},"也":{"docs":{},"没":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"知":{"docs":{},"道":{"docs":{},"是":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"就":{"docs":{},"很":{"docs":{},"好":{"docs":{},"办":{"docs":{},"了":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"保":{"docs":{},"存":{"docs":{},"数":{"docs":{},"字":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"保":{"docs":{},"存":{"3":{"docs":{},"个":{"docs":{},"以":{"docs":{},"上":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"访":{"docs":{},"问":{"docs":{},"到":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"查":{"docs":{},"看":{"docs":{},"链":{"docs":{},"表":{"docs":{},"后":{"docs":{},"面":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"值":{"docs":{},"，":{"docs":{},"有":{"docs":{},"的":{"docs":{},"话":{"docs":{},"直":{"docs":{},"接":{"docs":{},"加":{"docs":{},"一":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"，":{"docs":{},"就":{"docs":{},"将":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"后":{"docs":{},"面":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"和":{"docs":{},"这":{"docs":{},"个":{"docs":{},"组":{"docs":{},"合":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"加":{"docs":{},"入":{"docs":{},"到":{"docs":{},"将":{"docs":{},"这":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"加":{"docs":{},"入":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"能":{"docs":{},"进":{"docs":{},"行":{"docs":{},"上":{"docs":{},"面":{"docs":{},"两":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"这":{"docs":{},"里":{"docs":{},"有":{"docs":{},"问":{"docs":{},"题":{"docs":{"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"最":{"docs":{},"后":{"docs":{},"运":{"docs":{},"行":{"docs":{},"实":{"docs":{},"际":{"docs":{},"是":{"4":{"8":{"0":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"而":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"运":{"docs":{},"行":{"docs":{},"实":{"docs":{},"际":{"docs":{},"是":{"8":{"docs":{},"m":{"docs":{},"s":{"docs":{},"。":{"docs":{},"提":{"docs":{},"升":{"docs":{},"速":{"docs":{},"度":{"docs":{},"可":{"docs":{},"以":{"docs":{},"说":{"docs":{},"是":{"docs":{},"很":{"docs":{},"大":{"docs":{},"了":{"docs":{},"。":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"，":{"docs":{},"毋":{"docs":{},"庸":{"docs":{},"置":{"docs":{},"疑":{"docs":{},"是":{"docs":{},"最":{"docs":{},"慢":{"docs":{},"的":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"种":{"docs":{},"和":{"docs":{},"第":{"docs":{},"三":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"用":{"docs":{},"的":{"docs":{},"类":{"docs":{},"似":{"docs":{},"投":{"docs":{},"票":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"超":{"docs":{},"过":{"docs":{},"一":{"docs":{},"半":{"docs":{},"以":{"docs":{},"上":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"当":{"docs":{},"选":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{},"当":{"docs":{},"前":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"当":{"docs":{},"选":{"docs":{},"元":{"docs":{},"素":{"docs":{},"得":{"docs":{},"票":{"docs":{},"数":{"docs":{},"加":{"docs":{},"一":{"docs":{},"。":{"docs":{},"否":{"docs":{},"则":{"docs":{},"减":{"docs":{},"一":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"则":{"docs":{},"换":{"docs":{},"当":{"docs":{},"选":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"有":{"docs":{},"一":{"docs":{},"半":{"docs":{},"以":{"docs":{},"上":{"docs":{},"保":{"docs":{},"证":{"docs":{},"了":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"能":{"docs":{},"选":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"主":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"三":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"使":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"解":{"docs":{},"答":{"docs":{},"。":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"中":{"docs":{},"用":{"docs":{},"的":{"docs":{},"是":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"。":{"docs":{},"一":{"docs":{},"定":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"在":{"docs":{},"c":{"docs":{},"+":{"docs":{},"+":{"docs":{},"中":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"和":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"之":{"docs":{},"间":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"docs":{},"，":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"底":{"docs":{},"层":{"docs":{},"是":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"，":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"底":{"docs":{},"层":{"docs":{},"是":{"docs":{},"红":{"docs":{},"黑":{"docs":{},"树":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"插":{"docs":{},"入":{"docs":{},"，":{"docs":{},"查":{"docs":{},"找":{"docs":{},"。":{"docs":{},"需":{"docs":{},"要":{"docs":{},"使":{"docs":{},"用":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"。":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"利":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"得":{"docs":{},"到":{"docs":{},"解":{"docs":{},"答":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"保":{"docs":{},"存":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"做":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"了":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"看":{"docs":{},"到":{"docs":{},"题":{"docs":{},"目":{"docs":{},"就":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"应":{"docs":{},"该":{"docs":{},"用":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"做":{"docs":{},"。":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"让":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"先":{"docs":{},"走":{"docs":{},"，":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"每":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},"记":{"docs":{},"录":{"docs":{},"走":{"docs":{},"过":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"出":{"docs":{},"现":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"走":{"docs":{},"过":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"之":{"docs":{},"前":{"docs":{},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"就":{"docs":{},"让":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"走":{"docs":{},"。":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"每":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},"，":{"docs":{},"擦":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"记":{"docs":{},"录":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"擦":{"docs":{},"出":{"docs":{},"的":{"docs":{},"刚":{"docs":{},"好":{"docs":{},"是":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"停":{"docs":{},"止":{"docs":{},"，":{"docs":{},"又":{"docs":{},"轮":{"docs":{},"到":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"走":{"docs":{},"。":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"每":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},"计":{"docs":{},"算":{"docs":{},"一":{"docs":{},"次":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"之":{"docs":{},"差":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"差":{"docs":{},"值":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"次":{"docs":{},"做":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"的":{"docs":{},"解":{"docs":{},"答":{"docs":{},"有":{"docs":{},"可":{"docs":{},"以":{"docs":{},"优":{"docs":{},"化":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"。":{"docs":{},"在":{"docs":{},"外":{"docs":{},"层":{"docs":{},"循":{"docs":{},"环":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"大":{"docs":{},"于":{"0":{"docs":{},"的":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"了":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"从":{"9":{"6":{"docs":{},"m":{"docs":{},"s":{"docs":{},"提":{"docs":{},"升":{"docs":{},"到":{"docs":{},"了":{"8":{"8":{"docs":{},"m":{"docs":{},"s":{"docs":{},"。":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}},"docs":{}},"docs":{}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"真":{"docs":{},"的":{"docs":{},"就":{"docs":{},"很":{"docs":{},"有":{"docs":{},"经":{"docs":{},"验":{"docs":{},"了":{"docs":{},"，":{"docs":{},"看":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"题":{"docs":{},"并":{"docs":{},"且":{"docs":{},"返":{"docs":{},"回":{"docs":{},"的":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"直":{"docs":{},"接":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"这":{"docs":{},"题":{"docs":{},"不":{"docs":{},"递":{"docs":{},"归":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"也":{"docs":{},"能":{"docs":{},"做":{"docs":{},"，":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"难":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"递":{"docs":{},"归":{"docs":{},"能":{"docs":{},"省":{"docs":{},"好":{"docs":{},"多":{"docs":{},"事":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"参":{"docs":{},"加":{"docs":{},"比":{"docs":{},"赛":{"docs":{},"了":{"docs":{},"，":{"docs":{},"当":{"docs":{},"时":{"docs":{},"又":{"docs":{},"止":{"docs":{},"步":{"docs":{},"在":{"docs":{},"第":{"docs":{},"三":{"docs":{},"题":{"docs":{},"。":{"docs":{},"第":{"docs":{},"三":{"docs":{},"题":{"docs":{},"当":{"docs":{},"时":{"docs":{},"其":{"docs":{},"实":{"docs":{},"想":{"docs":{},"到":{"docs":{},"用":{"docs":{},"记":{"docs":{},"忆":{"docs":{},"化":{"docs":{},"保":{"docs":{},"存":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"没":{"docs":{},"有":{"docs":{},"想":{"docs":{},"通":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"。":{"docs":{},"于":{"docs":{},"是":{"docs":{},"之":{"docs":{},"后":{"docs":{},"参":{"docs":{},"考":{"docs":{},"了":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"里":{"docs":{},"大":{"docs":{},"神":{"docs":{},"的":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"自":{"docs":{},"己":{"docs":{},"写":{"docs":{},"出":{"docs":{},"代":{"docs":{},"码":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"先":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"使":{"docs":{},"用":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"逼":{"docs":{},"近":{"docs":{},"，":{"docs":{},"求":{"docs":{},"得":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"也":{"docs":{},"是":{"docs":{},"之":{"docs":{},"后":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"里":{"docs":{},"没":{"docs":{},"有":{"docs":{},"给":{"docs":{},"出":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"算":{"docs":{},"法":{"docs":{},"思":{"docs":{},"想":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"排":{"docs":{},"序":{"docs":{},"之":{"docs":{},"后":{"docs":{},"再":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{},"排":{"docs":{},"序":{"docs":{},"最":{"docs":{},"快":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"便":{"docs":{},"利":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"做":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"：":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}},"这":{"docs":{},"题":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"3":{"docs":{},"种":{"docs":{},"解":{"docs":{},"法":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"刚":{"docs":{},"接":{"docs":{},"触":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"，":{"docs":{},"最":{"docs":{},"开":{"docs":{},"始":{"docs":{},"想":{"docs":{},"到":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"便":{"docs":{},"利":{"docs":{},"求":{"docs":{},"解":{"docs":{},"。":{"docs":{"1.-two-sum.html":{"ref":"1.-two-sum.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"很":{"docs":{},"快":{"docs":{},"相":{"docs":{},"出":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"进":{"docs":{},"入":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"会":{"docs":{},"有":{"docs":{},"很":{"docs":{},"多":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"。":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"从":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"角":{"docs":{},"度":{"docs":{},"思":{"docs":{},"考":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"a":{"docs":{},">":{"docs":{},"b":{"docs":{},",":{"docs":{},"那":{"docs":{},"么":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},")":{"docs":{},"中":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"数":{"docs":{},"字":{"docs":{},"相":{"docs":{},"与":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"0":{"docs":{},"。":{"docs":{},"这":{"docs":{},"个":{"docs":{},"很":{"docs":{},"好":{"docs":{},"证":{"docs":{},"明":{"docs":{},"，":{"docs":{},"a":{"docs":{},"&":{"docs":{},"a":{"docs":{},"+":{"1":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}},"docs":{}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"也":{"docs":{},"定":{"docs":{},"义":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"都":{"docs":{},"计":{"docs":{},"算":{"docs":{},"容":{"docs":{},"量":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"取":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"关":{"docs":{},"键":{"docs":{},"是":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"如":{"docs":{},"何":{"docs":{},"移":{"docs":{},"动":{"docs":{},"。":{"docs":{},"哪":{"docs":{},"边":{"docs":{},"的":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"更":{"docs":{},"小":{"docs":{},"我":{"docs":{},"就":{"docs":{},"移":{"docs":{},"动":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"移":{"docs":{},"动":{"docs":{},"必":{"docs":{},"定":{"docs":{},"导":{"docs":{},"致":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"减":{"docs":{},"小":{"docs":{},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"靠":{"docs":{},"高":{"docs":{},"度":{"docs":{},"增":{"docs":{},"高":{"docs":{},"，":{"docs":{},"才":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"提":{"docs":{},"高":{"docs":{},"总":{"docs":{},"容":{"docs":{},"量":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"样":{"docs":{},"移":{"docs":{},"动":{"docs":{},"不":{"docs":{},"会":{"docs":{},"漏":{"docs":{},"掉":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"1":{"5":{"docs":{},"题":{"docs":{},"算":{"docs":{},"法":{"docs":{},"基":{"docs":{},"本":{"docs":{},"一":{"docs":{},"模":{"docs":{},"一":{"docs":{},"样":{"docs":{"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456}},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"判":{"docs":{},"断":{"docs":{},"相":{"docs":{},"等":{"docs":{},"改":{"docs":{},"成":{"docs":{},"的":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"相":{"docs":{},"近":{"docs":{},"的":{"docs":{},"，":{"docs":{"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"docs":{},"就":{"docs":{},"是":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"区":{"docs":{},"别":{"docs":{},"对":{"docs":{},"算":{"docs":{},"法":{"docs":{},"会":{"docs":{},"产":{"docs":{},"生":{"docs":{},"很":{"docs":{},"大":{"docs":{},"的":{"docs":{},"影":{"docs":{},"响":{"docs":{},"。":{"docs":{},"两":{"docs":{},"个":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"还":{"docs":{},"是":{"docs":{},"用":{"docs":{},"上":{"docs":{},"题":{"docs":{},"的":{"docs":{},"做":{"docs":{},"法":{"docs":{},"，":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"多":{"docs":{},"一":{"docs":{},"倍":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"在":{"docs":{},"于":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"找":{"docs":{},"到":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"规":{"docs":{},"避":{"docs":{},"这":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"在":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"的":{"docs":{},"行":{"docs":{},"动":{"docs":{},"路":{"docs":{},"上":{"docs":{},"放":{"docs":{},"了":{"docs":{},"一":{"docs":{},"些":{"docs":{},"障":{"docs":{},"碍":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"和":{"docs":{},"上":{"docs":{},"题":{"docs":{},"做":{"docs":{},"法":{"docs":{},"没":{"docs":{},"什":{"docs":{},"么":{"docs":{},"区":{"docs":{},"别":{"docs":{},"，":{"docs":{},"当":{"docs":{},"当":{"docs":{},"前":{"docs":{},"走":{"docs":{},"到":{"docs":{},"障":{"docs":{},"碍":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"把":{"docs":{},"这":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"赋":{"docs":{},"值":{"0":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"好":{"docs":{},"处":{"docs":{},"是":{"docs":{},"，":{"docs":{},"既":{"docs":{},"可":{"docs":{},"以":{"docs":{},"代":{"docs":{},"表":{"docs":{},"这":{"docs":{},"里":{"docs":{},"没":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"案":{"docs":{},"可":{"docs":{},"以":{"docs":{},"走":{"docs":{},"到":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"在":{"docs":{},"他":{"docs":{},"右":{"docs":{},"边":{"docs":{},"和":{"docs":{},"下":{"docs":{},"面":{"docs":{},"得":{"docs":{},"到":{"docs":{},"总":{"docs":{},"线":{"docs":{},"路":{"docs":{},"时":{"docs":{},"，":{"docs":{},"加":{"docs":{},"上":{"docs":{},"的":{"docs":{},"是":{"0":{"docs":{},"。":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"很":{"docs":{},"像":{"docs":{},"，":{"docs":{},"用":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"就":{"docs":{},"能":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"利":{"docs":{},"用":{"docs":{},"数":{"docs":{},"学":{"docs":{},"证":{"docs":{},"明":{"docs":{},"可":{"docs":{},"以":{"docs":{},"得":{"docs":{},"知":{"docs":{},"，":{"docs":{},"当":{"docs":{},"两":{"docs":{},"个":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"相":{"docs":{},"交":{"docs":{},"时":{"docs":{},"，":{"docs":{},"他":{"docs":{},"们":{"docs":{},"到":{"docs":{},"连":{"docs":{},"接":{"docs":{},"点":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"就":{"docs":{},"是":{"docs":{},"起":{"docs":{},"始":{"docs":{},"点":{"docs":{},"到":{"docs":{},"连":{"docs":{},"接":{"docs":{},"点":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"起":{"docs":{},"始":{"docs":{},"点":{"docs":{},"出":{"docs":{},"发":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"从":{"docs":{},"相":{"docs":{},"交":{"docs":{},"点":{"docs":{},"出":{"docs":{},"发":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"相":{"docs":{},"交":{"docs":{},"之":{"docs":{},"后":{"docs":{},"就":{"docs":{},"能":{"docs":{},"知":{"docs":{},"道":{"docs":{},"连":{"docs":{},"接":{"docs":{},"点":{"docs":{},"是":{"docs":{},"哪":{"docs":{},"个":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"之":{"docs":{},"前":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285}}}}}}}}},"其":{"docs":{},"实":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"发":{"docs":{},"就":{"docs":{},"能":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"单":{"docs":{},"纯":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"太":{"docs":{},"慢":{"docs":{},"了":{"docs":{},"，":{"docs":{},"历":{"docs":{},"史":{"docs":{},"上":{"docs":{},"也":{"docs":{},"有":{"docs":{},"几":{"docs":{},"位":{"docs":{},"大":{"docs":{},"佬":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"很":{"docs":{},"慢":{"docs":{},"。":{"docs":{},"并":{"docs":{},"且":{"docs":{},"确":{"docs":{},"实":{"docs":{},"有":{"docs":{},"可":{"docs":{},"以":{"docs":{},"优":{"docs":{},"化":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"人":{"docs":{},"来":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"当":{"docs":{},"一":{"docs":{},"个":{"docs":{},"成":{"docs":{},"功":{"docs":{},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"次":{"docs":{},"之":{"docs":{},"后":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"失":{"docs":{},"败":{"docs":{},"了":{"docs":{},"，":{"docs":{},"他":{"docs":{},"不":{"docs":{},"会":{"docs":{},"前":{"docs":{},"进":{"docs":{},"一":{"docs":{},"位":{"docs":{},"重":{"docs":{},"新":{"docs":{},"来":{"docs":{},"。":{"docs":{},"而":{"docs":{},"是":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"已":{"docs":{},"知":{"docs":{},"的":{"docs":{},"不":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"开":{"docs":{},"始":{"docs":{},"随":{"docs":{},"机":{"docs":{},"选":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"判":{"docs":{},"断":{"docs":{},"当":{"docs":{},"前":{"docs":{},"汽":{"docs":{},"油":{"docs":{},"量":{"docs":{},"是":{"docs":{},"正":{"docs":{},"还":{"docs":{},"是":{"docs":{},"负":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"负":{"docs":{},"就":{"docs":{},"将":{"docs":{},"开":{"docs":{},"始":{"docs":{},"位":{"docs":{},"置":{"docs":{},"向":{"docs":{},"挪":{"docs":{},"动":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{},"看":{"docs":{},"能":{"docs":{},"否":{"docs":{},"增":{"docs":{},"加":{"docs":{},"汽":{"docs":{},"油":{"docs":{},"量":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"向":{"docs":{},"后":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"位":{"docs":{},"。":{"docs":{},"知":{"docs":{},"道":{"docs":{},"两":{"docs":{},"位":{"docs":{},"置":{"docs":{},"重":{"docs":{},"合":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"判":{"docs":{},"断":{"docs":{},"总":{"docs":{},"的":{"docs":{},"汽":{"docs":{},"油":{"docs":{},"量":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"正":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"正":{"docs":{},"就":{"docs":{},"代":{"docs":{},"表":{"docs":{},"能":{"docs":{},"走":{"docs":{},"完":{"docs":{},"。":{"docs":{},"这":{"docs":{},"也":{"docs":{},"是":{"docs":{},"用":{"docs":{},"类":{"docs":{},"似":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"的":{"docs":{},"两":{"docs":{},"指":{"docs":{},"针":{"docs":{},"逼":{"docs":{},"近":{"docs":{},"法":{"docs":{},"，":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"汽":{"docs":{},"油":{"docs":{},"量":{"docs":{},"需":{"docs":{},"要":{"docs":{},"大":{"docs":{},"于":{"0":{"docs":{},"。":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"链":{"docs":{},"表":{"docs":{},"判":{"docs":{},"圈":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"建":{"docs":{},"模":{"docs":{},"版":{"docs":{},"本":{"docs":{},"，":{"docs":{},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}}},"很":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"正":{"docs":{},"则":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"很":{"docs":{},"像":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"还":{"docs":{},"简":{"docs":{},"单":{"docs":{},"一":{"docs":{},"点":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"中":{"docs":{},"间":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"借":{"docs":{},"鉴":{"docs":{},"前":{"docs":{},"面":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"解":{"docs":{},"答":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"?":{"docs":{},"其":{"docs":{},"实":{"docs":{},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},".":{"docs":{},"一":{"docs":{},"样":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"*":{"docs":{},"比":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"*":{"docs":{},"更":{"docs":{},"加":{"docs":{},"加":{"docs":{},"单":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"上":{"docs":{},"题":{"docs":{},"的":{"docs":{},"简":{"docs":{},"化":{"docs":{},"版":{"docs":{},"本":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"数":{"docs":{},"量":{"docs":{},"即":{"docs":{},"可":{"docs":{"52.-n-queens-ii.html":{"ref":"52.-n-queens-ii.html","tf":0.2}}}}}}}}}}}}}}},"进":{"docs":{},"阶":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"树":{"docs":{},"不":{"docs":{},"再":{"docs":{},"是":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"里":{"docs":{},"的":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"对":{"docs":{},"我":{"docs":{},"们":{"docs":{},"没":{"docs":{},"啥":{"docs":{},"用":{"docs":{},"了":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"也":{"docs":{},"必":{"docs":{},"须":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"才":{"docs":{},"能":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"。":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"系":{"docs":{},"列":{"docs":{},"的":{"docs":{},"第":{"docs":{},"二":{"docs":{},"题":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"题":{"docs":{},"是":{"docs":{},"求":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"占":{"docs":{},"一":{"docs":{},"半":{"docs":{},"以":{"docs":{},"上":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"主":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"要":{"docs":{},"求":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"，":{"docs":{},"关":{"docs":{},"键":{"docs":{},"是":{"docs":{},"要":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"左":{"docs":{},"和":{"docs":{},"最":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"两":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"相":{"docs":{},"减":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{},"关":{"docs":{},"键":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"安":{"docs":{},"排":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"类":{"docs":{},"似":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"的":{"docs":{},"表":{"docs":{},"示":{"docs":{},"法":{"docs":{},"。":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"，":{"docs":{},"从":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"或":{"docs":{},"者":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"开":{"docs":{},"始":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"思":{"docs":{},"考":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"从":{"docs":{},"这":{"docs":{},"里":{"docs":{},"出":{"docs":{},"发":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"一":{"docs":{},"步":{"docs":{},"步":{"docs":{},"和":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"逼":{"docs":{},"近":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"目":{"docs":{},"其":{"docs":{},"实":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"样":{"docs":{},"都":{"docs":{},"能":{"docs":{},"做":{"docs":{},"得":{"docs":{},"出":{"docs":{},"。":{"docs":{},"只":{"docs":{},"是":{"docs":{},"有":{"docs":{},"些":{"docs":{},"人":{"docs":{},"做":{"docs":{},"的":{"docs":{},"简":{"docs":{},"单":{"docs":{},"有":{"docs":{},"些":{"docs":{},"人":{"docs":{},"做":{"docs":{},"的":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"用":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"难":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"所":{"docs":{},"有":{"docs":{},"，":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"为":{"1":{"docs":{},"的":{"docs":{},"点":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"没":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"1":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"为":{"0":{"docs":{},".":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"字":{"docs":{},"典":{"docs":{},"树":{"docs":{},"解":{"docs":{},"决":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"接":{"docs":{},"口":{"docs":{},"和":{"docs":{},"这":{"docs":{},"题":{"docs":{},"都":{"docs":{},"差":{"docs":{},"不":{"docs":{},"多":{"docs":{},"。":{"2":{"0":{"8":{"docs":{},".":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"也":{"docs":{},"是":{"docs":{},"用":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"这":{"docs":{},"几":{"docs":{},"个":{"docs":{},"用":{"docs":{},"字":{"docs":{},"典":{"docs":{},"树":{"docs":{},"解":{"docs":{},"决":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"一":{"docs":{},"起":{"docs":{},"出":{"docs":{},"现":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"很":{"docs":{},"有":{"docs":{},"意":{"docs":{},"思":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"可":{"docs":{},"以":{"docs":{},"总":{"docs":{},"结":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"给":{"docs":{},"你":{"docs":{},"很":{"docs":{},"多":{"docs":{},"词":{"docs":{},"，":{"docs":{},"让":{"docs":{},"你":{"docs":{},"保":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"中":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"提":{"docs":{},"供":{"docs":{},"快":{"docs":{},"速":{"docs":{},"的":{"docs":{},"查":{"docs":{},"找":{"docs":{},"接":{"docs":{},"口":{"docs":{},"。":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"不":{"docs":{},"好":{"docs":{},"分":{"docs":{},"析":{"docs":{},"，":{"docs":{},"现":{"docs":{},"在":{"docs":{},"假":{"docs":{},"设":{"docs":{},"有":{"docs":{},"k":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"大":{"docs":{},"小":{"docs":{},"都":{"docs":{},"是":{"docs":{},"n":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"建":{"docs":{},"堆":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"(":{"docs":{},"我":{"docs":{},"这":{"docs":{},"题":{"docs":{},"不":{"docs":{},"是":{"docs":{},"交":{"docs":{},"换":{"docs":{},"建":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"个":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},")":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"拿":{"docs":{},"出":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{},"，":{"docs":{},"再":{"docs":{},"插":{"docs":{},"入":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"n":{"docs":{},"*":{"docs":{},"k":{"docs":{},"次":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"+":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{},"*":{"docs":{},"n":{"docs":{},"*":{"docs":{},"k":{"docs":{},",":{"docs":{},"所":{"docs":{},"以":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"k":{"docs":{},"l":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{},".":{"docs":{},"当":{"docs":{},"然":{"docs":{},"这":{"docs":{},"只":{"docs":{},"是":{"docs":{},"大":{"docs":{},"致":{"docs":{},"分":{"docs":{},"析":{"docs":{},"。":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"多":{"docs":{},"执":{"docs":{},"行":{"3":{"2":{"docs":{},"次":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}}},"docs":{}}}}}}}}}}},"docs":{}},"docs":{}}}}},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"只":{"docs":{},"有":{"docs":{},"o":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"很":{"docs":{},"不":{"docs":{},"错":{"docs":{},"的":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"每":{"docs":{},"次":{"docs":{},"操":{"docs":{},"作":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"，":{"docs":{},"总":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"题":{"docs":{},"目":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"难":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"限":{"docs":{},"制":{"docs":{},"了":{"docs":{},"我":{"docs":{},"们":{"docs":{},"，":{"docs":{},"希":{"docs":{},"望":{"docs":{},"我":{"docs":{},"们":{"docs":{},"使":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"d":{"docs":{},"o":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"意":{"docs":{},"思":{"docs":{},"简":{"docs":{},"单":{"docs":{},"装":{"docs":{},"换":{"docs":{},"过":{"docs":{},"来":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"块":{"docs":{},"圆":{"docs":{},"区":{"docs":{},"域":{"docs":{},"如":{"docs":{},"果":{"docs":{},"连":{"docs":{},"接":{"docs":{},"到":{"docs":{},"外":{"docs":{},"面":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"块":{"docs":{},"圆":{"docs":{},"就":{"docs":{},"不":{"docs":{},"变":{"docs":{},"成":{"docs":{},"x":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"都":{"docs":{},"变":{"docs":{},"为":{"docs":{},"x":{"docs":{},"。":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},"*":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"具":{"docs":{},"体":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"分":{"docs":{},"析":{"docs":{},"如":{"docs":{},"下":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"好":{"docs":{},"分":{"docs":{},"析":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"在":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"中":{"docs":{},"运":{"docs":{},"行":{"docs":{},"时":{"docs":{},"间":{"docs":{},"也":{"docs":{},"很":{"docs":{},"快":{"docs":{},"了":{"docs":{},"，":{"docs":{},"贴":{"docs":{},"个":{"docs":{},"图":{"docs":{},"。":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"还":{"docs":{},"是":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"解":{"docs":{},"决":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"上":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"摆":{"docs":{},"放":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"于":{"docs":{},"后":{"docs":{},"面":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"调":{"docs":{},"用":{"docs":{},"函":{"docs":{},"数":{"docs":{},"处":{"docs":{},"理":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"如":{"docs":{},"何":{"docs":{},"找":{"docs":{},"到":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"我":{"docs":{},"们":{"docs":{},"给":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"摆":{"docs":{},"放":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"替":{"docs":{},"换":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"替":{"docs":{},"换":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"和":{"docs":{},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"字":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"替":{"docs":{},"换":{"docs":{},"，":{"docs":{},"查":{"docs":{},"看":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"解":{"docs":{},"决":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"两":{"docs":{},"次":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"了":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"这":{"docs":{},"里":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"，":{"docs":{},"这":{"docs":{},"是":{"docs":{},"和":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"区":{"docs":{},"别":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"。":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"还":{"docs":{},"是":{"docs":{},"用":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"题":{"docs":{},"通":{"docs":{},"用":{"docs":{},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"确":{"docs":{},"实":{"docs":{},"不":{"docs":{},"是":{"docs":{},"太":{"docs":{},"好":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"会":{"docs":{},"有":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},",":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"先":{"docs":{},"保":{"docs":{},"存":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"再":{"docs":{},"处":{"docs":{},"理":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"开":{"docs":{},"始":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"发":{"docs":{},"送":{"docs":{},"时":{"docs":{},"间":{"docs":{},"和":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"被":{"docs":{},"拉":{"docs":{},"满":{"docs":{},"了":{"docs":{},"。":{"docs":{},"过":{"docs":{},"不":{"docs":{},"了":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"测":{"docs":{},"试":{"docs":{},"样":{"docs":{},"例":{"docs":{},"。":{"docs":{},"后":{"docs":{},"来":{"docs":{},"看":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"k":{"docs":{},"m":{"docs":{},"p":{"docs":{},"算":{"docs":{},"法":{"docs":{},"解":{"docs":{},"这":{"docs":{},"题":{"docs":{},"。":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"我":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"太":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"，":{"docs":{},"查":{"docs":{},"了":{"docs":{},"资":{"docs":{},"料":{"docs":{},"，":{"docs":{},"网":{"docs":{},"上":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"说":{"docs":{},"法":{"docs":{},"，":{"docs":{},"我":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},"和":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"!":{"docs":{},")":{"docs":{},"都":{"docs":{},"有":{"docs":{},"道":{"docs":{},"理":{"docs":{},"。":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"算":{"docs":{},"是":{"docs":{},"很":{"docs":{},"慢":{"docs":{},"的":{"docs":{},"了":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"达":{"docs":{},"到":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"建":{"docs":{},"议":{"docs":{},"使":{"docs":{},"用":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"我":{"docs":{},"比":{"docs":{},"较":{"docs":{},"喜":{"docs":{},"欢":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"链":{"docs":{},"表":{"docs":{},"题":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"才":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"处":{"docs":{},"理":{"docs":{},"。":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"实":{"docs":{},"现":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"说":{"docs":{},"一":{"docs":{},"下":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"方":{"docs":{},"程":{"docs":{},"如":{"docs":{},"何":{"docs":{},"理":{"docs":{},"解":{"docs":{},"。":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"不":{"docs":{},"一":{"docs":{},"定":{"docs":{},"比":{"docs":{},"两":{"docs":{},"个":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"更":{"docs":{},"快":{"docs":{},"，":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},"+":{"docs":{},"l":{"docs":{},"g":{"docs":{},"m":{"docs":{},")":{"docs":{},",":{"docs":{},"这":{"docs":{},"里":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{},")":{"docs":{},"；":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"太":{"docs":{},"好":{"docs":{},"分":{"docs":{},"析":{"docs":{},",":{"docs":{},"对":{"docs":{},"于":{"docs":{},"不":{"docs":{},"加":{"docs":{},"入":{"docs":{},"备":{"docs":{},"忘":{"docs":{},"录":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"出":{"docs":{},"每":{"docs":{},"一":{"docs":{},"种":{"docs":{},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"，":{"docs":{},"存":{"docs":{},"储":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"前":{"docs":{},"一":{"docs":{},"后":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"后":{"docs":{},"指":{"docs":{},"针":{"docs":{},"走":{"docs":{},"过":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"中":{"docs":{},"字":{"docs":{},"符":{"docs":{},"保":{"docs":{},"存":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"减":{"docs":{},"一":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"减":{"docs":{},"一":{"docs":{},"是":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"（":{"docs":{},"能":{"docs":{},"在":{"docs":{},"t":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"体":{"docs":{},"现":{"docs":{},"）":{"docs":{},"，":{"docs":{},"那":{"docs":{},"就":{"docs":{},"将":{"docs":{},"之":{"docs":{},"前":{"docs":{},"保":{"docs":{},"存":{"docs":{},"的":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"减":{"docs":{},"一":{"docs":{},"(":{"docs":{},"s":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"递":{"docs":{},"归":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"不":{"docs":{},"会":{"docs":{},"分":{"docs":{},"析":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{},"之":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"还":{"docs":{},"是":{"docs":{},"不":{"docs":{},"会":{"docs":{},"太":{"docs":{},"慢":{"docs":{},"的":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"得":{"docs":{},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"两":{"docs":{},"个":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"第":{"docs":{},"一":{"docs":{},"题":{"docs":{},"类":{"docs":{},"似":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"衍":{"docs":{},"生":{"docs":{},"出":{"docs":{},"来":{"docs":{},"。":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"生":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"。":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"有":{"docs":{},"很":{"docs":{},"多":{"docs":{},"种":{"docs":{},"表":{"docs":{},"示":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"生":{"docs":{},"成":{"docs":{},"一":{"docs":{},"种":{"docs":{},"就":{"docs":{},"行":{"docs":{},"，":{"docs":{},"那":{"docs":{},"当":{"docs":{},"然":{"docs":{},"是":{"docs":{},"生":{"docs":{},"成":{"docs":{},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"时":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"中":{"docs":{},"点":{"docs":{},"，":{"docs":{},"将":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"对":{"docs":{},"分":{"docs":{},"。":{"docs":{},"直":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"最":{"docs":{},"后":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"是":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"一":{"docs":{},"种":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"方":{"docs":{},"法":{"docs":{},"找":{"docs":{},"到":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"短":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"这":{"docs":{},"种":{"docs":{},"需":{"docs":{},"求":{"docs":{},"，":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"方":{"docs":{},"式":{"docs":{},"能":{"docs":{},"完":{"docs":{},"美":{"docs":{},"的":{"docs":{},"契":{"docs":{},"合":{"docs":{},"。":{"docs":{},"那":{"docs":{},"就":{"docs":{},"是":{"docs":{},"广":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"。":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"到":{"docs":{},"达":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"短":{"docs":{},"路":{"docs":{},"径":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"从":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"将":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"能":{"docs":{},"到":{"docs":{},"的":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"加":{"docs":{},"入":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"他":{"docs":{},"们":{"docs":{},"从":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"中":{"docs":{},"删":{"docs":{},"除":{"docs":{},"，":{"docs":{},"重":{"docs":{},"复":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"到":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"或":{"docs":{},"者":{"docs":{},"没":{"docs":{},"有":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"平":{"docs":{},"均":{"docs":{},"情":{"docs":{},"况":{"docs":{},"去":{"docs":{},"分":{"docs":{},"析":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"都":{"docs":{},"只":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"入":{"docs":{},"队":{"docs":{},"和":{"docs":{},"出":{"docs":{},"队":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"平":{"docs":{},"均":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"进":{"docs":{},"行":{"docs":{},"转":{"docs":{},"换":{"3":{"docs":{},"次":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"有":{"4":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"首":{"docs":{},"尾":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"话":{"docs":{},"也":{"docs":{},"有":{"3":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"了":{"docs":{},"，":{"docs":{},"用":{"docs":{},"一":{"docs":{},"位":{"docs":{},"是":{"docs":{},"表":{"docs":{},"示":{"docs":{},"不":{"docs":{},"了":{"docs":{},"的":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"表":{"docs":{},"示":{"docs":{},"。":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"表":{"docs":{},"示":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"表":{"docs":{},"示":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},",":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"两":{"docs":{},"位":{"docs":{},"表":{"docs":{},"示":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"位":{"docs":{},"是":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"位":{"docs":{},"是":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"状":{"docs":{},"态":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}},"理":{"docs":{},"解":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"，":{"docs":{},"否":{"docs":{},"组":{"docs":{},"数":{"docs":{},"组":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"两":{"docs":{},"段":{"docs":{},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"在":{"docs":{},"两":{"docs":{},"段":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"段":{"docs":{},"。":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"和":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"相":{"docs":{},"比":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"目":{"docs":{},"有":{"docs":{},"点":{"docs":{},"描":{"docs":{},"述":{"docs":{},"不":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"有":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"可":{"docs":{},"以":{"docs":{},"连":{"docs":{},"接":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"加":{"docs":{},"上":{"docs":{},"子":{"docs":{},"树":{"docs":{},"上":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"那":{"docs":{},"就":{"docs":{},"只":{"docs":{},"能":{"docs":{},"连":{"docs":{},"接":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"选":{"docs":{},"择":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"或":{"docs":{},"者":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"当":{"docs":{},"然":{"docs":{},"是":{"docs":{},"选":{"docs":{},"择":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"涉":{"docs":{},"及":{"docs":{},"到":{"docs":{},"很":{"docs":{},"多":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"2":{"6":{"docs":{},"*":{"docs":{},"n":{"docs":{},"次":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"n":{"docs":{},"是":{"docs":{},"小":{"docs":{},"于":{"2":{"6":{"docs":{},"的":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"几":{"docs":{},"乎":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"了":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"次":{"docs":{},"数":{"docs":{},"据":{"docs":{},"集":{"docs":{},"，":{"docs":{},"设":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"docs":{},"m":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"求":{"docs":{},"需":{"docs":{},"要":{"docs":{},"使":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"求":{"docs":{},"解":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"必":{"docs":{},"须":{"docs":{},"引":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"果":{"docs":{},"来":{"docs":{},"使":{"docs":{},"访":{"docs":{},"问":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"控":{"docs":{},"制":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"。":{"docs":{},"那":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"类":{"docs":{},"型":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"是":{"docs":{},"基":{"docs":{},"于":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"实":{"docs":{},"现":{"docs":{},"的":{"docs":{},"，":{"docs":{},"插":{"docs":{},"入":{"docs":{},"和":{"docs":{},"查":{"docs":{},"询":{"docs":{},"时":{"docs":{},"间":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"数":{"docs":{},"据":{"docs":{},"存":{"docs":{},"入":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"原":{"docs":{},"来":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"在":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"中":{"docs":{},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"，":{"docs":{},"表":{"docs":{},"示":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"docs":{},"这":{"docs":{},"段":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"于":{"docs":{},"是":{"docs":{},"从":{"docs":{},"这":{"docs":{},"里":{"docs":{},"开":{"docs":{},"始":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"加":{"docs":{},"一":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"结":{"docs":{},"果":{"docs":{},"在":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"中":{"docs":{},"查":{"docs":{},"询":{"docs":{},"，":{"docs":{},"知":{"docs":{},"道":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"求":{"docs":{},"最":{"docs":{},"长":{"docs":{},"的":{"docs":{},"解":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"做":{"docs":{},"，":{"docs":{},"从":{"docs":{},"最":{"docs":{},"外":{"docs":{},"围":{"docs":{},"的":{"docs":{},"圆":{"docs":{},"开":{"docs":{},"始":{"docs":{},"往":{"docs":{},"中":{"docs":{},"间":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"的":{"docs":{},"圆":{"docs":{},"都":{"docs":{},"不":{"docs":{},"变":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"的":{"docs":{},"都":{"docs":{},"变":{"docs":{},"。":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"并":{"docs":{},"查":{"docs":{},"集":{"docs":{},"做":{"docs":{},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"想":{"docs":{},"回":{"docs":{},"顾":{"docs":{},"并":{"docs":{},"查":{"docs":{},"集":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"用":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"题":{"docs":{},"。":{"docs":{},"并":{"docs":{},"查":{"docs":{},"集":{"docs":{},"是":{"docs":{},"能":{"docs":{},"快":{"docs":{},"速":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"组":{"docs":{},"组":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"外":{"docs":{},"围":{"docs":{},"区":{"docs":{},"域":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"每":{"docs":{},"个":{"docs":{},"点":{"docs":{},"自":{"docs":{},"身":{"docs":{},"。":{"docs":{},"开":{"docs":{},"始":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"是":{"docs":{},"自":{"docs":{},"己":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"最":{"docs":{},"外":{"docs":{},"层":{"docs":{},"的":{"docs":{},"圆":{"docs":{},"，":{"docs":{},"就":{"docs":{},"将":{"docs":{},"它":{"docs":{},"和":{"docs":{},"外":{"docs":{},"围":{"docs":{},"区":{"docs":{},"域":{"docs":{},"节":{"docs":{},"点":{"docs":{},"相":{"docs":{},"连":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"内":{"docs":{},"部":{"docs":{},"的":{"docs":{},"圆":{"docs":{},"，":{"docs":{},"将":{"docs":{},"它":{"docs":{},"和":{"docs":{},"它":{"docs":{},"旁":{"docs":{},"边":{"docs":{},"的":{"docs":{},"圆":{"docs":{},"相":{"docs":{},"连":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"再":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"圆":{"docs":{},"连":{"docs":{},"接":{"docs":{},"到":{"docs":{},"了":{"docs":{},"外":{"docs":{},"围":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"则":{"docs":{},"保":{"docs":{},"持":{"docs":{},"不":{"docs":{},"变":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"变":{"docs":{},"为":{"docs":{},"x":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"和":{"docs":{},"前":{"docs":{},"一":{"docs":{},"题":{"docs":{},"重":{"docs":{},"点":{"docs":{},"不":{"docs":{},"同":{"docs":{},"了":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"主":{"docs":{},"要":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"消":{"docs":{},"耗":{"docs":{},"就":{"docs":{},"是":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"回":{"docs":{},"文":{"docs":{},"的":{"docs":{},"消":{"docs":{},"耗":{"docs":{},"了":{"docs":{},"。":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"著":{"docs":{},"名":{"docs":{},"的":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"d":{"docs":{},"判":{"docs":{},"圈":{"docs":{},"算":{"docs":{},"法":{"docs":{},"就":{"docs":{},"行":{"docs":{},"，":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"一":{"docs":{},"个":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"每":{"docs":{},"次":{"docs":{},"走":{"docs":{},"两":{"docs":{},"步":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"每":{"docs":{},"次":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"环":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"能":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"走":{"docs":{},"到":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"那":{"docs":{},"就":{"docs":{},"没":{"docs":{},"有":{"docs":{},"环":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"样":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"我":{"docs":{},"们":{"docs":{},"判":{"docs":{},"断":{"docs":{},"数":{"docs":{},"组":{"docs":{},"首":{"docs":{},"是":{"docs":{},"否":{"docs":{},"小":{"docs":{},"于":{"docs":{},"尾":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"小":{"docs":{},"于":{"docs":{},"那":{"docs":{},"就":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"数":{"docs":{},"组":{"docs":{},"首":{"docs":{},"值":{"docs":{},"。":{"docs":{},"否":{"docs":{},"则":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"和":{"docs":{},"首":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"的":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"找":{"docs":{},"的":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"右":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"在":{"docs":{},"左":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"那":{"docs":{},"个":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"点":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"保":{"docs":{},"存":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"就":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"要":{"docs":{},"求":{"docs":{},"使":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"解":{"docs":{},"题":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"我":{"docs":{},"们":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"长":{"docs":{},"一":{"docs":{},"个":{"docs":{},"短":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"让":{"docs":{},"长":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"头":{"docs":{},"节":{"docs":{},"点":{"docs":{},"先":{"docs":{},"移":{"docs":{},"动":{"docs":{},"两":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"差":{"docs":{},"值":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"一":{"docs":{},"样":{"docs":{},"长":{"docs":{},"了":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"起":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"每":{"docs":{},"次":{"docs":{},"都":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"我":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"会":{"docs":{},"分":{"docs":{},"析":{"docs":{},"，":{"docs":{},"看":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"里":{"docs":{},"，":{"docs":{},"分":{"docs":{},"析":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"出":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"之":{"docs":{},"和":{"docs":{},"大":{"docs":{},"于":{"docs":{},"s":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"题":{"docs":{},"目":{"docs":{},"中":{"docs":{},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"次":{"docs":{},"数":{"docs":{},"组":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"结":{"docs":{},"题":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"一":{"docs":{},"个":{"docs":{},"完":{"docs":{},"美":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"（":{"docs":{},"忘":{"docs":{},"了":{"docs":{},"具":{"docs":{},"体":{"docs":{},"是":{"docs":{},"啥":{"docs":{},"名":{"docs":{},"字":{"docs":{},"了":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"层":{"docs":{},"都":{"docs":{},"是":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"不":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"）":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{},"量":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"h":{"docs":{},"层":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"就":{"docs":{},"是":{"2":{"docs":{},"^":{"docs":{},"h":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"做":{"docs":{},"，":{"docs":{},"从":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"在":{"docs":{},"它":{"docs":{},"的":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"进":{"docs":{},"行":{"docs":{},"一":{"docs":{},"次":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"找":{"docs":{},"到":{"docs":{},"p":{"docs":{},"或":{"docs":{},"者":{"docs":{},"找":{"docs":{},"到":{"docs":{},"q":{"docs":{},"，":{"docs":{},"就":{"docs":{},"会":{"docs":{},"有":{"docs":{},"个":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"都":{"docs":{},"没":{"docs":{},"找":{"docs":{},"到":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"。":{"docs":{},"在":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"进":{"docs":{},"行":{"docs":{},"同":{"docs":{},"理":{"docs":{},"查":{"docs":{},"找":{"docs":{},"方":{"docs":{},"式":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"两":{"docs":{},"个":{"docs":{},"查":{"docs":{},"找":{"docs":{},"结":{"docs":{},"束":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"检":{"docs":{},"查":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"返":{"docs":{},"回":{"docs":{},"都":{"docs":{},"不":{"docs":{},"是":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"分":{"docs":{},"别":{"docs":{},"出":{"docs":{},"现":{"docs":{},"在":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"公":{"docs":{},"共":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"根":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"树":{"docs":{},"返":{"docs":{},"回":{"docs":{},"了":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"在":{"docs":{},"那":{"docs":{},"个":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"那":{"docs":{},"个":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"都":{"docs":{},"是":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"。":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"符":{"docs":{},"号":{"docs":{},"代":{"docs":{},"表":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"。":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{},"和":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"都":{"docs":{},"能":{"docs":{},"做":{"docs":{},"。":{"docs":{},"思":{"docs":{},"想":{"docs":{},"就":{"docs":{},"是":{"docs":{},"先":{"docs":{},"将":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"了":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"交":{"docs":{},"换":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"即":{"docs":{},"可":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"状":{"docs":{},"态":{"docs":{},"不":{"docs":{},"多":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"使":{"docs":{},"用":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"语":{"docs":{},"句":{"docs":{},"，":{"docs":{},"构":{"docs":{},"建":{"docs":{},"d":{"docs":{},"f":{"docs":{},"a":{"docs":{},"。":{"docs":{},"直":{"docs":{},"接":{"docs":{},"使":{"docs":{},"用":{"docs":{},"i":{"docs":{},"f":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"面":{"docs":{},"只":{"docs":{},"有":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"操":{"docs":{},"作":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"操":{"docs":{},"作":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"至":{"docs":{},"少":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"超":{"docs":{},"过":{"1":{"docs":{},"/":{"3":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"还":{"docs":{},"剩":{"2":{"docs":{},"/":{"3":{"docs":{},"，":{"docs":{},"就":{"docs":{},"算":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"部":{"docs":{},"分":{"docs":{},"全":{"docs":{},"都":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"也":{"docs":{},"只":{"docs":{},"会":{"docs":{},"有":{"1":{"docs":{},"/":{"3":{"docs":{},"次":{"docs":{},"投":{"docs":{},"票":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"会":{"docs":{},"将":{"docs":{},"两":{"docs":{},"个":{"docs":{},"候":{"docs":{},"选":{"docs":{},"者":{"docs":{},"的":{"docs":{},"票":{"docs":{},"数":{"docs":{},"减":{"docs":{},"去":{"docs":{},"。":{"docs":{},"还":{"docs":{},"有":{"1":{"docs":{},"/":{"3":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"时":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"候":{"docs":{},"选":{"docs":{},"者":{"docs":{},"票":{"docs":{},"数":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"被":{"docs":{},"替":{"docs":{},"代":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"会":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"可":{"docs":{},"能":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"要":{"docs":{},"确":{"docs":{},"认":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"是":{"docs":{},"否":{"docs":{},"两":{"docs":{},"个":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"的":{"docs":{},"票":{"docs":{},"数":{"docs":{},"超":{"docs":{},"过":{"1":{"docs":{},"/":{"3":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}},"有":{"docs":{},"种":{"docs":{},"解":{"docs":{},"法":{"docs":{},"是":{"docs":{},"一":{"docs":{},"直":{"docs":{},"除":{"docs":{},"二":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"漏":{"docs":{},"洞":{"docs":{},"。":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"主":{"docs":{},"要":{"docs":{},"是":{"docs":{},"找":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"中":{"docs":{},"点":{"docs":{},"，":{"docs":{},"将":{"docs":{},"链":{"docs":{},"表":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"半":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"。":{"docs":{},"找":{"docs":{},"到":{"docs":{},"中":{"docs":{},"点":{"docs":{},"用":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"来":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"，":{"docs":{},"就":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"可":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"差":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"就":{"docs":{},"是":{"docs":{},"在":{"docs":{},"最":{"docs":{},"底":{"docs":{},"层":{"docs":{},"的":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"才":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"。":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"简":{"docs":{},"答":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"可":{"docs":{},"以":{"docs":{},"随":{"docs":{},"意":{"docs":{},"加":{"docs":{},"括":{"docs":{},"号":{"docs":{},"，":{"docs":{},"有":{"docs":{},"很":{"docs":{},"多":{"docs":{},"不":{"docs":{},"确":{"docs":{},"定":{"docs":{},"性":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"，":{"docs":{},"在":{"docs":{},"每":{"docs":{},"个":{"docs":{},"能":{"docs":{},"加":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"太":{"docs":{},"高":{"docs":{},"，":{"docs":{},"往":{"docs":{},"往":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"备":{"docs":{},"忘":{"docs":{},"录":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"，":{"docs":{},"消":{"docs":{},"除":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"来":{"docs":{},"保":{"docs":{},"存":{"docs":{},"每":{"docs":{},"次":{"docs":{},"运":{"docs":{},"行":{"docs":{},"后":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"进":{"docs":{},"入":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"检":{"docs":{},"查":{"docs":{},"是":{"docs":{},"否":{"docs":{},"在":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"中":{"docs":{},"已":{"docs":{},"经":{"docs":{},"保":{"docs":{},"存":{"docs":{},"了":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"保":{"docs":{},"存":{"docs":{},"了":{"docs":{},"，":{"docs":{},"就":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"上":{"docs":{},"题":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"在":{"docs":{},"于":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"树":{"docs":{},"都":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"类":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"无":{"docs":{},"论":{"docs":{},"你":{"docs":{},"算":{"docs":{},"法":{"docs":{},"多":{"docs":{},"么":{"docs":{},"巧":{"docs":{},"妙":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"会":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"被":{"docs":{},"限":{"docs":{},"制":{"docs":{},"到":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"有":{"docs":{},"很":{"docs":{},"大":{"docs":{},"提":{"docs":{},"升":{"docs":{},"。":{"docs":{"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"这":{"docs":{},"系":{"docs":{},"列":{"docs":{},"的":{"docs":{},"第":{"docs":{},"四":{"docs":{},"题":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"题":{"docs":{},"是":{"docs":{},"只":{"docs":{},"能":{"docs":{},"一":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"题":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"任":{"docs":{},"意":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"，":{"docs":{},"第":{"docs":{},"三":{"docs":{},"题":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"两":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"，":{"docs":{},"这":{"docs":{},"三":{"docs":{},"题":{"docs":{},"都":{"docs":{},"能":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"内":{"docs":{},"完":{"docs":{},"成":{"docs":{},"。":{"docs":{},"这":{"docs":{},"题":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"k":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"在":{"docs":{},"第":{"docs":{},"三":{"docs":{},"题":{"docs":{},"（":{"docs":{},"可":{"docs":{},"以":{"docs":{},"完":{"docs":{},"成":{"docs":{},"两":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"）":{"docs":{},"已":{"docs":{},"经":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"两":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"推":{"docs":{},"出":{"docs":{},"任":{"docs":{},"意":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"了":{"docs":{},"。":{"docs":{},"只":{"docs":{},"是":{"docs":{},"每":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"商":{"docs":{},"品":{"docs":{},"，":{"docs":{},"就":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"docs":{},"k":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"太":{"docs":{},"高":{"docs":{},"了":{"docs":{},"，":{"docs":{},"一":{"docs":{},"共":{"2":{"1":{"1":{"docs":{},"个":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"系":{"docs":{},"列":{"docs":{},"的":{"docs":{},"第":{"docs":{},"三":{"docs":{},"题":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"题":{"docs":{},"加":{"docs":{},"入":{"docs":{},"了":{"docs":{},"k":{"docs":{},"表":{"docs":{},"示":{"docs":{},"只":{"docs":{},"看":{"docs":{},"前":{"docs":{},"面":{"docs":{},"k":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"第":{"docs":{},"三":{"docs":{},"题":{"docs":{},"加":{"docs":{},"入":{"docs":{},"了":{"docs":{},"t":{"docs":{},"，":{"docs":{},"代":{"docs":{},"表":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"可":{"docs":{},"以":{"docs":{},"再":{"docs":{},"t":{"docs":{},"以":{"docs":{},"内":{"docs":{},"波":{"docs":{},"动":{"docs":{},"。":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"次":{"docs":{},"做":{"docs":{},"这":{"docs":{},"题":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"我":{"docs":{},"想":{"docs":{},"了":{"docs":{},"下":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"k":{"docs":{},"很":{"docs":{},"小":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"为":{"3":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"关":{"docs":{},"注":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"甚":{"docs":{},"至":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"保":{"docs":{},"存":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"往":{"docs":{},"前":{"docs":{},"看":{"3":{"docs":{},"个":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"k":{"docs":{},"很":{"docs":{},"大":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"效":{"docs":{},"率":{"docs":{},"就":{"docs":{},"没":{"docs":{},"有":{"docs":{},"保":{"docs":{},"存":{"docs":{},"数":{"docs":{},"字":{"docs":{},"高":{"docs":{},"了":{"docs":{},"。":{"docs":{},"不":{"docs":{},"过":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"换":{"docs":{},"个":{"docs":{},"角":{"docs":{},"度":{"docs":{},"想":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"把":{"docs":{},"超":{"docs":{},"出":{"docs":{},"k":{"docs":{},"的":{"docs":{},"那":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"删":{"docs":{},"除":{"docs":{},"。":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"有":{"docs":{},"更":{"docs":{},"好":{"docs":{},"的":{"docs":{},"办":{"docs":{},"法":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"和":{"docs":{},"普":{"docs":{},"通":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"相":{"docs":{},"比":{"docs":{},"，":{"docs":{},"多":{"docs":{},"了":{"docs":{},"太":{"docs":{},"多":{"docs":{},"信":{"docs":{},"息":{"docs":{},"。":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"样":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"点":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"当":{"docs":{},"前":{"docs":{},"点":{"docs":{},"代":{"docs":{},"表":{"docs":{},"的":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"边":{"docs":{},"长":{"docs":{},"就":{"docs":{},"取":{"docs":{},"决":{"docs":{},"于":{"docs":{},"他":{"docs":{},"上":{"docs":{},"面":{"docs":{},"左":{"docs":{},"边":{"docs":{},"和":{"docs":{},"左":{"docs":{},"上":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"边":{"docs":{},"长":{"docs":{},"了":{"docs":{},"。":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"有":{"docs":{},"点":{"docs":{},"意":{"docs":{},"思":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}},"一":{"docs":{},"题":{"docs":{},"有":{"docs":{},"点":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"得":{"docs":{},"到":{"docs":{},"占":{"1":{"docs":{},"/":{"3":{"docs":{},"元":{"docs":{},"素":{"docs":{},"以":{"docs":{},"上":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"保":{"docs":{},"证":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"有":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"和":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"也":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"。":{"docs":{},"要":{"docs":{},"不":{"docs":{},"就":{"docs":{},"是":{"docs":{},"往":{"docs":{},"比":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"大":{"docs":{},"的":{"docs":{},"值":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"要":{"docs":{},"不":{"docs":{},"就":{"docs":{},"是":{"docs":{},"小":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"0":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}}},"1":{"2":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}},")":{"docs":{},".":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}},"3":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}},"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}},",":{"1":{"docs":{},")":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}},"docs":{}}},"2":{"2":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}},"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.021505376344086023},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"*":{"docs":{},"(":{"3":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},"docs":{},"(":{"3":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},"docs":{}}}},",":{"2":{"docs":{},")":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}},"docs":{}}},"3":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},".":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}},"6":{"docs":{},")":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}},"docs":{}}},"4":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}},"*":{"5":{"docs":{},")":{"docs":{},")":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},")":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}},"docs":{}}},"5":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}},",":{"3":{"docs":{},")":{"docs":{},".":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"9":{"docs":{},")":{"docs":{},".":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}},"docs":{}}}}}}}},"docs":{}}},"6":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.016853932584269662}},",":{"9":{"docs":{},")":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"7":{"docs":{},")":{"docs":{},".":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}},"*":{"docs":{},")":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}},".":{"docs":{},")":{"docs":{},"\"":{"docs":{},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}},"e":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}},"l":{"docs":{},"]":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}},"x":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"p":{"1":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135}}},"2":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},"docs":{},")":{"docs":{},",":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.03488372093023256},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.03488372093023256},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.03680981595092025}}}}},"e":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}}}},"s":{"2":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}}}},"docs":{}}}}}}}}}},"docs":{},")":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}},"u":{"docs":{},"m":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}},"i":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}},",":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.038461538461538464}}},".":{"docs":{},"e":{"docs":{},".":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269}},",":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}},"n":{"docs":{},"t":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}},"e":{"docs":{},",":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}},"+":{"1":{"docs":{},")":{"docs":{},".":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}},"docs":{}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}},"k":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"w":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}},"!":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}},"p":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},".":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}}}}}},"u":{"docs":{},"r":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}},")":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}}}}}},"h":{"docs":{},"e":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}},"docs":{}}},"docs":{}}}}}}}}}},"b":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}}}}},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}},".":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}},",":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}},"x":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}}}},"m":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787}}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"&":{"docs":{},"&":{"docs":{},"m":{"docs":{},"a":{"docs":{},"[":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"o":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.01509433962264151}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.023255813953488372}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.031007751937984496}}}}}},"d":{"docs":{},")":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},",":{"docs":{},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},")":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}},"b":{"docs":{},")":{"docs":{},".":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}},"b":{"docs":{},",":{"docs":{},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},")":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"=":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"w":{"docs":{},")":{"docs":{},",":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}}}},"(":{"1":{"0":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.02247191011235955}}},"docs":{}},"2":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"*":{"3":{"docs":{},")":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"docs":{},"(":{"3":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},"docs":{}}}},"9":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}},"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}},"(":{"2":{"docs":{},"*":{"3":{"docs":{},")":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}},"docs":{}}},"docs":{}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}},"g":{"docs":{},"n":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.01875}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}},"c":{"docs":{},"a":{"docs":{},")":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"w":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"u":{"docs":{},"p":{"docs":{},")":{"docs":{},",":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}},">":{"0":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.021052631578947368},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514}},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"的":{"docs":{},"转":{"docs":{},"换":{"docs":{},"关":{"docs":{},"系":{"docs":{},"是":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"=":{"docs":{},"(":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"\\":{"docs":{},"^":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},"&":{"docs":{},"~":{"docs":{},"o":{"docs":{},"n":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"1":{"1":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}},"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.042105263157894736},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}},"2":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.03684210526315789},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.026785714285714284},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.04040404040404041},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.022556390977443608},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.03125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.02857142857142857}},",":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}},"3":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.015748031496062992},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.03571428571428571},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.030303030303030304},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.01680672268907563},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.02702702702702703}},".":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625}}}},"4":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.02830188679245283},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.023622047244094488},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0234375},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.02027027027027027}},",":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}},"5":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.015789473684210527},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514}},",":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}},".":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}}},"6":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.015748031496062992}}},"9":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008}}},"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.05},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.01910828025477707},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.037037037037037035},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.05217391304347826},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.05309734513274336},"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.06201550387596899},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.03225806451612903},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.023255813953488372},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.03571428571428571},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.07983193277310924},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.024390243902439025},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.06060606060606061},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.011320754716981131},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0390625},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.02027027027027027},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}},",":{"docs":{},"(":{"docs":{},"l":{"1":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}},"docs":{}}},"l":{"2":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}},")":{"docs":{},";":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}},"docs":{}}},"=":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"1":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}},"docs":{}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}},";":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"1":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}},",":{"docs":{},"l":{"2":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}}},"docs":{}}}},"docs":{}}}}}}}}}}},"(":{"docs":{},"l":{"1":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},",":{"docs":{},"l":{"2":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}},"docs":{}}}},"docs":{}}}}}}},"o":{"docs":{},"v":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}},"e":{"docs":{},";":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}}},"p":{"docs":{},"r":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}},"o":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}}}},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},"{":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}},"|":{"docs":{},"|":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514}}}}}}},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"u":{"1":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405}}},"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}},"m":{"docs":{},"p":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}}}}}}}},")":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269}},"{":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}},";":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}},";":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.03968253968253968},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.015748031496062992},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.045112781954887216},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.048},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.023668639053254437},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0234375},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.02027027027027027},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.015544041450777202},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.0380952380952381}}},"&":{"docs":{},"&":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}},"!":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},"{":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.042105263157894736},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}},",":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"+":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},")":{"docs":{},"%":{"1":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}},"docs":{}},"docs":{}},"/":{"1":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}},"docs":{}},"docs":{}}}}}},"l":{"2":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666}}},"docs":{},"+":{"docs":{},"r":{"docs":{},";":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"l":{"docs":{},",":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},"{":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}},";":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}},";":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}},">":{"docs":{},"l":{"2":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}},"docs":{}},"=":{"docs":{},"x":{"docs":{},")":{"docs":{},"{":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259}}}}}},"m":{"docs":{},"a":{"docs":{},")":{"docs":{},"{":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}}},")":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}},"{":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.021164021164021163},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.012},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.01910828025477707},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012}}},")":{"docs":{},"{":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102}}}}}},"q":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}},"!":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}}}},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863}}}}}},"q":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012}}}},"*":{"1":{"0":{"docs":{},";":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008}}}},"docs":{}},"docs":{}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}}}}}}},"=":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},")":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.011320754716981131},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.022222222222222223},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.011320754716981131},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}},"&":{"docs":{},"&":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745}}}}}}}}}}}}}}}},"{":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}},"+":{"1":{"docs":{},";":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}},"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}}}},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.015873015873015872},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.01910828025477707},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},"{":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}},";":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}},"&":{"docs":{},"&":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}},",":{"docs":{},"q":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"*":{"1":{"0":{"docs":{},"+":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}},"docs":{}},"docs":{}}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}},"docs":{}}}}}}},"t":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}},"p":{"docs":{},",":{"docs":{},"q":{"docs":{},")":{"docs":{},";":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},"!":{"docs":{},"=":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{},"{":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"&":{"docs":{},"p":{"docs":{},"r":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}}}}}}},"&":{"docs":{},"&":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}},")":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.011320754716981131},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.022222222222222223},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.011320754716981131},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.02112676056338028},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}},")":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745}}}},"docs":{}}},"{":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}},"=":{"docs":{},"=":{"docs":{},"h":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.026455026455026454},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.02459016393442623},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.01910828025477707},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}},"{":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}},"&":{"docs":{},"&":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}},"o":{"docs":{},"w":{"docs":{},";":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082}},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}},"i":{"docs":{},";":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"+":{"1":{"docs":{},"+":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},",":{"docs":{},"q":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"*":{"1":{"0":{"docs":{},"+":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}},"docs":{}},"docs":{}}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}},"docs":{}}}}},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},"*":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"%":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}},"p":{"docs":{},",":{"docs":{},"q":{"docs":{},")":{"docs":{},";":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"=":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},";":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}}},"右":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.018691588785046728}}},"左":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}},"。":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"结":{"docs":{},"果":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"将":{"docs":{},"结":{"docs":{},"果":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}}}},"&":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"[":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}},"n":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"y":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}},"i":{"docs":{},"]":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},")":{"docs":{},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}},"l":{"0":{"docs":{},"→":{"docs":{},"l":{"1":{"docs":{},"→":{"docs":{},"…":{"docs":{},"→":{"docs":{},"l":{"docs":{},"n":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}},"docs":{},"n":{"docs":{},"→":{"docs":{},"l":{"1":{"docs":{},"→":{"docs":{},"l":{"docs":{},"n":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}},"docs":{}}}}}}},"1":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},",":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}}},";":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514}}},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}},"2":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}},";":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514}}},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}},")":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}},"{":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}},"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.022388059701492536}}},"v":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}},"f":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.0196078431372549},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.022727272727272728},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":2.04}}}},"f":{"docs":{},"t":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.019801980198019802}},")":{"docs":{},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}},"=":{"0":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}},";":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},";":{"docs":{"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364}}}}}}},"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"[":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}}}}}},"i":{"docs":{},";":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}},"docs":{}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}},"docs":{}}}}},"=":{"docs":{},"x":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"?":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{},"i":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{},"i":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},",":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}}}}}}},".":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},",":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"=":{"docs":{},"!":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}},"h":{"docs":{},"=":{"docs":{},"i":{"docs":{},"s":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}},"docs":{}}}}}}}}},"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"n":{"1":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"=":{"0":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"2":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}},"docs":{}}},"docs":{}}}}}},"docs":{}}},"2":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}},"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.039603960396039604},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.022727272727272728},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.024691358024691357},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.0196078431372549},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.024896265560165973}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.02072538860103627},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}},"=":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"?":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},":":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}},",":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}},"g":{"docs":{},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":2.0303030303030303},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.01910828025477707},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.030303030303030304},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.011320754716981131}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}},")":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}}}},".":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}}},"'":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},"x":{"docs":{},"i":{"docs":{},"c":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.019417475728155338},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.03125}}}},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":1.697674418604651},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":1.4436657681940699},"107.-binary-tree-level-order-traversal-ii.html":{"ref":"107.-binary-tree-level-order-traversal-ii.html","tf":1.5535714285714284},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.02074688796680498}},")":{"docs":{},".":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}},"{":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}},",":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"检":{"docs":{},"测":{"docs":{},"一":{"docs":{},"个":{"docs":{},"题":{"docs":{},"的":{"docs":{},"答":{"docs":{},"案":{"docs":{},"是":{"docs":{},"一":{"docs":{},"直":{"docs":{},"调":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"再":{"docs":{},"函":{"docs":{},"数":{"docs":{},"里":{"docs":{},"声":{"docs":{},"明":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"，":{"docs":{},"就":{"docs":{},"只":{"docs":{},"会":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{},"之":{"docs":{},"后":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"用":{"docs":{},"在":{"docs":{},"这":{"docs":{},"题":{"docs":{},"最":{"docs":{},"好":{"docs":{},"不":{"docs":{},"过":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.031746031746031744},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.015748031496062992},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.022222222222222223},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":2.024},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":1.6830601092896174},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":2.5526315789473686},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":2.0532544378698225},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":2.018134715025907},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":2.5285714285714285}}},"e":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.02564102564102564}},":":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}},"s":{"docs":{},",":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}},".":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}},"a":{"docs":{},"r":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}},"s":{"docs":{},"t":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":1.6904761904761902},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":2.0283018867924527},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":2.015748031496063},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":3.3438596491228068},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":1.675595238095238},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":2.01010101010101},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":3.3483709273182956},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":2.016},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":1.6830601092896174},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":2.5116959064327484},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":2.0118343195266273},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":3.348958333333333},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":2.5168067226890756},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":3.3468468468468466},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":2.0207253886010363},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.01652892561983471},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":2.5095238095238095}},".":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.015748031496062992},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.015748031496062992},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.022222222222222223},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.02072538860103627},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905}},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}},"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}},"(":{"docs":{},"l":{"1":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}},"docs":{}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.016666666666666666}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}},"*":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.025},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.023809523809523808},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.031496062992125984},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.021052631578947368},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.03007518796992481},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.04},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.012605042016806723},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.02702702702702703},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112}}}}}}}}}},"a":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},",":{"docs":{},"*":{"docs":{},"b":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.023391812865497075},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.023668639053254437},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}},":":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}},"s":{"docs":{},".":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}}},")":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}},":":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}},"'":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}},"a":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601}}},"b":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601}}}}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"'":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}},"i":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}},"k":{"docs":{},"e":{"docs":{},":":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.0449438202247191},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.032},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.043478260869565216}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":1.6864686468646863},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":2.5253164556962027},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":2.5294117647058822},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":2.5344827586206895},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":2.537037037037037}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},"(":{"docs":{},"c":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}},"g":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},"e":{"docs":{},".":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":1.4500768049155144},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":1.6904761904761902}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},">":{"docs":{},">":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}},"docs":{}}}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}},"o":{"docs":{},"k":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}},"p":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}},"g":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.03125},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}},"m":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"r":{"docs":{},"b":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"=":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},";":{"docs":{},"r":{"docs":{},"b":{"docs":{},"=":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253}}}}}}}}}}}}}}}}}},";":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":2.538961038961039},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.02857142857142857},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":3.3611111111111107},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}},"r":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}},",":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"s":{"docs":{},"t":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":1.2584745762711864},"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.05263157894736842},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.03409090909090909},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125}},",":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}},"s":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":3.339147286821705}},"(":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},",":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288}}}}}},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288}}}},"docs":{}}}},"a":{"docs":{},"x":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}}}}}}},":":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}},"g":{"docs":{},"n":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125}}}},"c":{"docs":{},"a":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.021505376344086023},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.023809523809523808}}}},"r":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"&":{"docs":{},"&":{"docs":{},"u":{"docs":{},"d":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.015384615384615385}}}}}}}}}}}},";":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}},"z":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":2.5140845070422535},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}},",":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}},".":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":3.3499999999999996},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":1.4398921832884095}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}}}}}}}}}}}}}}}}}}}}}},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"分":{"docs":{},"析":{"docs":{},"之":{"docs":{},"后":{"docs":{},"得":{"docs":{},"知":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"参":{"docs":{},"差":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"本":{"docs":{},"来":{"docs":{},"是":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"队":{"docs":{},"列":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"变":{"docs":{},"量":{"docs":{},"指":{"docs":{},"定":{"docs":{},"现":{"docs":{},"在":{"docs":{},"是":{"docs":{},"左":{"docs":{},"到":{"docs":{},"右":{"docs":{},"还":{"docs":{},"是":{"docs":{},"右":{"docs":{},"到":{"docs":{},"左":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"处":{"docs":{},"理":{"docs":{},"方":{"docs":{},"式":{"docs":{},"和":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"样":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"}":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.0297029702970297},"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.06329113924050633},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.04},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.14814814814814814},"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.020202020202020204},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.023809523809523808},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.06756756756756757},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.031496062992125984},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.029411764705882353},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.034482758620689655},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.0423728813559322},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.07692307692307693},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.025477707006369428},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.04938271604938271},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.044444444444444446},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0273972602739726},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.06349206349206349},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.025},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.015789473684210527},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.025974025974025976},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.02631578947368421},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.031914893617021274},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.025974025974025976},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.017045454545454544},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.02857142857142857},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.022556390977443608},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.021505376344086023},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.04597701149425287},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.05291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.04216867469879518},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.02040816326530612},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.025157232704402517},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.014814814814814815},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.03875968992248062},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.03773584905660377},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.015503875968992248},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.014492753623188406},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.028985507246376812},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.015151515151515152},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.03424657534246575},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.040983606557377046},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.04},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.017094017094017096},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.013888888888888888},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.023255813953488372},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.037037037037037035},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.028},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.03225806451612903},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.05},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.012232415902140673},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.018867924528301886},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.03076923076923077},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.030303030303030304},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.028735632183908046},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0234375},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.050955414012738856},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.028037383177570093},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.02100840336134454},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.033783783783783786},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.02857142857142857},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.023255813953488372},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.018134715025906734},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0375},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.027777777777777776},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.04819277108433735},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.024539877300613498},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.033783783783783786},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.03305785123966942},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.029411764705882353},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.04150943396226415},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.045871559633027525},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.020618556701030927},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.02702702702702703},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.047058823529411764},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.030534351145038167},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.027522935779816515},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.02112676056338028},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.06140350877192982},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.024691358024691357},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0319634703196347},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.02857142857142857},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.016129032258064516},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.05384615384615385},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.039603960396039604},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.046153846153846156},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},"/":{"docs":{},"/":{"docs":{},"上":{"docs":{},"面":{"docs":{},"是":{"docs":{},"递":{"docs":{},"归":{"docs":{},"基":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}}}},";":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.018867924528301886},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.023622047244094488},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.022222222222222223},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414},"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.010526315789473684},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.021164021164021163},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.012048192771084338},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.012578616352201259},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.014814814814814815},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.01509433962264151},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.0196078431372549},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.015503875968992248},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.014492753623188406},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.015151515151515152},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.01639344262295082},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.013888888888888888},"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.012},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.011834319526627219},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.01910828025477707},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.018691588785046728},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.02027027027027027},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.011320754716981131},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.01904761904761905},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.011904761904761904},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}}},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.026785714285714284},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.03076923076923077}},"e":{"docs":{},"{":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.017241379310344827},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.010582010582010581},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.012738853503184714},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.013513513513513514},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}},"时":{"docs":{},"间":{"docs":{},"应":{"docs":{},"该":{"docs":{},"可":{"docs":{},"以":{"docs":{},"认":{"docs":{},"为":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"前":{"docs":{},"两":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"其":{"docs":{},"实":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"更":{"docs":{},"快":{"docs":{},"。":{"docs":{},"我":{"docs":{},"认":{"docs":{},"为":{"docs":{},"是":{"docs":{},"由":{"docs":{},"于":{"docs":{},"每":{"docs":{},"次":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"调":{"docs":{},"用":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"后":{"docs":{},"扩":{"docs":{},"容":{"docs":{},"导":{"docs":{},"致":{"docs":{},"。":{"docs":{},"于":{"docs":{},"是":{"docs":{},"想":{"docs":{},"了":{"docs":{},"一":{"docs":{},"下":{"docs":{},"能":{"docs":{},"否":{"docs":{},"提":{"docs":{},"前":{"docs":{},"知":{"docs":{},"道":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"的":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"。":{"docs":{},"防":{"docs":{},"止":{"docs":{},"在":{"docs":{},"运":{"docs":{},"行":{"docs":{},"时":{"docs":{},"分":{"docs":{},"配":{"docs":{},"内":{"docs":{},"存":{"docs":{},"，":{"docs":{},"想":{"docs":{},"到":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"都":{"docs":{},"是":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"类":{"docs":{},"型":{"docs":{},"，":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"只":{"docs":{},"有":{"1":{"0":{"docs":{},"位":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"1":{"0":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"足":{"docs":{},"够":{"docs":{},"了":{"docs":{},"。":{"docs":{},"改":{"docs":{},"进":{"docs":{},"了":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"效":{"docs":{},"果":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"明":{"docs":{},"显":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"1":{"0":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"内":{"docs":{},"存":{"docs":{},"分":{"docs":{},"配":{"docs":{},"所":{"docs":{},"消":{"docs":{},"耗":{"docs":{},"的":{"docs":{},"资":{"docs":{},"源":{"docs":{},"也":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"之":{"docs":{},"后":{"docs":{},"很":{"docs":{},"多":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"能":{"docs":{},"减":{"docs":{},"少":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"或":{"docs":{},"者":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"的":{"docs":{},"内":{"docs":{},"存":{"docs":{},"加":{"docs":{},"倍":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"提":{"docs":{},"前":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"好":{"docs":{},"大":{"docs":{},"小":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"题":{"docs":{},"目":{"docs":{},"会":{"docs":{},"快":{"docs":{},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"3":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}},"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"树":{"docs":{},"。":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"比":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"方":{"docs":{},"法":{"docs":{},"慢":{"docs":{},"一":{"docs":{},"点":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"。":{"docs":{},"之":{"docs":{},"后":{"docs":{},"有":{"docs":{},"时":{"docs":{},"间":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{},"以":{"docs":{},"下":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"版":{"docs":{},"本":{"docs":{},"的":{"docs":{},"把":{"docs":{},"。":{"docs":{"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"保":{"docs":{},"存":{"docs":{},"数":{"docs":{},"据":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"之":{"docs":{},"后":{"docs":{},"会":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"只":{"docs":{},"访":{"docs":{},"问":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"最":{"docs":{},"多":{"docs":{},"访":{"docs":{},"问":{"docs":{},"节":{"docs":{},"点":{"docs":{},"两":{"docs":{},"次":{"docs":{},"，":{"docs":{},"访":{"docs":{},"问":{"docs":{},"总":{"docs":{},"次":{"docs":{},"数":{"docs":{},"是":{"2":{"docs":{},"n":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"也":{"docs":{},"是":{"docs":{},"有":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"我":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"有":{"docs":{},"点":{"docs":{},"麻":{"docs":{},"烦":{"docs":{},"，":{"docs":{},"可":{"docs":{},"能":{"docs":{},"这":{"docs":{},"种":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"更":{"docs":{},"好":{"docs":{},"。":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"最":{"docs":{},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"是":{"docs":{},"优":{"docs":{},"化":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"是":{"docs":{},"个":{"docs":{},"很":{"docs":{},"大":{"docs":{},"的":{"docs":{},"优":{"docs":{},"化":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"只":{"docs":{},"有":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"也":{"docs":{},"是":{"docs":{},"能":{"docs":{},"找":{"docs":{},"到":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"了":{"docs":{},"。":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}},"docs":{}}}}}}}},"只":{"docs":{},"需":{"docs":{},"要":{"3":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"用":{"docs":{},"了":{"docs":{},"两":{"docs":{},"个":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"来":{"docs":{},"保":{"docs":{},"存":{"docs":{},"数":{"docs":{},"据":{"docs":{},"。":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"²":{"docs":{},")":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}}},"和":{"docs":{},"上":{"docs":{},"两":{"docs":{},"题":{"docs":{},"一":{"docs":{},"样":{"docs":{},",":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872}}}}}}}}}}}}}},"是":{"docs":{},"o":{"docs":{},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"都":{"docs":{},"能":{"docs":{},"选":{"docs":{},"择":{"docs":{},"是":{"docs":{},"放":{"docs":{},"入":{"docs":{},"或":{"docs":{},"者":{"docs":{},"不":{"docs":{},"放":{"docs":{},"入":{"docs":{},"最":{"docs":{},"后":{"docs":{},"数":{"docs":{},"组":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"生":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"树":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"*":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"这":{"docs":{},"也":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"找":{"docs":{},"到":{"docs":{},"找":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"集":{"docs":{},"合":{"docs":{},"的":{"docs":{},"普":{"docs":{},"遍":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"去":{"docs":{},"解":{"docs":{},"题":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"想":{"docs":{},"好":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"递":{"docs":{},"归":{"docs":{},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"设":{"docs":{},"计":{"docs":{},"的":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"设":{"docs":{},"计":{"docs":{},"好":{"docs":{},"递":{"docs":{},"归":{"docs":{},"基":{"docs":{},"处":{"docs":{},"理":{"docs":{},"结":{"docs":{},"束":{"docs":{},"清":{"docs":{},"况":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"很":{"docs":{},"类":{"docs":{},"似":{"docs":{},"数":{"docs":{},"学":{"docs":{},"归":{"docs":{},"纳":{"docs":{},"法":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"链":{"docs":{},"表":{"docs":{},"相":{"docs":{},"加":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"将":{"docs":{},"每":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"看":{"docs":{},"成":{"docs":{},"累":{"docs":{},"加":{"docs":{},"器":{"docs":{},"的":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"寄":{"docs":{},"存":{"docs":{},"器":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"输":{"docs":{},"入":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"进":{"docs":{},"位":{"docs":{},"。":{"docs":{},"相":{"docs":{},"加":{"docs":{},"得":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"将":{"docs":{},"进":{"docs":{},"位":{"docs":{},"传":{"docs":{},"给":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"。":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"减":{"docs":{},"去":{"docs":{},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"是":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"每":{"docs":{},"次":{"docs":{},"经":{"docs":{},"过":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"消":{"docs":{},"耗":{"docs":{},"的":{"docs":{},"汽":{"docs":{},"油":{"docs":{},"量":{"docs":{},"的":{"docs":{},"。":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"点":{"docs":{},"定":{"docs":{},"义":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"，":{"docs":{},"左":{"docs":{},"下":{"docs":{},"角":{"docs":{},"和":{"docs":{},"右":{"docs":{},"上":{"docs":{},"角":{"docs":{},"。":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"得":{"docs":{},"到":{"docs":{},"a":{"docs":{},"和":{"docs":{},"e":{"docs":{},"以":{"docs":{},"及":{"docs":{},"b":{"docs":{},"和":{"docs":{},"f":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"将":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"值":{"docs":{},"作":{"docs":{},"为":{"docs":{},"公":{"docs":{},"共":{"docs":{},"面":{"docs":{},"积":{"docs":{},"的":{"docs":{},"左":{"docs":{},"下":{"docs":{},"角":{"docs":{},"。":{"docs":{},"同":{"docs":{},"理":{"docs":{},"对":{"docs":{},"于":{"docs":{},"右":{"docs":{},"上":{"docs":{},"角":{"docs":{},"两":{"docs":{},"个":{"docs":{},"点":{"docs":{},"，":{"docs":{},"采":{"docs":{},"用":{"docs":{},"取":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"的":{"docs":{},"办":{"docs":{},"法":{"docs":{},"。":{"docs":{},"就":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"公":{"docs":{},"共":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"，":{"docs":{},"之":{"docs":{},"前":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"公":{"docs":{},"共":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"是":{"docs":{},"否":{"docs":{},"合":{"docs":{},"法":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"虽":{"docs":{},"然":{"docs":{},"递":{"docs":{},"归":{"docs":{},"函":{"docs":{},"数":{"docs":{},"会":{"docs":{},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"上":{"docs":{},"消":{"docs":{},"耗":{"docs":{},"很":{"docs":{},"多":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"相":{"docs":{},"比":{"docs":{},"于":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"解":{"docs":{},"题":{"docs":{},"会":{"docs":{},"慢":{"docs":{},"一":{"docs":{},"点":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"递":{"docs":{},"归":{"docs":{},"函":{"docs":{},"数":{"docs":{},"比":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"更":{"docs":{},"容":{"docs":{},"易":{"docs":{},"写":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"会":{"docs":{},"少":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"其":{"docs":{},"实":{"docs":{},"慢":{"docs":{},"不":{"docs":{},"了":{"docs":{},"太":{"docs":{},"多":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"链":{"docs":{},"表":{"docs":{},"题":{"docs":{},"和":{"docs":{},"树":{"docs":{},"题":{"docs":{},"建":{"docs":{},"议":{"docs":{},"先":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"法":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"函":{"docs":{},"数":{"docs":{},"中":{"docs":{},"是":{"docs":{},"双":{"docs":{},"重":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"子":{"docs":{},"循":{"docs":{},"环":{"docs":{},"的":{"docs":{},"步":{"docs":{},"数":{"docs":{},"很":{"docs":{},"大":{"docs":{},"。":{"docs":{},"整":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"4":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"不":{"docs":{},"会":{"docs":{},"很":{"docs":{},"大":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"每":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"就":{"docs":{},"进":{"docs":{},"行":{"3":{"docs":{},"次":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"可":{"docs":{},"以":{"docs":{},"近":{"docs":{},"似":{"docs":{},"看":{"docs":{},"做":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"每":{"docs":{},"次":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"都":{"docs":{},"是":{"docs":{},"乘":{"2":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},".":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"间":{"docs":{},"处":{"docs":{},"理":{"docs":{},"比":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"多":{"docs":{},"很":{"docs":{},"多":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"排":{"docs":{},"除":{"docs":{},"一":{"docs":{},"半":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"差":{"docs":{},"算":{"docs":{},"法":{"docs":{},"和":{"docs":{},"好":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"次":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"省":{"docs":{},"去":{"docs":{},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"多":{"docs":{},"余":{"docs":{},"中":{"docs":{},"间":{"docs":{},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"和":{"docs":{},"条":{"docs":{},"件":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"能":{"docs":{},"够":{"docs":{},"提":{"docs":{},"升":{"docs":{},"程":{"docs":{},"序":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"。":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"看":{"docs":{},"起":{"docs":{},"来":{"docs":{},"循":{"docs":{},"环":{"docs":{},"挺":{"docs":{},"多":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"本":{"docs":{},"质":{"docs":{},"只":{"docs":{},"是":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"了":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"一":{"docs":{},"此":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"n":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"3":{"docs":{},"n":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"观":{"docs":{},"察":{"docs":{},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"题":{"docs":{},"目":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{},"相":{"docs":{},"加":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"题":{"docs":{},"以":{"docs":{},"及":{"docs":{},"树":{"docs":{},"类":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"尤":{"docs":{},"其":{"docs":{},"是":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"或":{"docs":{},"者":{"docs":{},"树":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"大":{"docs":{},"概":{"docs":{},"律":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"做":{"docs":{},"会":{"docs":{},"简":{"docs":{},"单":{"docs":{},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{"2.-add-two-numbers.html":{"ref":"2.-add-two-numbers.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"后":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"全":{"docs":{},"部":{"docs":{},"在":{"docs":{},"右":{"docs":{},"边":{"docs":{},"展":{"docs":{},"平":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"每":{"docs":{},"次":{"docs":{},"将":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"原":{"docs":{},"来":{"docs":{},"的":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"接":{"docs":{},"在":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"最":{"docs":{},"后":{"docs":{},"面":{"docs":{},"，":{"docs":{},"重":{"docs":{},"复":{"docs":{},"这":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"都":{"docs":{},"展":{"docs":{},"平":{"docs":{},"即":{"docs":{},"可":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"1":{"0":{"0":{"docs":{},"\"":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}},"1":{"0":{"1":{"docs":{},"\"":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}},"docs":{},"\"":{"docs":{},",":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}},"1":{"docs":{},"\"":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}},"docs":{}},"docs":{}},"1":{"docs":{},"\"":{"docs":{},",":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}},"2":{"3":{"docs":{},"\"":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}},"docs":{},"\"":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}},"3":{"2":{"docs":{},"\"":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}},"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"7":{"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}},"\"":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"2":{"1":{"0":{"docs":{},"\"":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}},"3":{"docs":{},"\"":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667}}}},"docs":{}},"2":{"6":{"docs":{},"\"":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}},"docs":{}},"3":{"1":{"4":{"docs":{},"\"":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}},"docs":{},"\"":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}},"docs":{},"\"":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}},"5":{"5":{"2":{"5":{"5":{"1":{"1":{"1":{"3":{"5":{"docs":{},"\"":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},".":{"2":{"5":{"5":{"docs":{},".":{"1":{"1":{"1":{"docs":{},".":{"3":{"5":{"docs":{},"\"":{"docs":{},"]":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}},"*":{"3":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},"docs":{}}},"3":{"1":{"2":{"docs":{},"\"":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}},"docs":{}},"2":{"1":{"docs":{},"\"":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}},"docs":{}},"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775}}}}},"5":{"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775}}}}},"6":{"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"9":{"5":{"3":{"4":{"3":{"3":{"0":{"docs":{},"\"":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}},"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.015267175572519083}},"a":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}},",":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}},",":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}},"\"":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}},"a":{"docs":{},"\"":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714}}},"*":{"docs":{},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}},"c":{"docs":{},"?":{"docs":{},"b":{"docs":{},"\"":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}}},"a":{"docs":{},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.012738853503184714}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}},"b":{"docs":{},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}},"c":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703}}}}}}},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"g":{"docs":{},"g":{"docs":{},"g":{"docs":{},"t":{"docs":{},"t":{"docs":{},"t":{"docs":{},"\"":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}},"d":{"docs":{},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"\"":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}},"c":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"\"":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}},"c":{"docs":{},"\"":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}},"f":{"docs":{},"\"":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"c":{"docs":{},"d":{"docs":{},"c":{"docs":{},"b":{"docs":{},"\"":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}},"e":{"docs":{},"\"":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}},"g":{"docs":{},"a":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"c":{"docs":{},"c":{"docs":{},"g":{"docs":{},"\"":{"docs":{},".":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}},"d":{"docs":{},"c":{"docs":{},"e":{"docs":{},"b":{"docs":{},"\"":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}},"o":{"docs":{},"b":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"\"":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}},"d":{"docs":{},"\"":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}},"t":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}},"\"":{"docs":{},",":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}},"n":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}},"\"":{"docs":{},",":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}},"\"":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}},"a":{"docs":{},"\"":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}},"f":{"docs":{},"\"":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}},"a":{"docs":{},"b":{"docs":{},"\"":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}},"g":{"docs":{},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}},"t":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}},"n":{"docs":{},"c":{"docs":{},"\"":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}},"g":{"docs":{},"\"":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}}}},"r":{"docs":{},"\"":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"f":{"docs":{},"\"":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"z":{"docs":{},"\"":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}},"p":{"docs":{},"w":{"docs":{},"k":{"docs":{},"e":{"docs":{},"\"":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}},"w":{"docs":{},"k":{"docs":{},"e":{"docs":{},"w":{"docs":{},"\"":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}},"a":{"docs":{},"h":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"l":{"docs":{},"s":{"docs":{},"i":{"docs":{},"i":{"docs":{},"g":{"docs":{},"y":{"docs":{},"i":{"docs":{},"r":{"docs":{},"\"":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666}}}}}}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}},",":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666}}}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"y":{"docs":{},"a":{"docs":{},"h":{"docs":{},"r":{"docs":{},"p":{"docs":{},"i":{"docs":{},"\"":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}}}}}}}}},"e":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218}},"\"":{"docs":{},",":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"\"":{"docs":{},"]":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}},",":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}},"w":{"docs":{},"k":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}},"o":{"docs":{},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{},"!":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}},"\"":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}},";":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}},".":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}},"c":{"docs":{},"b":{"docs":{},"b":{"docs":{},"d":{"docs":{},"\"":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}},"\"":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}},"*":{"docs":{},"a":{"docs":{},"*":{"docs":{},"b":{"docs":{},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"f":{"docs":{},"\"":{"docs":{},"]":{"docs":{},".":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}},"a":{"docs":{},"e":{"docs":{},"b":{"docs":{},"d":{"docs":{},"\"":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}},"t":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218}},"\"":{"docs":{},"]":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}},"\"":{"docs":{},",":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186}},",":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186}}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{},"]":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}}},".":{"docs":{},"*":{"docs":{},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745}}}},".":{"docs":{},".":{"docs":{},"q":{"docs":{},"\"":{"docs":{},",":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666}}}}}},"q":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"*":{"docs":{},"i":{"docs":{},"s":{"docs":{},"*":{"docs":{},"p":{"docs":{},"*":{"docs":{},".":{"docs":{},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{},"\"":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}},"f":{"docs":{},"l":{"docs":{},"\"":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}},"o":{"docs":{},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}},"(":{"1":{"docs":{},"+":{"docs":{},"(":{"4":{"docs":{},"+":{"5":{"docs":{},"+":{"2":{"docs":{},")":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}},"docs":{}}},"docs":{}}},"docs":{}}}},"docs":{},")":{"docs":{},"\"":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}},"[":{"docs":{},"]":{"docs":{},"{":{"docs":{},"}":{"docs":{},"\"":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}}},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}},"\"":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}},"[":{"docs":{},")":{"docs":{},"]":{"docs":{},"\"":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}},"]":{"docs":{},"\"":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}},"\"":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}},"{":{"docs":{},"[":{"docs":{},"]":{"docs":{},"}":{"docs":{},"\"":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}},"t":{"docs":{},"\"":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186}},",":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"\"":{"docs":{},".":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"\"":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}},"\"":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}},"*":{"docs":{},"\"":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775}}},"]":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}},"a":{"docs":{},"*":{"docs":{},"b":{"docs":{},"\"":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}}}},"?":{"docs":{},"a":{"docs":{},"\"":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}},"d":{"docs":{},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{},".":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}},"b":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"d":{"docs":{},"\"":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.02702702702702703}}}}}}}},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}},"]":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}},"t":{"docs":{},"\"":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}},"e":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}},"h":{"docs":{},"e":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}},"i":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.016666666666666666}}}}}}}},"e":{"docs":{},"x":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}},"g":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"\"":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}},"g":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678}},".":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}},"t":{"docs":{},"a":{"docs":{},"e":{"docs":{},"\"":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}},".":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}}}}}}}},"\"":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}},"s":{"docs":{},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218}}}}}}}},"g":{"docs":{},"r":{"docs":{},"\"":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}},".":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.012345679012345678}}},":":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}}}},"v":{"docs":{},"f":{"docs":{},"\"":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.016853932584269662}}},"]":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775}}}}},"/":{"docs":{},"\"":{"docs":{},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.011235955056179775}}}}}},"h":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.017543859649122806},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.01775147928994083},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.015625},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.015544041450777202}},"=":{"1":{"docs":{},",":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"=":{"1":{"docs":{},";":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}},"docs":{}}}}}}},"docs":{}}}}}}}},"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.015873015873015872},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.017857142857142856},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}},"t":{"docs":{},"o":{"docs":{},"u":{"1":{"docs":{},";":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}},"docs":{}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}}}}}}}}}}}}}}},",":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}},".":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112}}},")":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}},"{":{"docs":{"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}}}},";":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.015789473684210527},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.020202020202020204},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.011695906432748537},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}},"a":{"docs":{},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}},"b":{"docs":{},";":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.023255813953488372},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.021739130434782608}},")":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}},"s":{"docs":{},")":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}},"docs":{}}}}}}}}}}}}},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}}}},"l":{"docs":{},"p":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},",":{"docs":{},"n":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}},"docs":{}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"+":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}}}},")":{"docs":{},"'":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}},"docs":{}}}}}}}}}},"k":{"docs":{},",":{"docs":{},"n":{"docs":{},",":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}},"docs":{}}},"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"+":{"docs":{},"i":{"docs":{},",":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}},"docs":{}}},"docs":{}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}},">":{"docs":{},"&":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"i":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}},"+":{"1":{"docs":{},",":{"docs":{},"j":{"docs":{},",":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}},"docs":{}}}}}}}}},"docs":{}},",":{"docs":{},"j":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}},"+":{"1":{"docs":{},",":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"|":{"docs":{},"|":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}}}}}},"docs":{}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{},"n":{"docs":{},",":{"docs":{},"k":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888}}}}},"docs":{}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0136986301369863}},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008}},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}},"docs":{}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}}}}},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}},"docs":{}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"s":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}},"\"":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}},"r":{"docs":{},"e":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}},".":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818}},",":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.01818181818181818}}},".":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}},"n":{"docs":{},"d":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176}}}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269}}}}}}}}}}}}}}},"h":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"=":{"docs":{},"(":{"1":{"docs":{},"=":{"9":{"docs":{},")":{"docs":{},"{":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}},"docs":{}}},"docs":{}}}}}}}}},"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"&":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},";":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"插":{"docs":{},"入":{"docs":{},"和":{"docs":{},"取":{"docs":{},"值":{"docs":{},"操":{"docs":{},"作":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":3.3581267217630852}}},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}},"l":{"docs":{},"f":{"docs":{},"=":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}},"l":{"docs":{},"d":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}},"w":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}},"l":{"docs":{},"l":{"docs":{},":":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":2.5259740259740258}},"'":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}},".":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}}}}}}},"g":{"docs":{},"h":{"docs":{},")":{"docs":{},"{":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}},"e":{"docs":{},"r":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}},".":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}},"=":{"docs":{},"=":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625}}}}}}}}}}}}}}}},")":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"{":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}},"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125}},"&":{"docs":{},"&":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}}}}}},"a":{"docs":{},")":{"docs":{},"{":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"b":{"docs":{},")":{"docs":{},"{":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}},">":{"docs":{},"=":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}}}}}}}}}}}},"docs":{}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"&":{"docs":{},"&":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{},"&":{"docs":{},"&":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}},"=":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}},"=":{"docs":{},"x":{"docs":{},")":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}},"x":{"docs":{},")":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},"{":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}},"m":{"docs":{},"p":{"0":{"docs":{},"^":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"0":{"docs":{},"?":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}},"docs":{}}}}}}}}}}},"docs":{},")":{"docs":{},"{":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}},"o":{"docs":{},"u":{"1":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}},"docs":{}}}},"x":{"docs":{},")":{"docs":{},"{":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612}}}}},"i":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}},"&":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{},"{":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}},">":{"docs":{},"=":{"0":{"docs":{},"&":{"docs":{},"&":{"docs":{},"j":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909}}}}}}}}}}}}},"docs":{}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}}}}}}},"!":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496}}}}}}}}}}}}}}},"q":{"1":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}},"docs":{},"u":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}},")":{"docs":{},"{":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},">":{"docs":{},"=":{"docs":{},"d":{"docs":{},"i":{"docs":{},")":{"docs":{},"{":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}}}},"n":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.016}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"%":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{},"{":{"docs":{"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901}}}}}},"docs":{}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"%":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{},"{":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}}},"docs":{}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"&":{"docs":{},"&":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},")":{"docs":{},"{":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}},"k":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}},"docs":{}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"0":{"docs":{},")":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}},"docs":{}}}},"j":{"docs":{},">":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{},"{":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}},"docs":{}}}},"p":{"docs":{},"r":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}},"e":{"docs":{},"v":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541}},")":{"docs":{},"{":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.010582010582010581},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}},"|":{"docs":{},"|":{"docs":{},"!":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}},"!":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},"{":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},"&":{"docs":{},"&":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},">":{"1":{"docs":{},")":{"docs":{},"{":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}}}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"!":{"docs":{},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}}}}}}},")":{"docs":{},"{":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}},"i":{"docs":{},"]":{"docs":{},"=":{"docs":{},"=":{"docs":{},"'":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}},"&":{"docs":{},"&":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}}}}},"=":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}},"!":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"&":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}},"a":{"docs":{},"!":{"docs":{},"=":{"docs":{},"b":{"docs":{},")":{"docs":{},"{":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}},")":{"docs":{},"{":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}},"t":{"docs":{},"e":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.018867924528301886}},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}}}}}}},"a":{"docs":{},"t":{"docs":{},".":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}}},"y":{"docs":{},"?":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":1.6864686468646863},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.01910828025477707},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385},"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}},"i":{"docs":{},"n":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.025974025974025976},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":2.037344398340249}},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":3.3460721868365177}}}}}}}},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":2.5425531914893615},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":2.524390243902439}},",":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}},".":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}}}}}}},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},":":{"docs":{"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}},".":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":3.346153846153846},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":2.538961038961039},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},".":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}},"y":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.02857142857142857},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":3.354838709677419},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":2.0153846153846153},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"。":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"加":{"docs":{},"上":{"docs":{},"前":{"docs":{},"两":{"docs":{},"次":{"docs":{},"的":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}}}}}}}}}}}}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"不":{"docs":{},"等":{"docs":{},"于":{"0":{"docs":{},"，":{"docs":{},"就":{"docs":{},"能":{"docs":{},"加":{"docs":{},"上":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"次":{"docs":{},"的":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333},"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}},".":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.031007751937984496}},",":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}},"2":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}},",":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}},".":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}},"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124},"79.-word-search.html":{"ref":"79.-word-search.html","tf":3.372294372294372},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":3.37984496124031},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":3.348484848484848},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":2.5172413793103448},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":2.5373134328358207},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":1.4740259740259738},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":2.5226415094339623}},":":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}},")":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}},".":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.011627906976744186}},")":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}},",":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}},"s":{"docs":{},")":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}},"{":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}}}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"s":{"docs":{},",":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.030303030303030304},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.022988505747126436}},")":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218}}},"=":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}},".":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.015151515151515152},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}}}},"l":{"docs":{},"d":{"docs":{},"!":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}},"综":{"docs":{},"合":{"docs":{},"来":{"docs":{},"看":{"docs":{},"还":{"docs":{},"是":{"docs":{},"第":{"docs":{},"二":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"更":{"docs":{},"好":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}}}}}}}}},"记":{"docs":{},"录":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},":":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"不":{"docs":{},"管":{"docs":{},"什":{"docs":{},"么":{"docs":{},"清":{"docs":{},"况":{"docs":{},"都":{"docs":{},"是":{"docs":{},"运":{"docs":{},"行":{"docs":{},"n":{"docs":{},"次":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"得":{"docs":{},"c":{"docs":{},"s":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"专":{"docs":{},"门":{"docs":{},"有":{"docs":{},"一":{"docs":{},"门":{"docs":{},"实":{"docs":{},"验":{"docs":{},"就":{"docs":{},"跟":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"很":{"docs":{},"类":{"docs":{},"似":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"不":{"docs":{},"用":{"docs":{},"哪":{"docs":{},"些":{"docs":{},"符":{"docs":{},"号":{"docs":{},"实":{"docs":{},"现":{"docs":{},"其":{"docs":{},"他":{"docs":{},"的":{"docs":{},"符":{"docs":{},"号":{"docs":{},"啥":{"docs":{},"的":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"是":{"docs":{},"不":{"docs":{},"用":{"docs":{},"乘":{"docs":{},"除":{"docs":{},"取":{"docs":{},"余":{"docs":{},"数":{"docs":{},"，":{"docs":{},"实":{"docs":{},"现":{"docs":{},"除":{"docs":{},"法":{"docs":{},"。":{"docs":{},"能":{"docs":{},"用":{"docs":{},"的":{"docs":{},"还":{"docs":{},"有":{"docs":{},"加":{"docs":{},"法":{"docs":{},"和":{"docs":{},"减":{"docs":{},"法":{"docs":{},"，":{"docs":{},"除":{"docs":{},"法":{"docs":{},"其":{"docs":{},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"看":{"docs":{},"被":{"docs":{},"除":{"docs":{},"数":{"docs":{},"中":{"docs":{},"能":{"docs":{},"减":{"docs":{},"去":{"docs":{},"几":{"docs":{},"个":{"docs":{},"除":{"docs":{},"数":{"docs":{},"。":{"docs":{},"想":{"docs":{},"到":{"docs":{},"这":{"docs":{},"一":{"docs":{},"步":{"docs":{},"就":{"docs":{},"很":{"docs":{},"清":{"docs":{},"晰":{"docs":{},"了":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"诶":{"docs":{},"一":{"docs":{},"直":{"docs":{},"减":{"docs":{},"去":{"docs":{},"除":{"docs":{},"数":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"有":{"docs":{},"的":{"docs":{},"慢":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"减":{"docs":{},"去":{"docs":{},"除":{"docs":{},"数":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"会":{"docs":{},"快":{"docs":{},"一":{"docs":{},"点":{"docs":{},"。":{"docs":{},"直":{"docs":{},"接":{"docs":{},"移":{"docs":{},"位":{"docs":{},"最":{"docs":{},"好":{"docs":{},"，":{"docs":{},"就":{"docs":{},"能":{"docs":{},"很":{"docs":{},"快":{"docs":{},"生":{"docs":{},"成":{"2":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"分":{"docs":{},"析":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"是":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"最":{"docs":{},"好":{"docs":{},"情":{"docs":{},"况":{"docs":{},"是":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"不":{"docs":{},"同":{"docs":{},"。":{"docs":{},"在":{"docs":{},"输":{"docs":{},"入":{"docs":{},"为":{"docs":{},"n":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"需":{"docs":{},"要":{"docs":{},"运":{"docs":{},"行":{"2":{"docs":{},"n":{"docs":{},"次":{"docs":{},"，":{"docs":{},"最":{"docs":{},"好":{"docs":{},"情":{"docs":{},"况":{"docs":{},"需":{"docs":{},"要":{"docs":{},"运":{"docs":{},"行":{"docs":{},"n":{"docs":{},"次":{"docs":{},"。":{"docs":{},"最":{"docs":{},"好":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{"3.-longest-substring-without-repeating-characters.html":{"ref":"3.-longest-substring-without-repeating-characters.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"想":{"docs":{},"装":{"docs":{},"更":{"docs":{},"多":{"docs":{},"的":{"docs":{},"水":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"两":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"隔":{"docs":{},"得":{"docs":{},"越":{"docs":{},"远":{"docs":{},"越":{"docs":{},"好":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"两":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"中":{"docs":{},"较":{"docs":{},"矮":{"docs":{},"的":{"docs":{},"那":{"docs":{},"根":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"也":{"docs":{},"会":{"docs":{},"决":{"docs":{},"定":{"docs":{},"装":{"docs":{},"水":{"docs":{},"的":{"docs":{},"量":{"docs":{},"。":{"docs":{},"直":{"docs":{},"接":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"法":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"很":{"docs":{},"多":{"docs":{},"人":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"就":{"docs":{},"想":{"docs":{},"到":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"每":{"docs":{},"一":{"docs":{},"种":{"docs":{},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"题":{"docs":{},"还":{"docs":{},"有":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"隔":{"docs":{},"得":{"docs":{},"越":{"docs":{},"远":{"docs":{},"，":{"docs":{},"更":{"docs":{},"大":{"docs":{},"容":{"docs":{},"量":{"docs":{},"的":{"docs":{},"概":{"docs":{},"率":{"docs":{},"会":{"docs":{},"大":{"docs":{},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"这":{"docs":{},"里":{"docs":{},"也":{"docs":{},"用":{"docs":{},"到":{"docs":{},"了":{"docs":{},"之":{"docs":{},"前":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"考":{"docs":{},"虑":{"docs":{},"一":{"docs":{},"般":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"相":{"docs":{},"等":{"docs":{},"了":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"查":{"docs":{},"看":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"的":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"当":{"docs":{},"前":{"docs":{},"也":{"docs":{},"是":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"，":{"docs":{},"那":{"docs":{},"也":{"docs":{},"好":{"docs":{},"说":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"按":{"docs":{},"照":{"docs":{},"相":{"docs":{},"等":{"docs":{},"来":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{},"关":{"docs":{},"键":{"docs":{},"就":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"*":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"来":{"docs":{},"回":{"docs":{},"顾":{"docs":{},"一":{"docs":{},"下":{"docs":{},"*":{"docs":{},"的":{"docs":{},"定":{"docs":{},"义":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"0":{"docs":{},"个":{"docs":{},"，":{"0":{"docs":{},"个":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"查":{"docs":{},"看":{"docs":{},"靠":{"docs":{},"左":{"docs":{},"两":{"docs":{},"个":{"docs":{},"方":{"docs":{},"格":{"docs":{},"的":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"c":{"docs":{},"*":{"docs":{},"和":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"排":{"docs":{},"前":{"docs":{},"三":{"docs":{},"个":{"docs":{},"。":{"docs":{},"两":{"docs":{},"个":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"，":{"docs":{},"值":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"c":{"docs":{},"和":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"格":{"docs":{},"子":{"docs":{},"值":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"c":{"docs":{},"*":{"docs":{},"是":{"docs":{},"和":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"0":{"docs":{},"个":{"docs":{},"c":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"观":{"docs":{},"察":{"docs":{},"左":{"docs":{},"边":{"docs":{},"两":{"docs":{},"个":{"docs":{},"格":{"docs":{},"子":{"docs":{},"的":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"考":{"docs":{},"虑":{"1":{"docs":{},"个":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"现":{"docs":{},"在":{"docs":{},"可":{"docs":{},"以":{"docs":{},"换":{"docs":{},"一":{"docs":{},"种":{"docs":{},"思":{"docs":{},"想":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"行":{"docs":{},"列":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"需":{"docs":{},"要":{"1":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"上":{"docs":{},"一":{"docs":{},"行":{"docs":{},"和":{"docs":{},"当":{"docs":{},"前":{"docs":{},"列":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"0":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"上":{"docs":{},"一":{"docs":{},"行":{"docs":{},"成":{"docs":{},"功":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"一":{"docs":{},"行":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"也":{"docs":{},"成":{"docs":{},"功":{"docs":{},"。":{"docs":{},"同":{"docs":{},"理":{"docs":{},"可":{"docs":{},"得":{"1":{"docs":{},"个":{"docs":{},"或":{"docs":{},"者":{"docs":{},"多":{"docs":{},"个":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"看":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"格":{"docs":{},"子":{"docs":{},"是":{"docs":{},"否":{"docs":{},"满":{"docs":{},"足":{"docs":{},"条":{"docs":{},"件":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"看":{"docs":{},"来":{"docs":{},"，":{"docs":{},"排":{"docs":{},"序":{"docs":{},"成":{"docs":{},"了":{"docs":{},"我":{"docs":{},"们":{"docs":{},"的":{"docs":{},"瓶":{"docs":{},"颈":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"也":{"docs":{},"不":{"docs":{},"能":{"docs":{},"这":{"docs":{},"么":{"docs":{},"说":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"至":{"docs":{},"少":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"两":{"docs":{},"个":{"docs":{},"头":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"两":{"docs":{},"个":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"加":{"docs":{},"到":{"docs":{},"两":{"docs":{},"个":{"docs":{},"头":{"docs":{},"上":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"将":{"docs":{},"两":{"docs":{},"个":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"合":{"docs":{},"并":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"待":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"链":{"docs":{},"表":{"docs":{},"问":{"docs":{},"题":{"docs":{},"了":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"于":{"docs":{},"下":{"docs":{},"一":{"docs":{},"天":{"docs":{},"价":{"docs":{},"格":{"docs":{},"比":{"docs":{},"今":{"docs":{},"天":{"docs":{},"低":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"我":{"docs":{},"们":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"要":{"docs":{},"下":{"docs":{},"一":{"docs":{},"天":{"docs":{},"买":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"这":{"docs":{},"一":{"docs":{},"天":{"docs":{},"高":{"docs":{},"价":{"docs":{},"买":{"docs":{},"。":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"把":{"docs":{},"买":{"docs":{},"进":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"改":{"docs":{},"成":{"docs":{},"下":{"docs":{},"一":{"docs":{},"天":{"docs":{},"的":{"docs":{},"。":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"知":{"docs":{},"道":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"最":{"docs":{},"多":{"docs":{},"允":{"docs":{},"许":{"docs":{},"买":{"docs":{},"两":{"docs":{},"次":{"docs":{},"，":{"docs":{},"意":{"docs":{},"思":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"次":{"docs":{},"可":{"docs":{},"以":{"docs":{},"，":{"docs":{},"那":{"docs":{},"就":{"docs":{},"买":{"docs":{},"一":{"docs":{},"个":{"docs":{},"。":{"docs":{},"就":{"docs":{},"像":{"docs":{},"e":{"docs":{},"x":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"构":{"docs":{},"造":{"docs":{},"并":{"docs":{},"查":{"docs":{},"集":{"docs":{},"，":{"docs":{},"在":{"docs":{},"并":{"docs":{},"查":{"docs":{},"集":{"docs":{},"有":{"docs":{},"路":{"docs":{},"径":{"docs":{},"压":{"docs":{},"缩":{"docs":{},"时":{"docs":{},"，":{"docs":{},"插":{"docs":{},"入":{"docs":{},"和":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},",":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"还":{"docs":{},"是":{"docs":{},"用":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{},"求":{"docs":{},"法":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"时":{"docs":{},"间":{"docs":{},"太":{"docs":{},"慢":{"docs":{},"了":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"看":{"docs":{},"如":{"docs":{},"果":{"docs":{},"利":{"docs":{},"用":{"docs":{},"第":{"docs":{},"一":{"docs":{},"题":{"docs":{},"类":{"docs":{},"似":{"docs":{},"的":{"docs":{},"投":{"docs":{},"票":{"docs":{},"机":{"docs":{},"制":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"维":{"docs":{},"护":{"docs":{},"两":{"docs":{},"个":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{},"其":{"docs":{},"中":{"docs":{},"一":{"docs":{},"个":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"就":{"docs":{},"投":{"docs":{},"一":{"docs":{},"票":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"都":{"docs":{},"不":{"docs":{},"想":{"docs":{},"等":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"候":{"docs":{},"选":{"docs":{},"者":{"docs":{},"都":{"docs":{},"减":{"docs":{},"一":{"docs":{},"票":{"docs":{},"。":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"的":{"docs":{},"一":{"docs":{},"点":{"docs":{},"是":{"docs":{},"，":{"docs":{},"虽":{"docs":{},"然":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"是":{"3":{"2":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"对":{"docs":{},"一":{"docs":{},"个":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"进":{"docs":{},"行":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"位":{"docs":{},"的":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"规":{"docs":{},"律":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"。":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"来":{"docs":{},"了":{"docs":{},"个":{"docs":{},"很":{"docs":{},"大":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"还":{"docs":{},"在":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"中":{"docs":{},"的":{"docs":{},"，":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"比":{"docs":{},"这":{"docs":{},"个":{"docs":{},"值":{"docs":{},"小":{"docs":{},"的":{"docs":{},"值":{"docs":{},"就":{"docs":{},"已":{"docs":{},"经":{"docs":{},"失":{"docs":{},"去":{"docs":{},"作":{"docs":{},"用":{"docs":{},"了":{"docs":{},"。":{"docs":{},"之":{"docs":{},"后":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"会":{"docs":{},"被":{"docs":{},"放":{"docs":{},"入":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"在":{"docs":{},"每":{"docs":{},"次":{"docs":{},"加":{"docs":{},"入":{"docs":{},"新":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"之":{"docs":{},"前":{"docs":{},"比":{"docs":{},"它":{"docs":{},"小":{"docs":{},"的":{"docs":{},"数":{"docs":{},"剔":{"docs":{},"除":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"插":{"docs":{},"入":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"当":{"docs":{},"前":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"了":{"docs":{},"。":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"是":{"docs":{},"，":{"docs":{},"当":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"中":{"docs":{},"的":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"k":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"剔":{"docs":{},"除":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"空":{"docs":{},"格":{"docs":{},"啥":{"docs":{},"的":{"docs":{},"都":{"docs":{},"去":{"docs":{},"掉":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"精":{"docs":{},"简":{"docs":{},"的":{"docs":{},"单":{"docs":{},"词":{"docs":{},"，":{"docs":{},"将":{"docs":{},"单":{"docs":{},"词":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"将":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"翻":{"docs":{},"转":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}},"说":{"docs":{},"下":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"这":{"docs":{},"种":{"docs":{},"形":{"docs":{},"式":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"一":{"docs":{},"般":{"docs":{},"是":{"docs":{},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"，":{"docs":{},"类":{"docs":{},"似":{"docs":{},"的":{"docs":{},"有":{"docs":{},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"这":{"docs":{},"题":{"docs":{},"，":{"docs":{},"连":{"docs":{},"续":{"docs":{},"数":{"docs":{},"组":{"docs":{},"要":{"docs":{},"不":{"docs":{},"就":{"docs":{},"是":{"docs":{},"包":{"docs":{},"含":{"docs":{},"中":{"docs":{},"间":{"docs":{},"那":{"docs":{},"个":{"docs":{},"值":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"docs":{},"在":{"docs":{},"左":{"docs":{},"半":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"docs":{},"在":{"docs":{},"右":{"docs":{},"半":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"首":{"docs":{},"先":{"docs":{},"处":{"docs":{},"理":{"docs":{},"连":{"docs":{},"续":{"docs":{},"数":{"docs":{},"组":{"docs":{},"在":{"docs":{},"中":{"docs":{},"间":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"从":{"docs":{},"中":{"docs":{},"间":{"docs":{},"开":{"docs":{},"始":{"docs":{},"左":{"docs":{},"右":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"左":{"docs":{},"边":{"docs":{},"右":{"docs":{},"边":{"docs":{},"递":{"docs":{},"归":{"docs":{},"处":{"docs":{},"理":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.02531645569620253},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"16.3sum-closest.html":{"ref":"16.3sum-closest.html","tf":0.037037037037037035},"18.-4sum.html":{"ref":"18.-4sum.html","tf":0.045454545454545456},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179},"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.017543859649122806}}},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"都":{"docs":{},"会":{"docs":{},"进":{"docs":{},"入":{"docs":{},"子":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"平":{"docs":{},"方":{"docs":{},")":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"最":{"docs":{},"佳":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"。":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}},"好":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"不":{"docs":{},"会":{"docs":{},"进":{"docs":{},"入":{"docs":{},"子":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"开":{"docs":{},"始":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"这":{"docs":{},"题":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"，":{"docs":{},"这":{"docs":{},"不":{"docs":{},"是":{"docs":{},"跟":{"docs":{},"第":{"7":{"docs":{},"题":{"docs":{},"很":{"docs":{},"类":{"docs":{},"似":{"docs":{},"吗":{"docs":{},"。":{"docs":{},"直":{"docs":{},"接":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"2":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{},"就":{"docs":{},"是":{"docs":{},"个":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"题":{"docs":{},"了":{"docs":{},"。":{"docs":{},"不":{"docs":{},"到":{"docs":{},"一":{"docs":{},"分":{"docs":{},"钟":{"docs":{},"写":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"里":{"docs":{},"的":{"docs":{},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"，":{"docs":{},"我":{"docs":{},"想":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"和":{"docs":{},"前":{"docs":{},"一":{"docs":{},"题":{"docs":{},"一":{"docs":{},"样":{"docs":{},"处":{"docs":{},"理":{"docs":{},"，":{"docs":{},"只":{"docs":{},"不":{"docs":{},"过":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"判":{"docs":{},"断":{"docs":{},"这":{"docs":{},"个":{"docs":{},"范":{"docs":{},"围":{"docs":{},"内":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"测":{"docs":{},"试":{"docs":{},"样":{"docs":{},"例":{"docs":{},"很":{"docs":{},"b":{"docs":{},"u":{"docs":{},"g":{"docs":{},"，":{"docs":{},"有":{"docs":{},"个":{"docs":{},"测":{"docs":{},"试":{"docs":{},"样":{"docs":{},"例":{"docs":{},"是":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"超":{"docs":{},"时":{"docs":{},"。":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"这":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"转":{"docs":{},"置":{"docs":{},"之":{"docs":{},"后":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"给":{"docs":{},"这":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"空":{"docs":{},"间":{"docs":{},"题":{"docs":{},"目":{"docs":{},"也":{"docs":{},"明":{"docs":{},"显":{"docs":{},"要":{"docs":{},"求":{"docs":{},"了":{"docs":{},"我":{"docs":{},"们":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"维":{"docs":{},"持":{"docs":{},"在":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"内":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"必":{"docs":{},"须":{"docs":{},"在":{"docs":{},"本":{"docs":{},"来":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"上":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"只":{"docs":{},"能":{"docs":{},"这":{"docs":{},"么":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"就":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"交":{"docs":{},"换":{"docs":{},"值":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"对":{"docs":{},"称":{"docs":{},"的":{"docs":{},"改":{"docs":{},"变":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"旋":{"docs":{},"转":{"9":{"0":{"docs":{},"度":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"首":{"docs":{},"先":{"docs":{},"按":{"docs":{},"照":{"docs":{},"竖":{"docs":{},"直":{"docs":{},"中":{"docs":{},"线":{"docs":{},"对":{"docs":{},"称":{"docs":{},"，":{"docs":{},"再":{"docs":{},"按":{"docs":{},"照":{"docs":{},"对":{"docs":{},"角":{"docs":{},"线":{"docs":{},"对":{"docs":{},"称":{"docs":{},"就":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"，":{"docs":{},"两":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"得":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"数":{"docs":{},"的":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"对":{"docs":{},"数":{"docs":{},"组":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"。":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"大":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},"，":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"现":{"docs":{},"在":{"docs":{},"给":{"docs":{},"出":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"3":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"为":{"1":{"docs":{},"，":{"2":{"docs":{},"，":{"3":{"docs":{},"。":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"是":{"6":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"最":{"docs":{},"后":{"docs":{},"加":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"4":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"会":{"docs":{},"变":{"docs":{},"为":{"1":{"0":{"docs":{},"。":{"docs":{},"这":{"docs":{},"个":{"docs":{},"例":{"docs":{},"子":{"docs":{},"说":{"docs":{},"明":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"来":{"docs":{},"简":{"docs":{},"化":{"docs":{},"求":{"docs":{},"解":{"docs":{},"现":{"docs":{},"在":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"。":{"docs":{},"这":{"docs":{},"也":{"docs":{},"是":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"和":{"docs":{},"为":{"docs":{},"负":{"docs":{},"值":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"不":{"docs":{},"能":{"docs":{},"用":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"负":{"docs":{},"值":{"docs":{},"，":{"docs":{},"应":{"docs":{},"该":{"docs":{},"使":{"docs":{},"用":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"直":{"docs":{},"接":{"docs":{},"表":{"docs":{},"示":{"docs":{},"。":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"后":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"仔":{"docs":{},"细":{"docs":{},"想":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"以":{"docs":{},"及":{"docs":{},"代":{"docs":{},"码":{"docs":{},"里":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"进":{"docs":{},"行":{"docs":{},"的":{"docs":{},"。":{"docs":{},"不":{"docs":{},"然":{"docs":{},"很":{"docs":{},"难":{"docs":{},"理":{"docs":{},"解":{"docs":{},"，":{"docs":{},"我":{"docs":{},"个":{"docs":{},"人":{"docs":{},"也":{"docs":{},"是":{"docs":{},"第":{"docs":{},"三":{"docs":{},"次":{"docs":{},"做":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"了":{"docs":{},"，":{"docs":{},"也":{"docs":{},"都":{"docs":{},"需":{"docs":{},"要":{"docs":{},"仔":{"docs":{},"细":{"docs":{},"回":{"docs":{},"味":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"执":{"docs":{},"行":{"3":{"docs":{},"n":{"docs":{},"次":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}}}}}}},"docs":{}}},"一":{"docs":{},"位":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"0":{"docs":{},"。":{"docs":{},"b":{"docs":{},">":{"docs":{},"=":{"docs":{},"a":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},")":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"数":{"docs":{},"相":{"docs":{},"与":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"为":{"0":{"docs":{},".":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}},"将":{"docs":{},"结":{"docs":{},"果":{"docs":{},"保":{"docs":{},"存":{"docs":{},"在":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"中":{"docs":{},"即":{"docs":{},"可":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}}},"多":{"docs":{},"走":{"docs":{},"到":{"docs":{},"对":{"docs":{},"角":{"docs":{},"线":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"花":{"docs":{},"费":{"docs":{},"n":{"docs":{},"+":{"docs":{},"m":{"docs":{},"步":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"+":{"docs":{},"m":{"docs":{},")":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"找":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"次":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"将":{"docs":{},"它":{"docs":{},"当":{"docs":{},"作":{"docs":{},"一":{"docs":{},"个":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"的":{"docs":{},"中":{"docs":{},"间":{"docs":{},"，":{"docs":{},"向":{"docs":{},"两":{"docs":{},"边":{"docs":{},"扩":{"docs":{},"散":{"docs":{},"。":{"docs":{},"比":{"docs":{},"较":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{"5.-longest-palindromic-substring.html":{"ref":"5.-longest-palindromic-substring.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"建":{"docs":{},"立":{"docs":{},"起":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"之":{"docs":{},"间":{"docs":{},"的":{"docs":{},"映":{"docs":{},"射":{"docs":{},"关":{"docs":{},"系":{"docs":{},"就":{"docs":{},"很":{"docs":{},"好":{"docs":{},"解":{"docs":{},"决":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"代":{"docs":{},"码":{"docs":{},"实":{"docs":{},"现":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}}}}},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"进":{"docs":{},"入":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"值":{"docs":{},"减":{"docs":{},"去":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"判":{"docs":{},"断":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"并":{"docs":{},"且":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"质":{"docs":{},"数":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"查":{"docs":{},"看":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"两":{"docs":{},"数":{"docs":{},"相":{"docs":{},"乘":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"n":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"求":{"docs":{},"n":{"docs":{},"数":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"质":{"docs":{},"数":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"反":{"docs":{},"方":{"docs":{},"向":{"docs":{},"来":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"。":{"docs":{},"得":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"质":{"docs":{},"数":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"排":{"docs":{},"除":{"docs":{},"所":{"docs":{},"有":{"docs":{},"他":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"。":{"docs":{},"排":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"只":{"docs":{},"要":{"docs":{},"一":{"docs":{},"次":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"之":{"docs":{},"后":{"docs":{},"再":{"docs":{},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"质":{"docs":{},"数":{"docs":{},"却":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"。":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"1":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{},"b":{"2":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{},"s":{"1":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"s":{"2":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}},"docs":{}}},"docs":{}}}},"docs":{}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"b":{"1":{"docs":{},",":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}},"docs":{}}}}}}}},"2":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"b":{"2":{"docs":{},",":{"docs":{},"s":{"1":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}},"docs":{}}}},"docs":{}}}}}}}},"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.025974025974025976},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},"e":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.02666666666666667},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},")":{"docs":{},".":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}},".":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}},")":{"docs":{},".":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787}}}},":":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}},",":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}}}},"n":{"docs":{},"g":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.015544041450777202},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.011627906976744186},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.011627906976744186},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.010362694300518135},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},".":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}},")":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}},"{":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}},";":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}},"=":{"0":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},";":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}}}}}}}}}}}},"docs":{}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.029069767441860465}},",":{"docs":{"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093}}}}}}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}},"s":{"docs":{},".":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}}}},"?":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}},"s":{"docs":{},"t":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":1.675213675213675},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":1.4343853820598005},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":1.4343853820598005},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":1.4347063978965817}},";":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}},"=":{"0":{"docs":{},";":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}},"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"b":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{},"i":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}}}}}}},":":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}},"i":{"docs":{},"t":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.023809523809523808},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":2.522727272727273}}}}}},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":3.372294372294372},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":2.015873015873016},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":1.6787148594377508},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":2.0120481927710845},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":2.0340136054421767},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":2.018867924528302},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.022222222222222223},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.022222222222222223},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":1.697674418604651},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":1.4474393530997303},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":2.0392156862745097},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":1.462469733656174},"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":1.5535714285714284},"107.-binary-tree-level-order-traversal-ii.html":{"ref":"107.-binary-tree-level-order-traversal-ii.html","tf":1.5535714285714284},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":1.459579180509413},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":2.536231884057971},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":2.028985507246377},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.022727272727272728},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.02054794520547945},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":1.6912568306010927},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":1.6944444444444442},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.008},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":2.0254777070063694},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":2.02803738317757},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":1.6869369369369367},"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.025},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":2.528169014084507},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":1.4500768049155144},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":1.6904761904761902},"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":2.50990099009901},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":2.020746887966805}}}}}}},"o":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},";":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}},"?":{"docs":{},"i":{"docs":{},":":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}}},"o":{"docs":{},"l":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684},"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839},"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306},"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.010309278350515464}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.03184713375796178},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.024},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}},")":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}},",":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"=":{"docs":{},"'":{"docs":{},"\\":{"0":{"docs":{},"'":{"docs":{},";":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}},"docs":{}}},"t":{"docs":{},";":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}},"^":{"docs":{},"=":{"2":{"5":{"5":{"docs":{},";":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.01948051948051948}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},".":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}},"x":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}},",":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}},"t":{"docs":{},"h":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.017699115044247787},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},".":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}}}},"n":{"docs":{},"u":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.024}},",":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.008}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306}}}}}},",":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}},"r":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988},"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.03896103896103896}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.023255813953488372},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":2.5144927536231885}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}},"b":{"docs":{},"g":{"docs":{},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.028089887640449437}}}}}}},"s":{"docs":{},"e":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},";":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}}}}}}}},"i":{"docs":{},"c":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":3.348600508905852}}}}}},",":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}}}}}},"t":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}},"y":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":1.7094017094017093},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":1.4808970099667773},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":1.4750830564784052},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":1.4592462751971953}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.017857142857142856}},"s":{"docs":{},".":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":3.340909090909091},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":2.5057471264367814}},";":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.018867924528301886},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}}},")":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}},"{":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}}},"+":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}},",":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}},".":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}},"\"":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.007462686567164179}}}}}},"s":{"docs":{},"t":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":2.0123456790123457}},"'":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.012048192771084338},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}},"s":{"docs":{},":":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}}},".":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.010752688172043012}}},":":{"docs":{"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124}}}}},".":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}},"=":{"docs":{},"b":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}}},"y":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.016666666666666666},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}},"=":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}},"docs":{}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}},")":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},";":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}},"于":{"docs":{},"是":{"docs":{},"开":{"docs":{},"始":{"docs":{},"找":{"docs":{},"规":{"docs":{},"律":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"除":{"docs":{},"了":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"行":{"docs":{},"。":{"docs":{},"中":{"docs":{},"间":{"docs":{},"每":{"docs":{},"行":{"docs":{},"都":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"纵":{"docs":{},"向":{"docs":{},"字":{"docs":{},"符":{"docs":{},"中":{"docs":{},"夹":{"docs":{},"着":{"docs":{},"一":{"docs":{},"个":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"找":{"docs":{},"纵":{"docs":{},"向":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"规":{"docs":{},"律":{"docs":{},"，":{"docs":{},"每":{"docs":{},"一":{"docs":{},"行":{"docs":{},"两":{"docs":{},"个":{"docs":{},"纵":{"docs":{},"向":{"docs":{},"字":{"docs":{},"符":{"docs":{},"位":{"docs":{},"置":{"docs":{},"差":{"docs":{},"是":{"docs":{},"，":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"*":{"2":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"参":{"docs":{},"考":{"docs":{},"了":{"docs":{},"下":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"有":{"docs":{},"人":{"docs":{},"在":{"docs":{},"进":{"docs":{},"入":{"docs":{},"下":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"开":{"docs":{},"始":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"想":{"docs":{},"法":{"docs":{},"是":{"docs":{},"直":{"docs":{},"接":{"docs":{},"构":{"docs":{},"造":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"按":{"docs":{},"照":{"docs":{},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"把":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"存":{"docs":{},"入":{"docs":{},"其":{"docs":{},"中":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"太":{"docs":{},"慢":{"docs":{},"了":{"docs":{},"，":{"docs":{},"也":{"docs":{},"太":{"docs":{},"占":{"docs":{},"用":{"docs":{},"空":{"docs":{},"间":{"docs":{},"了":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"地":{"docs":{},"方":{"docs":{},"都":{"docs":{},"没":{"docs":{},"有":{"docs":{},"存":{"docs":{},"数":{"docs":{},"据":{"docs":{},"。":{"docs":{"6.-zigzag-conversion.html":{"ref":"6.-zigzag-conversion.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"得":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"找":{"docs":{},"到":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"数":{"docs":{},"据":{"docs":{},"复":{"docs":{},"制":{"docs":{},"到":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"中":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"注":{"docs":{},"意":{"docs":{},"一":{"docs":{},"定":{"docs":{},"要":{"docs":{},"使":{"docs":{},"用":{"docs":{},"这":{"docs":{},"种":{"docs":{},"办":{"docs":{},"法":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"个":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"个":{"docs":{},"插":{"docs":{},"入":{"docs":{},"很":{"docs":{},"可":{"docs":{},"能":{"docs":{},"耗":{"docs":{},"时":{"docs":{},"更":{"docs":{},"多":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"在":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"会":{"docs":{},"再":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"执":{"docs":{},"行":{"docs":{},"n":{"docs":{},"次":{"docs":{},"。":{"docs":{"128.-Longest-Consecutive-Sequence.html":{"ref":"128.-Longest-Consecutive-Sequence.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"状":{"docs":{},"态":{"0":{"0":{"docs":{},",":{"docs":{},"然":{"docs":{},"后":{"docs":{},"依":{"docs":{},"次":{"docs":{},"是":{"1":{"0":{"docs":{},",":{"0":{"1":{"docs":{},",":{"0":{"0":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}},"docs":{}},"docs":{}}}}},"x":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.025},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.009900990099009901},"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.017391304347826087},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.014084507042253521},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.216},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0091324200913242},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},")":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.015037593984962405},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}},"{":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.01694915254237288}}},".":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}},"/":{"docs":{},"=":{"1":{"0":{"docs":{},";":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.02040816326530612}}}},"docs":{}},"docs":{}}},",":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125},"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549}}},"中":{"docs":{},"查":{"docs":{},"找":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"满":{"docs":{},"足":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"*":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"=":{"docs":{},"x":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}},"−":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904},"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}},"初":{"docs":{},"次":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"这":{"docs":{},"题":{"docs":{},"想":{"docs":{},"到":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"判":{"docs":{},"断":{"docs":{},"正":{"docs":{},"负":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"按":{"docs":{},"位":{"docs":{},"处":{"docs":{},"理":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"取":{"docs":{},"模":{"docs":{},"得":{"docs":{},"到":{"docs":{},"个":{"docs":{},"位":{"docs":{},"，":{"docs":{},"将":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"个":{"docs":{},"位":{"docs":{},"加":{"docs":{},"到":{"docs":{},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"中":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"想":{"docs":{},"法":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"我":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"用":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"更":{"docs":{},"加":{"docs":{},"易":{"docs":{},"懂":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"比":{"docs":{},"较":{"docs":{},"少":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"判":{"docs":{},"断":{"docs":{},"正":{"docs":{},"负":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"数":{"docs":{},"字":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{},"之":{"docs":{},"后":{"docs":{},"调":{"docs":{},"用":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"函":{"docs":{},"数":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"将":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"过":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"变":{"docs":{},"回":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"处":{"docs":{},"理":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"的":{"0":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"会":{"docs":{},"被":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"到":{"docs":{},"首":{"docs":{},"位":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"如":{"docs":{},"果":{"docs":{},"现":{"docs":{},"在":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"大":{"docs":{},"于":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"2":{"docs":{},"^":{"3":{"1":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"始":{"docs":{},"化":{"docs":{},"是":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"当":{"docs":{},"前":{"docs":{},"状":{"docs":{},"态":{"docs":{},"加":{"docs":{},"入":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"并":{"docs":{},"且":{"docs":{},"移":{"docs":{},"动":{"docs":{},"头":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"逼":{"docs":{},"近":{"docs":{},"尾":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"在":{"docs":{},"整":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"中":{"docs":{},"，":{"docs":{},"t":{"docs":{},"o":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"函":{"docs":{},"数":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"函":{"docs":{},"数":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"也":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"算":{"docs":{},"法":{"docs":{},"中":{"docs":{},"其":{"docs":{},"他":{"docs":{},"部":{"docs":{},"分":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"数":{"docs":{},"学":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"每":{"docs":{},"位":{"docs":{},"处":{"docs":{},"理":{"docs":{},"可":{"docs":{},"能":{"docs":{},"比":{"docs":{},"这":{"docs":{},"个":{"docs":{},"快":{"docs":{},"一":{"docs":{},"点":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"用":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"字":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"问":{"docs":{},"题":{"docs":{},"还":{"docs":{},"是":{"docs":{},"很":{"docs":{},"舒":{"docs":{},"服":{"docs":{},"的":{"docs":{},"。":{"docs":{"7.-reverse-integer.html":{"ref":"7.-reverse-integer.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"的":{"docs":{},"基":{"docs":{},"础":{"docs":{},"上":{"docs":{},"，":{"docs":{},"在":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"上":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"减":{"docs":{},"去":{"docs":{},"当":{"docs":{},"前":{"docs":{},"价":{"docs":{},"格":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"减":{"docs":{},"去":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"购":{"docs":{},"买":{"docs":{},"的":{"docs":{},"成":{"docs":{},"本":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"都":{"docs":{},"计":{"docs":{},"算":{"docs":{},"此":{"docs":{},"值":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"购":{"docs":{},"买":{"docs":{},"的":{"docs":{},"最":{"docs":{},"便":{"docs":{},"宜":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"。":{"docs":{"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"中":{"docs":{},"看":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"很":{"docs":{},"聪":{"docs":{},"明":{"docs":{},"的":{"docs":{},"办":{"docs":{},"法":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"改":{"docs":{},"动":{"docs":{},"的":{"docs":{},"先":{"docs":{},"根":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"找":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"改":{"docs":{},"动":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"访":{"docs":{},"问":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"变":{"docs":{},"为":{"docs":{},"，":{"docs":{},"先":{"docs":{},"根":{"docs":{},"后":{"docs":{},"右":{"docs":{},"再":{"docs":{},"左":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"访":{"docs":{},"问":{"docs":{},"时":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"层":{"docs":{},"次":{"docs":{},"和":{"docs":{},"结":{"docs":{},"果":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"关":{"docs":{},"系":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"是":{"docs":{},"先":{"docs":{},"访":{"docs":{},"问":{"docs":{},"右":{"docs":{},"再":{"docs":{},"左":{"docs":{},"，":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"访":{"docs":{},"问":{"docs":{},"的":{"docs":{},"，":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"最":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"访":{"docs":{},"问":{"docs":{},"的":{"docs":{},"就":{"docs":{},"直":{"docs":{},"接":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"函":{"docs":{},"数":{"docs":{},"中":{"docs":{},"，":{"docs":{},"处":{"docs":{},"理":{"docs":{},"方":{"docs":{},"式":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"每":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"，":{"docs":{},"对":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"左":{"docs":{},"右":{"docs":{},"分":{"docs":{},"别":{"docs":{},"进":{"docs":{},"行":{"docs":{},"递":{"docs":{},"归":{"docs":{},"处":{"docs":{},"理":{"docs":{},"。":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"9.-palindrome-number.html":{"ref":"9.-palindrome-number.html","tf":0.01020408163265306},"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176},"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}},".":{"docs":{"211.-Add-and-Search-Word-Data-structure-design.html":{"ref":"211.-Add-and-Search-Word-Data-structure-design.html","tf":0.015151515151515152}},".":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125}},",":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282}}}}}},"'":{"0":{"docs":{},"'":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},")":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}},"+":{"docs":{},"c":{"docs":{},";":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"b":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}}}}}}}},";":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}},";":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}},"1":{"docs":{},"'":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}},")":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549}}}}},"docs":{},"'":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745}}},"*":{"docs":{},"'":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.025477707006369428}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}},".":{"docs":{},"'":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}},".":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714}}}}},"a":{"docs":{},"'":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}},",":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}},"]":{"docs":{},")":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}}}}}},"(":{"docs":{},"'":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}},",":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}},")":{"docs":{"151.-Reverse-Words-in-a-String.html":{"ref":"151.-Reverse-Words-in-a-String.html","tf":0.014925373134328358},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.015267175572519083}},"'":{"docs":{},",":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428},"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}},"[":{"docs":{},"'":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}},"]":{"docs":{},"'":{"docs":{},",":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}},"{":{"docs":{},"'":{"docs":{},",":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}},"}":{"docs":{},"'":{"docs":{},",":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}},"?":{"docs":{},"'":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.01910828025477707}}}},"b":{"docs":{},"'":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}},".":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}}}},"c":{"docs":{},"'":{"docs":{},",":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357}}},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}},"q":{"docs":{},"'":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"'":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"'":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}}}}}},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}}}},"h":{"docs":{},"'":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}},"i":{"docs":{},"'":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}},"n":{"docs":{},"'":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}}},"r":{"docs":{},"'":{"docs":{},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.015503875968992248}}}}},"t":{"docs":{},"'":{"docs":{},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}},"u":{"docs":{},"'":{"docs":{},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}},"x":{"docs":{},"'":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.016}},")":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}},".":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.024}}}}},"z":{"docs":{},"'":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}},"o":{"docs":{},"'":{"docs":{"130.-Surrounded-Regions.html":{"ref":"130.-Surrounded-Regions.html","tf":0.04}}}}},"*":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.00980392156862745},"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.047619047619047616},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.05660377358490566},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.047244094488188976},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.06666666666666667},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.06306306306306306},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.058333333333333334},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.031578947368421054},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.05357142857142857},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.06060606060606061},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.045112781954887216},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.048},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.037037037037037035},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.04216867469879518},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.047619047619047616},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.0440251572327044},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.05185185185185185},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.05185185185185185},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.05426356589147287},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.052830188679245285},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.06862745098039216},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.059322033898305086},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.05426356589147287},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.050724637681159424},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.050724637681159424},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.05303030303030303},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.04794520547945205},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.05737704918032787},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.04861111111111111},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.028},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.03508771929824561},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.03550295857988166},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.046875},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.044585987261146494},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.06542056074766354},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.025210084033613446},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.04054054054054054},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.03932584269662921},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.04878048780487805},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.015544041450777202},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.0472972972972973},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.04375},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.027522935779816515},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.04929577464788732},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.043209876543209874},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0273972602739726},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.05714285714285714},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.03763440860215054},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.041666666666666664},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.029045643153526972},"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}},".":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725},"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}},"/":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.016260162601626018},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.027522935779816515},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.014084507042253521},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0273972602739726},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}},"*":{"docs":{},"s":{"docs":{},"o":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},",":{"docs":{},"*":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}},"a":{"docs":{},",":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}},"b":{"docs":{},")":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}}}}}},"d":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"[":{"2":{"6":{"docs":{},"]":{"docs":{},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}},"docs":{}},"docs":{}}}}}}},"p":{"1":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},"2":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}},"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}},"r":{"docs":{},"e":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},",":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.020618556701030927},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.018018018018018018},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}},"]":{"docs":{},"的":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"一":{"docs":{},"定":{"docs":{},"要":{"docs":{},"分":{"docs":{},"析":{"docs":{},"全":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"。":{"docs":{},"这":{"docs":{},"一":{"docs":{},"题":{"docs":{},"中":{"docs":{},"就":{"docs":{},"*":{"docs":{},"号":{"docs":{},"很":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"，":{"docs":{},"他":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"零":{"docs":{},"个":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"多":{"docs":{},"个":{"docs":{},"。":{"docs":{},"分":{"docs":{},"析":{"docs":{},"到":{"docs":{},"*":{"docs":{},"号":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"有":{"docs":{},"点":{"docs":{},"多":{"docs":{},"。":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"=":{"0":{"docs":{},";":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.00909090909090909}},"j":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}},",":{"docs":{},"i":{"docs":{},"=":{"0":{"docs":{},";":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}},"docs":{}}}}},"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909},"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}},"i":{"docs":{},"*":{"docs":{},"i":{"docs":{},";":{"docs":{},"j":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}}}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"'":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":2.5526315789473686},"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":3.3787878787878785}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105}}}}}}}}}},"s":{"docs":{},".":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105}}}}}},"d":{"docs":{},"g":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}}}}}}}}},")":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}},"{":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}},",":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"y":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}},";":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}},"分":{"docs":{},"析":{"docs":{},"一":{"docs":{},"次":{"docs":{},"e":{"docs":{},"x":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"4":{"docs":{},"的":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"构":{"docs":{},"造":{"docs":{},"的":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"价":{"docs":{},"格":{"docs":{},"走":{"docs":{},"向":{"docs":{},"只":{"docs":{},"有":{"docs":{},"上":{"docs":{},"面":{"docs":{},"两":{"docs":{},"种":{"docs":{},"，":{"docs":{},"要":{"docs":{},"不":{"docs":{},"是":{"docs":{},"一":{"docs":{},"直":{"docs":{},"递":{"docs":{},"增":{"docs":{},"，":{"docs":{},"要":{"docs":{},"不":{"docs":{},"就":{"docs":{},"是":{"docs":{},"下":{"docs":{},"降":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"归":{"docs":{},"纳":{"docs":{},"成":{"docs":{},"一":{"docs":{},"般":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"写":{"docs":{},"出":{"docs":{},"代":{"docs":{},"码":{"docs":{},".":{"docs":{},"注":{"docs":{},"意":{"docs":{},"写":{"docs":{},"成":{"docs":{},"一":{"docs":{},"般":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"时":{"docs":{},"，":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"最":{"docs":{},"后":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"，":{"docs":{},"就":{"docs":{},"能":{"docs":{},"处":{"docs":{},"理":{"docs":{},"所":{"docs":{},"有":{"docs":{},"情":{"docs":{},"况":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"能":{"docs":{},"讲":{"docs":{},"述":{"docs":{},"的":{"docs":{},"还":{"docs":{},"是":{"docs":{},"不":{"docs":{},"清":{"docs":{},"晰":{"docs":{},"，":{"docs":{},"建":{"docs":{},"议":{"docs":{},"先":{"docs":{},"做":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"法":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"等":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"再":{"docs":{},"来":{"docs":{},"做":{"docs":{},"这":{"docs":{},"题":{"docs":{},"会":{"docs":{},"清":{"docs":{},"晰":{"docs":{},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"以":{"docs":{},"看":{"docs":{},"到":{"docs":{},"其":{"docs":{},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"将":{"docs":{},"链":{"docs":{},"表":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"截":{"docs":{},"断":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"到":{"docs":{},"前":{"docs":{},"面":{"docs":{},"。":{"docs":{},"知":{"docs":{},"道":{"docs":{},"这":{"docs":{},"个":{"docs":{},"意":{"docs":{},"思":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"就":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"如":{"docs":{},"果":{"docs":{},"k":{"docs":{},"大":{"docs":{},"于":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"了":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"k":{"docs":{},"等":{"docs":{},"于":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{},"长":{"docs":{},"度":{"docs":{},"不":{"docs":{},"变":{"docs":{},"，":{"docs":{},"这":{"docs":{},"就":{"docs":{},"很":{"docs":{},"明":{"docs":{},"显":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"令":{"docs":{},"k":{"docs":{},"=":{"docs":{},"k":{"docs":{},"%":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"截":{"docs":{},"断":{"docs":{},"链":{"docs":{},"表":{"docs":{},"即":{"docs":{},"可":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"借":{"docs":{},"助":{"docs":{},"之":{"docs":{},"前":{"docs":{},"只":{"docs":{},"能":{"docs":{},"买":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"能":{"docs":{},"买":{"docs":{},"很":{"docs":{},"多":{"docs":{},"次":{"docs":{},"。":{"docs":{},"只":{"docs":{},"要":{"docs":{},"有":{"docs":{},"利":{"docs":{},"润":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"都":{"docs":{},"加":{"docs":{},"上":{"docs":{},"。":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"化":{"docs":{},"关":{"docs":{},"系":{"docs":{},"列":{"docs":{},"出":{"docs":{},"来":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"状":{"docs":{},"态":{"docs":{},"基":{"docs":{},"本":{"docs":{},"等":{"docs":{},"于":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"^":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{},"除":{"docs":{},"了":{"docs":{},"当":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"为":{"1":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},",":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"直":{"docs":{},"接":{"docs":{},"为":{"0":{"docs":{},",":{"docs":{},"得":{"docs":{},"出":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"的":{"docs":{},"转":{"docs":{},"换":{"docs":{},"关":{"docs":{},"系":{"docs":{},"为":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"=":{"docs":{},"(":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"\\":{"docs":{},"^":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},"&":{"docs":{},"~":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"每":{"docs":{},"一":{"docs":{},"位":{"docs":{},"表":{"docs":{},"示":{"0":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"所":{"docs":{},"有":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"是":{"docs":{},"质":{"docs":{},"数":{"docs":{},"。":{"docs":{},"直":{"docs":{},"接":{"docs":{},"从":{"3":{"docs":{},"开":{"docs":{},"始":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"排":{"docs":{},"除":{"docs":{},"所":{"docs":{},"有":{"3":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"要":{"docs":{},"从":{"3":{"3":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"9":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"3":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"3":{"2":{"docs":{},"=":{"6":{"docs":{},"开":{"docs":{},"始":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"6":{"docs":{},"已":{"docs":{},"经":{"docs":{},"在":{"docs":{},"从":{"2":{"docs":{},"开":{"docs":{},"始":{"docs":{},"计":{"docs":{},"算":{"docs":{},"中":{"docs":{},"计":{"docs":{},"算":{"docs":{},"过":{"docs":{},"了":{"docs":{},"。":{"docs":{},"再":{"docs":{},"比":{"docs":{},"如":{"docs":{},"计":{"docs":{},"算":{"5":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"计":{"docs":{},"算":{"5":{"3":{"docs":{},"=":{"1":{"5":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"之":{"docs":{},"前":{"docs":{},"计":{"docs":{},"算":{"3":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"计":{"docs":{},"算":{"docs":{},"过":{"3":{"5":{"docs":{},"=":{"1":{"5":{"docs":{},"了":{"docs":{},"。":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}},"docs":{}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}}}}}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}},"docs":{}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"定":{"docs":{},"义":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"s":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"m":{"docs":{},"，":{"docs":{},"p":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"n":{"docs":{},"。":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"m":{"docs":{},"*":{"docs":{},"n":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"。":{"docs":{},"算":{"docs":{},"法":{"docs":{},"需":{"docs":{},"要":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"这":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"n":{"docs":{},")":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"保":{"docs":{},"存":{"docs":{},"从":{"docs":{},"最":{"docs":{},"左":{"docs":{},"边":{"docs":{},"和":{"docs":{},"最":{"docs":{},"右":{"docs":{},"边":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"连":{"docs":{},"续":{"docs":{},"数":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"。":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"都":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"再":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"就":{"docs":{},"能":{"docs":{},"在":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"算":{"docs":{},"出":{"docs":{},"每":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"应":{"docs":{},"该":{"docs":{},"填":{"docs":{},"的":{"docs":{},"值":{"docs":{},"了":{"docs":{},"。":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"正":{"docs":{},"则":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"是":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"一":{"docs":{},"些":{"docs":{},"专":{"docs":{},"门":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"k":{"docs":{},"m":{"docs":{},"p":{"docs":{},"这":{"docs":{},"种":{"docs":{},"。":{"docs":{},"还":{"docs":{},"有":{"docs":{},"就":{"docs":{},"是":{"docs":{},"很":{"docs":{},"多":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"想":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"重":{"docs":{},"合":{"docs":{},"之":{"docs":{},"类":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"字":{"docs":{},"典":{"docs":{},"树":{"docs":{},"。":{"docs":{},"正":{"docs":{},"则":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"是":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"横":{"docs":{},"纵":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"i":{"docs":{},"j":{"docs":{},"表":{"docs":{},"示":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{"10.-regular-expression-matchinghard.html":{"ref":"10.-regular-expression-matchinghard.html","tf":0.004901960784313725}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"11.-container-with-most-water.html":{"ref":"11.-container-with-most-water.html","tf":0.01282051282051282},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875},"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875},"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}}},"以":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"为":{"docs":{},"基":{"docs":{},"准":{"docs":{},"，":{"docs":{},"从":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"对":{"docs":{},"比":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{},"出":{"docs":{},"现":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"，":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"就":{"docs":{},"加":{"docs":{},"入":{"docs":{},"到":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"后":{"docs":{},"面":{"docs":{},"。":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}},"其":{"docs":{},"实":{"docs":{},"整":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"是":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"=":{"docs":{},"=":{"1":{"docs":{},"的":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"判":{"docs":{},"断":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"就":{"docs":{},"会":{"docs":{},"在":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"一":{"docs":{},"直":{"docs":{},"判":{"docs":{},"断":{"docs":{},"并":{"docs":{},"且":{"docs":{},"调":{"docs":{},"用":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"到":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"中":{"docs":{},"，":{"docs":{},"会":{"docs":{},"及":{"docs":{},"其":{"docs":{},"耗":{"docs":{},"时":{"docs":{},"间":{"docs":{},"。":{"docs":{},"加":{"docs":{},"上":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"判":{"docs":{},"断":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"整":{"docs":{},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"运":{"docs":{},"行":{"docs":{},"时":{"docs":{},"会":{"docs":{},"快":{"docs":{},"很":{"docs":{},"多":{"docs":{},"的":{"docs":{},"。":{"docs":{"14.-longest-common-prefix.html":{"ref":"14.-longest-common-prefix.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"考":{"docs":{},"的":{"docs":{},"变":{"docs":{},"种":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"之":{"docs":{},"后":{"docs":{},"数":{"docs":{},"组":{"docs":{},"一":{"docs":{},"半":{"docs":{},"还":{"docs":{},"是":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"的":{"docs":{},"。":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"只":{"docs":{},"要":{"docs":{},"确":{"docs":{},"定":{"docs":{},"一":{"docs":{},"半":{"docs":{},"是":{"docs":{},"否":{"docs":{},"满":{"docs":{},"足":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"道":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"放":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"进":{"docs":{},"如":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"运":{"docs":{},"行":{"docs":{},"完":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"放":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"是":{"3":{"docs":{},"个":{"docs":{},"。":{"docs":{},"中":{"docs":{},"间":{"docs":{},"判":{"docs":{},"断":{"docs":{},"非":{"docs":{},"法":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"长":{"docs":{},"度":{"docs":{},"大":{"docs":{},"于":{"1":{"docs":{},"并":{"docs":{},"且":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"是":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},",":{"docs":{},"显":{"docs":{},"然":{"docs":{},"不":{"docs":{},"行":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"数":{"docs":{},"字":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"数":{"docs":{},"值":{"docs":{},"大":{"docs":{},"于":{"2":{"5":{"5":{"docs":{},"，":{"docs":{},"显":{"docs":{},"然":{"docs":{},"也":{"docs":{},"是":{"docs":{},"不":{"docs":{},"行":{"docs":{},"的":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"所":{"docs":{},"有":{"docs":{},"情":{"docs":{},"况":{"docs":{},"都":{"docs":{},"满":{"docs":{},"足":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"将":{"docs":{},"结":{"docs":{},"果":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"到":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"中":{"docs":{},"。":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"问":{"docs":{},"题":{"docs":{},"得":{"docs":{},"到":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"值":{"docs":{},"有":{"docs":{},"的":{"docs":{},"像":{"docs":{},"，":{"docs":{},"此":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"值":{"docs":{},"等":{"docs":{},"于":{"docs":{},"上":{"docs":{},"两":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"值":{"docs":{},"相":{"docs":{},"加":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"优":{"docs":{},"化":{"docs":{},"到":{"docs":{},"只":{"docs":{},"用":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"重":{"docs":{},"复":{"docs":{},"使":{"docs":{},"用":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"题":{"docs":{},"本":{"docs":{},"质":{"docs":{},"上":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"将":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"排":{"docs":{},"个":{"docs":{},"序":{"docs":{},"。":{"docs":{},"原":{"docs":{},"始":{"docs":{},"的":{"docs":{},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"是":{"docs":{},"将":{"docs":{},"数":{"docs":{},"字":{"docs":{},"按":{"docs":{},"照":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"这":{"docs":{},"里":{"docs":{},"显":{"docs":{},"然":{"docs":{},"需":{"docs":{},"要":{"docs":{},"自":{"docs":{},"己":{"docs":{},"定":{"docs":{},"义":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{},"这":{"docs":{},"个":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"也":{"docs":{},"很":{"docs":{},"好":{"docs":{},"定":{"docs":{},"义":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"a":{"docs":{},"+":{"docs":{},"b":{"docs":{},">":{"docs":{},"b":{"docs":{},"+":{"docs":{},"a":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"仔":{"docs":{},"细":{"docs":{},"理":{"docs":{},"解":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"比":{"docs":{},"较":{"docs":{},"函":{"docs":{},"数":{"docs":{},"这":{"docs":{},"么":{"docs":{},"写":{"docs":{},"的":{"docs":{},"意":{"docs":{},"义":{"docs":{},"。":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"上":{"docs":{},"面":{"docs":{},"这":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"可":{"docs":{},"行":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"优":{"docs":{},"化":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"共":{"docs":{},"只":{"docs":{},"有":{"docs":{},"n":{"docs":{},"个":{"docs":{},"价":{"docs":{},"格":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"最":{"docs":{},"多":{"docs":{},"就":{"docs":{},"进":{"docs":{},"行":{"docs":{},"n":{"docs":{},"/":{"2":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"。":{"docs":{},"换":{"docs":{},"句":{"docs":{},"话":{"docs":{},"说":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"k":{"docs":{},">":{"docs":{},"n":{"docs":{},"/":{"2":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"认":{"docs":{},"为":{"docs":{},"可":{"docs":{},"以":{"docs":{},"进":{"docs":{},"行":{"docs":{},"任":{"docs":{},"意":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"。":{"docs":{},"将":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"这":{"docs":{},"么":{"docs":{},"处":{"docs":{},"理":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"k":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"也":{"docs":{},"会":{"docs":{},"达":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"短":{"docs":{},"处":{"docs":{},"理":{"docs":{},"对":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"影":{"docs":{},"响":{"docs":{},"挺":{"docs":{},"大":{"docs":{},"的":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"：":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},")":{"docs":{},"代":{"docs":{},"表":{"docs":{},"增":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},"代":{"docs":{},"表":{"docs":{},"减":{"docs":{},"少":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},")":{"docs":{},"代":{"docs":{},"表":{"docs":{},"替":{"docs":{},"换":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"使":{"docs":{},"用":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"解":{"docs":{},"决":{"docs":{},"此":{"docs":{},"题":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"题":{"docs":{},"可":{"docs":{},"以":{"docs":{},"优":{"docs":{},"化":{"docs":{},"到":{"docs":{},"只":{"docs":{},"用":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"给":{"docs":{},"出":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"解":{"docs":{},"答":{"docs":{},"。":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01},"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.012738853503184714},"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872},"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.0297029702970297},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.02631578947368421},"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894},"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872},"73.-set-matrix-zeroes.html":{"ref":"73.-set-matrix-zeroes.html","tf":0.056338028169014086},"74.-search-a-2d-matrix.html":{"ref":"74.-search-a-2d-matrix.html","tf":0.01818181818181818},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285},"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334},"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282},"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516},"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.011494252873563218},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774},"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}},",":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.017241379310344827},"54.-spiral-matrix.html":{"ref":"54.-spiral-matrix.html","tf":0.019801980198019802},"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.02631578947368421}}},"=":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}},"=":{"docs":{},"'":{"docs":{},"q":{"docs":{},"'":{"docs":{},")":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}},"[":{"docs":{},"j":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"[":{"docs":{},"j":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}},"docs":{}}}}}},";":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}},"排":{"docs":{},"序":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"中":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"外":{"docs":{},"层":{"docs":{},"循":{"docs":{},"环":{"docs":{},"执":{"docs":{},"行":{"docs":{},"n":{"docs":{},"次":{"docs":{},"，":{"docs":{},"内":{"docs":{},"层":{"docs":{},"循":{"docs":{},"环":{"docs":{},"执":{"docs":{},"行":{"docs":{},"(":{"docs":{},"n":{"docs":{"15.-3sum.html":{"ref":"15.-3sum.html","tf":0.01}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"任":{"docs":{},"何":{"docs":{},"需":{"docs":{},"要":{"docs":{},"剪":{"docs":{},"枝":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"并":{"docs":{},"保":{"docs":{},"存":{"docs":{},"。":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"达":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"方":{"docs":{},"案":{"docs":{},"，":{"docs":{},"是":{"docs":{},"其":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"和":{"docs":{},"左":{"docs":{},"边":{"docs":{},"点":{"docs":{},"的":{"docs":{},"方":{"docs":{},"案":{"docs":{},"之":{"docs":{},"和":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"我":{"docs":{},"到":{"docs":{},"这":{"docs":{},"个":{"docs":{},"点":{"docs":{},"可":{"docs":{},"以":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"走":{"docs":{},"过":{"docs":{},"来":{"docs":{},"，":{"docs":{},"一":{"docs":{},"种":{"docs":{},"是":{"docs":{},"从":{"docs":{},"上":{"docs":{},"面":{"docs":{},"往":{"docs":{},"下":{"docs":{},"走":{"docs":{},"，":{"docs":{},"一":{"docs":{},"种":{"docs":{},"是":{"docs":{},"从":{"docs":{},"左":{"docs":{},"边":{"docs":{},"往":{"docs":{},"右":{"docs":{},"走":{"docs":{},"。":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"字":{"docs":{},"如":{"docs":{},"果":{"docs":{},"可":{"docs":{},"以":{"docs":{},"和":{"docs":{},"前":{"docs":{},"面":{"docs":{},"数":{"docs":{},"字":{"docs":{},"组":{"docs":{},"合":{"docs":{},"成":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"从":{"docs":{},"底":{"docs":{},"部":{"docs":{},"出":{"docs":{},"发":{"docs":{},"向":{"docs":{},"上":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"选":{"docs":{},"择":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"中":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"那":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"将":{"docs":{},"它":{"docs":{},"加":{"docs":{},"到":{"docs":{},"自":{"docs":{},"己":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"上":{"docs":{},"。":{"docs":{},"重":{"docs":{},"复":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"知":{"docs":{},"道":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"这":{"docs":{},"么":{"docs":{},"入":{"docs":{},"手":{"docs":{},"去":{"docs":{},"思":{"docs":{},"考":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"现":{"docs":{},"在":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"为":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"，":{"docs":{},"新":{"docs":{},"来":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"正":{"docs":{},"数":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"新":{"docs":{},"的":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"变":{"docs":{},"为":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"*":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"来":{"docs":{},"的":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"负":{"docs":{},"数":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"好":{"docs":{},"解":{"docs":{},"决":{"docs":{},"了":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"不":{"docs":{},"仅":{"docs":{},"要":{"docs":{},"保":{"docs":{},"存":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"（":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"结":{"docs":{},"果":{"docs":{},"）":{"docs":{},"，":{"docs":{},"还":{"docs":{},"要":{"docs":{},"保":{"docs":{},"存":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"负":{"docs":{},"数":{"docs":{},"乘":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"负":{"docs":{},"数":{"docs":{},"也":{"docs":{},"是":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"的":{"docs":{},"。":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"计":{"docs":{},"数":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"计":{"docs":{},"数":{"docs":{},"排":{"docs":{},"序":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"问":{"docs":{},"题":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745}}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"代":{"docs":{},"表":{"3":{"docs":{"17.-letter-combinations-of-a-phone-number.html":{"ref":"17.-letter-combinations-of-a-phone-number.html","tf":0.010101010101010102}}},"docs":{}}}}},"函":{"docs":{},"数":{"docs":{},"正":{"docs":{},"常":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"都":{"docs":{},"能":{"docs":{},"分":{"docs":{},"出":{"4":{"docs":{},"个":{"docs":{},"分":{"docs":{},"支":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"分":{"docs":{},"支":{"docs":{},"中":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"线":{"docs":{},"性":{"docs":{},"的":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"不":{"docs":{},"好":{"docs":{},"定":{"docs":{},"义":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"整":{"docs":{},"个":{"docs":{},"运":{"docs":{},"行":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"挺":{"docs":{},"高":{"docs":{},"的":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"次":{"docs":{},"将":{"docs":{},"次":{"docs":{},"数":{"docs":{},"降":{"docs":{},"低":{"docs":{},"一":{"docs":{},"半":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}},"在":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"一":{"docs":{},"般":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"。":{"docs":{},"那":{"docs":{},"总":{"docs":{},"时":{"docs":{},"间":{"docs":{},"可":{"docs":{},"以":{"docs":{},"表":{"docs":{},"达":{"docs":{},"为":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"=":{"2":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"/":{"2":{"docs":{},")":{"docs":{},"+":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"用":{"docs":{},"主":{"docs":{},"定":{"docs":{},"理":{"docs":{},"分":{"docs":{},"析":{"docs":{},"可":{"docs":{},"知":{"docs":{},"为":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"=":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"进":{"docs":{},"行":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"+":{"1":{"docs":{},".":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}},"docs":{}}}}}}}}}}}}}}}}},":":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"21.-merge-two-sorted-lists.html":{"ref":"21.-merge-two-sorted-lists.html","tf":0.009433962264150943},"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":0.007874015748031496},"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112},"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.018018018018018018},"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.016666666666666666},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494},"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428},"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.00819672131147541},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609},"143.-Reorder-List.html":{"ref":"143.-Reorder-List.html","tf":0.0078125},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907},"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.022641509433962263},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.00625},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952},"659.-split-array-into-consecutive-subsequences.html":{"ref":"659.-split-array-into-consecutive-subsequences.html","tf":0.020618556701030927},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.004149377593360996}}},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}},"，":{"docs":{},"用":{"docs":{},"了":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"和":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"保":{"docs":{},"存":{"docs":{},"映":{"docs":{},"射":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"205.-Isomorphic-Strings.html":{"ref":"205.-Isomorphic-Strings.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"也":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"234.-Palindrome-Linked-List.html":{"ref":"234.-Palindrome-Linked-List.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105},"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}},"。":{"docs":{},"没":{"docs":{},"有":{"docs":{},"用":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"存":{"docs":{},"储":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{},"符":{"docs":{},"合":{"docs":{},"要":{"docs":{},"求":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"步":{"docs":{},"能":{"docs":{},"走":{"docs":{},"到":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"就":{"docs":{},"是":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"，":{"docs":{},"每":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"地":{"docs":{},"方":{"docs":{},"，":{"docs":{},"确":{"docs":{},"定":{"docs":{},"当":{"docs":{},"前":{"docs":{},"位":{"docs":{},"置":{"docs":{},"能":{"docs":{},"走":{"docs":{},"到":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"在":{"docs":{},"一":{"docs":{},"步":{"docs":{},"走":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"确":{"docs":{},"定":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"大":{"docs":{},"能":{"docs":{},"走":{"docs":{},"到":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"。":{"docs":{"45.-jump-game-ii.html":{"ref":"45.-jump-game-ii.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"ref":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","tf":0.005813953488372093}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"递":{"docs":{},"增":{"docs":{},"，":{"docs":{},"就":{"docs":{},"将":{"docs":{},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"字":{"docs":{},"压":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"小":{"docs":{},"于":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"值":{"docs":{},"，":{"docs":{},"就":{"docs":{},"将":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"值":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"，":{"docs":{},"并":{"docs":{},"计":{"docs":{},"算":{"docs":{},"以":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"值":{"docs":{},"为":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"面":{"docs":{},"积":{"docs":{},"大":{"docs":{},"小":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"关":{"docs":{},"键":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"去":{"docs":{},"计":{"docs":{},"算":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"宽":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"我":{"docs":{},"们":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"的":{"docs":{},"值":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"代":{"docs":{},"表":{"docs":{},"的":{"docs":{},"是":{"docs":{},"当":{"docs":{},"前":{"docs":{},"访":{"docs":{},"问":{"docs":{},"过":{"docs":{},"的":{"docs":{},"，":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"比":{"docs":{},"他":{"docs":{},"更":{"docs":{},"大":{"docs":{},"的":{"docs":{},"值":{"docs":{},"在":{"docs":{},"之":{"docs":{},"前":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"被":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"计":{"docs":{},"算":{"docs":{},"了":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"当":{"docs":{},"前":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"减":{"docs":{},"去":{"docs":{},"当":{"docs":{},"前":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"代":{"docs":{},"表":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"，":{"docs":{},"就":{"docs":{},"能":{"docs":{},"表":{"docs":{},"示":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"宽":{"docs":{},"了":{"docs":{},"。":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}}}}}}}}}}}},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.005681818181818182}}}}}}}}}}}}}}}},"处":{"docs":{},"理":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"91.-decode-ways.html":{"ref":"91.-decode-ways.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"得":{"docs":{},"到":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}}}}}}}}}}}}}}}}}}},"循":{"docs":{},"环":{"docs":{},"使":{"docs":{},"用":{"docs":{},"以":{"docs":{},"为":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"最":{"docs":{},"后":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"时":{"docs":{},"间":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"53.-maximum-subarray.html":{"ref":"53.-maximum-subarray.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"152.-Maximum-Product-Subarray.html":{"ref":"152.-Maximum-Product-Subarray.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"线":{"docs":{},"性":{"docs":{},"处":{"docs":{},"理":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"逼":{"docs":{},"近":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"开":{"docs":{},"始":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"直":{"docs":{},"接":{"docs":{},"类":{"docs":{},"比":{"docs":{},"成":{"docs":{},"了":{"docs":{},"括":{"docs":{},"号":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"就":{"docs":{},"动":{"docs":{},"手":{"docs":{},"做":{"docs":{},"了":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"括":{"docs":{},"号":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"比":{"docs":{},"这":{"docs":{},"个":{"docs":{},"多":{"docs":{},"了":{"docs":{},"一":{"docs":{},"点":{"docs":{},"位":{"docs":{},"置":{"docs":{},"上":{"docs":{},"的":{"docs":{},"限":{"docs":{},"制":{"docs":{},"，":{"docs":{},"而":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"要":{"docs":{},"统":{"docs":{},"计":{"docs":{},"数":{"docs":{},"字":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"直":{"docs":{},"接":{"docs":{},"定":{"docs":{},"义":{"4":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"会":{"docs":{},"更":{"docs":{},"快":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"4":{"docs":{},"个":{"docs":{},"寄":{"docs":{},"存":{"docs":{},"器":{"docs":{},"存":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"比":{"docs":{},"较":{"docs":{},"。":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"小":{"docs":{},"朋":{"docs":{},"友":{"docs":{},"等":{"docs":{},"级":{"docs":{},"比":{"docs":{},"旁":{"docs":{},"边":{"docs":{},"的":{"docs":{},"高":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"他":{"docs":{},"的":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"必":{"docs":{},"须":{"docs":{},"必":{"docs":{},"旁":{"docs":{},"边":{"docs":{},"的":{"docs":{},"多":{"docs":{},"。":{"docs":{},"旁":{"docs":{},"边":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"我":{"docs":{},"们":{"docs":{},"让":{"docs":{},"所":{"docs":{},"有":{"docs":{},"小":{"docs":{},"孩":{"docs":{},"向":{"docs":{},"左":{"docs":{},"看":{"docs":{},"时":{"docs":{},"，":{"docs":{},"满":{"docs":{},"足":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"让":{"docs":{},"所":{"docs":{},"有":{"docs":{},"小":{"docs":{},"孩":{"docs":{},"往":{"docs":{},"右":{"docs":{},"看":{"docs":{},"时":{"docs":{},"满":{"docs":{},"足":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"就":{"docs":{},"能":{"docs":{},"有":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"很":{"docs":{},"有":{"docs":{},"名":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"了":{"docs":{},"，":{"docs":{},"这":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"二":{"docs":{},"维":{"docs":{},"形":{"docs":{},"式":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"要":{"docs":{},"求":{"docs":{},"每":{"docs":{},"行":{"docs":{},"每":{"docs":{},"列":{"docs":{},"的":{"docs":{},"右":{"docs":{},"边":{"docs":{},"和":{"docs":{},"下":{"docs":{},"边":{"docs":{},"都":{"docs":{},"比":{"docs":{},"他":{"docs":{},"大":{"docs":{},"，":{"docs":{},"上":{"docs":{},"面":{"docs":{},"和":{"docs":{},"左":{"docs":{},"边":{"docs":{},"都":{"docs":{},"比":{"docs":{},"他":{"docs":{},"小":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"如":{"docs":{},"果":{"docs":{},"我":{"docs":{},"们":{"docs":{},"从":{"docs":{},"左":{"docs":{},"下":{"docs":{},"角":{"docs":{},"出":{"docs":{},"发":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"都":{"docs":{},"是":{"docs":{},"往":{"docs":{},"上":{"docs":{},"或":{"docs":{},"者":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"要":{"docs":{},"不":{"docs":{},"就":{"docs":{},"是":{"docs":{},"往":{"docs":{},"比":{"docs":{},"他":{"docs":{},"大":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"移":{"docs":{},"动":{"docs":{},"要":{"docs":{},"不":{"docs":{},"就":{"docs":{},"是":{"docs":{},"小":{"docs":{},"的":{"docs":{},"。":{"docs":{"240.-Search-a-2D-Matrix-II.html":{"ref":"240.-Search-a-2D-Matrix-II.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"般":{"docs":{},"的":{"docs":{},"做":{"docs":{},"法":{"docs":{},"是":{"docs":{},"，":{"docs":{},"一":{"docs":{},"直":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"栈":{"docs":{},"复":{"docs":{},"原":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"直":{"docs":{},"接":{"docs":{},"保":{"docs":{},"存":{"docs":{},"在":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"但":{"docs":{},"是":{"docs":{},"链":{"docs":{},"表":{"docs":{},"找":{"docs":{},"第":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"几":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"有":{"docs":{},"个":{"docs":{},"小":{"docs":{},"技":{"docs":{},"巧":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"前":{"docs":{},"后":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"首":{"docs":{},"先":{"docs":{},"让":{"docs":{},"前":{"docs":{},"指":{"docs":{},"针":{"docs":{},"先":{"docs":{},"走":{"docs":{},"n":{"docs":{},"步":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"后":{"docs":{},"指":{"docs":{},"针":{"docs":{},"和":{"docs":{},"前":{"docs":{},"指":{"docs":{},"针":{"docs":{},"一":{"docs":{},"起":{"docs":{},"行":{"docs":{},"动":{"docs":{},"。":{"docs":{},"当":{"docs":{},"前":{"docs":{},"指":{"docs":{},"针":{"docs":{},"到":{"docs":{},"终":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"后":{"docs":{},"指":{"docs":{},"针":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"正":{"docs":{},"好":{"docs":{},"在":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"边":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"就":{"docs":{},"能":{"docs":{},"删":{"docs":{},"除":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"第":{"docs":{},"二":{"docs":{},"中":{"docs":{},"算":{"docs":{},"法":{"docs":{},"在":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"每":{"docs":{},"次":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"明":{"docs":{},"显":{"docs":{},"比":{"docs":{},"第":{"docs":{},"一":{"docs":{},"种":{"docs":{},"少":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"简":{"docs":{},"洁":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"第":{"docs":{},"二":{"docs":{},"种":{"docs":{},"算":{"docs":{},"法":{"docs":{},"更":{"docs":{},"好":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"删":{"docs":{},"除":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"链":{"docs":{},"表":{"docs":{},"不":{"docs":{},"像":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"直":{"docs":{},"接":{"docs":{},"按":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"访":{"docs":{},"问":{"docs":{},"。":{"docs":{},"所":{"docs":{},"有":{"docs":{},"人":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"做":{"docs":{},"这":{"docs":{},"种":{"docs":{},"题":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"想":{"docs":{},"先":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"得":{"docs":{},"出":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"在":{"docs":{},"删":{"docs":{},"除":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"第":{"docs":{},"n":{"docs":{},"个":{"docs":{},"。":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"同":{"docs":{},"样":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"多":{"docs":{},"用":{"docs":{},"于":{"docs":{},"求":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"点":{"docs":{},"的":{"docs":{},"。":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"都":{"docs":{},"是":{"docs":{},"从":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"点":{"docs":{},"出":{"docs":{},"发":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"每":{"docs":{},"次":{"docs":{},"走":{"docs":{},"两":{"docs":{},"步":{"docs":{},"一":{"docs":{},"个":{"docs":{},"每":{"docs":{},"次":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},"，":{"docs":{},"当":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"到":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"正":{"docs":{},"好":{"docs":{},"在":{"docs":{},"中":{"docs":{},"点":{"docs":{},"。":{"docs":{"19.-remove-nth-node-from-end-of-list.html":{"ref":"19.-remove-nth-node-from-end-of-list.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"理":{"docs":{},"得":{"docs":{},"到":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"的":{"docs":{},"转":{"docs":{},"化":{"docs":{},"也":{"docs":{},"基":{"docs":{},"本":{"docs":{},"都":{"docs":{},"是":{"docs":{},"异":{"docs":{},"或":{"docs":{},"，":{"docs":{},"除":{"docs":{},"了":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"0":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"括":{"docs":{},"号":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"问":{"docs":{},"题":{"docs":{},"在":{"docs":{},"上":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"课":{"docs":{},"上":{"docs":{},"也":{"docs":{},"是":{"docs":{},"会":{"docs":{},"讲":{"docs":{},"的":{"docs":{},"。":{"docs":{},"没":{"docs":{},"学":{"docs":{},"过":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"之":{"docs":{},"前":{"docs":{},"可":{"docs":{},"能":{"docs":{},"很":{"docs":{},"难":{"docs":{},"相":{"docs":{},"出":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"做":{"docs":{},"这":{"docs":{},"题":{"docs":{},"，":{"docs":{},"学":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"就":{"docs":{},"很":{"docs":{},"显":{"docs":{},"然":{"docs":{},"了":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"用":{"docs":{},"处":{"docs":{},"很":{"docs":{},"大":{"docs":{},"，":{"docs":{},"在":{"docs":{},"之":{"docs":{},"后":{"docs":{},"很":{"docs":{},"多":{"docs":{},"地":{"docs":{},"方":{"docs":{},"也":{"docs":{},"会":{"docs":{},"用":{"docs":{},"到":{"docs":{},"。":{"docs":{},"线":{"docs":{},"性":{"docs":{},"处":{"docs":{},"理":{"docs":{},"一":{"docs":{},"组":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"需":{"docs":{},"要":{"docs":{},"满":{"docs":{},"足":{"docs":{},"某":{"docs":{},"些":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"一":{"docs":{},"下":{"docs":{},"能":{"docs":{},"否":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"这":{"docs":{},"题":{"docs":{},"就":{"docs":{},"是":{"docs":{},"线":{"docs":{},"性":{"docs":{},"处":{"docs":{},"理":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"需":{"docs":{},"要":{"docs":{},"满":{"docs":{},"足":{"docs":{},"一":{"docs":{},"些":{"docs":{},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"括":{"docs":{},"会":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"要":{"docs":{},"和":{"docs":{},"最":{"docs":{},"近":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"括":{"docs":{},"首":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"保":{"docs":{},"存":{"docs":{},"最":{"docs":{},"近":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"括":{"docs":{},"首":{"docs":{},"即":{"docs":{},"可":{"docs":{"20.-valid-parentheses.html":{"ref":"20.-valid-parentheses.html","tf":0.008928571428571428}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"其":{"docs":{},"实":{"docs":{},"也":{"docs":{},"存":{"docs":{},"在":{"docs":{},"括":{"docs":{},"号":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"首":{"docs":{},"先":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"这":{"docs":{},"题":{"docs":{},"比":{"docs":{},"括":{"docs":{},"号":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"需":{"docs":{},"要":{"docs":{},"多":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"右":{"docs":{},"括":{"docs":{},"号":{"docs":{},"多":{"docs":{},"了":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"重":{"docs":{},"新":{"docs":{},"开":{"docs":{},"始":{"docs":{},"记":{"docs":{},"录":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"和":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"括":{"docs":{},"号":{"docs":{},"不":{"docs":{},"能":{"docs":{},"连":{"docs":{},"在":{"docs":{},"一":{"docs":{},"起":{"docs":{},"了":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"。":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"生":{"docs":{},"成":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{},"括":{"docs":{},"号":{"docs":{},"序":{"docs":{},"列":{"docs":{},"是":{"docs":{},"哪":{"docs":{},"样":{"docs":{},"的":{"docs":{},"。":{"docs":{},"一":{"docs":{},"个":{"docs":{},"右":{"docs":{},"括":{"docs":{},"号":{"docs":{},"前":{"docs":{},"必":{"docs":{},"须":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"左":{"docs":{},"括":{"docs":{},"号":{"docs":{},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"题":{"docs":{},"目":{"docs":{},"中":{"docs":{},"都":{"docs":{},"是":{"docs":{},"小":{"docs":{},"括":{"docs":{},"号":{"docs":{},"号":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"还":{"docs":{},"不":{"docs":{},"用":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"其":{"docs":{},"他":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"题":{"docs":{},"显":{"docs":{},"然":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"说":{"docs":{},"是":{"docs":{},"递":{"docs":{},"归":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"单":{"docs":{},"纯":{"docs":{},"的":{"docs":{},"生":{"docs":{},"成":{"docs":{},"所":{"docs":{},"有":{"docs":{},"组":{"docs":{},"合":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"有":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"生":{"docs":{},"成":{"docs":{},"。":{"docs":{},"在":{"docs":{},"生":{"docs":{},"成":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"左":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"才":{"docs":{},"能":{"docs":{},"生":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"右":{"docs":{},"括":{"docs":{},"号":{"docs":{},"。":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"函":{"docs":{},"数":{"docs":{},"中":{"docs":{},"进":{"docs":{},"行":{"docs":{},"的":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"主":{"docs":{},"要":{"docs":{},"需":{"docs":{},"要":{"docs":{},"分":{"docs":{},"析":{"docs":{},"函":{"docs":{},"数":{"docs":{},"运":{"docs":{},"行":{"docs":{},"了":{"docs":{},"多":{"docs":{},"少":{"docs":{},"次":{"docs":{},"。":{"docs":{},"分":{"docs":{},"析":{"docs":{},"了":{"docs":{},"很":{"docs":{},"久":{"docs":{},"，":{"docs":{},"得":{"docs":{},"出":{"docs":{},"时":{"docs":{},"间":{"docs":{},"变":{"docs":{},"化":{"docs":{},"满":{"docs":{},"足":{"docs":{},"很":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"不":{"docs":{},"分":{"docs":{},"析":{"docs":{},"了":{"docs":{"22.-generate-parentheses.html":{"ref":"22.-generate-parentheses.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"k":{"docs":{"23.-merge-k-sorted-lists.html":{"ref":"23.-merge-k-sorted-lists.html","tf":2.015748031496063},"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.03676470588235294},"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0273972602739726},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.04},"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.02631578947368421},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.027777777777777776},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.018404907975460124},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.03669724770642202},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.041237113402061855},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.02702702702702703},"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.024691358024691357},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.03048780487804878}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.010362694300518135},"80.-remove-duplicates-from-sorted-array-ii.html":{"ref":"80.-remove-duplicates-from-sorted-array-ii.html","tf":0.011363636363636364}}}}}},"m":{"docs":{},"p":{"docs":{},"最":{"docs":{},"关":{"docs":{},"键":{"docs":{},"的":{"docs":{},"是":{"docs":{},"构":{"docs":{},"建":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"就":{"docs":{},"很":{"docs":{},"好":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"了":{"docs":{},"。":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"求":{"docs":{},"出":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},")":{"docs":{},"，":{"docs":{},"m":{"docs":{},">":{"docs":{},"n":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},")":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"两":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588},"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}},";":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.007352941176470588}}},"=":{"0":{"docs":{},";":{"docs":{},"k":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}},"docs":{},"i":{"docs":{},";":{"docs":{},"k":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}},"k":{"docs":{},"%":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},";":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}}}}}},"=":{"3":{"5":{"0":{"0":{"0":{"docs":{},".":{"docs":{},"这":{"docs":{},"是":{"docs":{},"我":{"docs":{},"看":{"docs":{},"比":{"docs":{},"我":{"docs":{},"速":{"docs":{},"度":{"docs":{},"快":{"docs":{},"很":{"docs":{},"多":{"docs":{},"但":{"docs":{},"是":{"docs":{},"和":{"docs":{},"我":{"docs":{},"算":{"docs":{},"法":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"人":{"docs":{},"，":{"docs":{},"在":{"docs":{},"前":{"docs":{},"面":{"docs":{},"加":{"docs":{},"的":{"docs":{},"。":{"docs":{},"我":{"docs":{},"也":{"docs":{},"加":{"docs":{},"了":{"docs":{},"个":{"docs":{},"试":{"docs":{},"试":{"docs":{},"，":{"docs":{},"确":{"docs":{},"实":{"docs":{},"快":{"docs":{},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{},"我":{"docs":{},"猜":{"docs":{},"测":{"docs":{},"他":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"知":{"docs":{},"道":{"docs":{},"一":{"docs":{},"个":{"docs":{},"测":{"docs":{},"试":{"docs":{},"样":{"docs":{},"例":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"了":{"docs":{},"。":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},")":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}},"e":{"docs":{},"y":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748}},".":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.013605442176870748}}}}},".":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464},"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}},"]":{"docs":{},")":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}},";":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}},"t":{"docs":{},"h":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":2.0185185185185186}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678}},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"题":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"24.-swap-nodes-in-pairs.html":{"ref":"24.-swap-nodes-in-pairs.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}},"上":{"docs":{},"面":{"docs":{},"代":{"docs":{},"码":{"docs":{},"是":{"9":{"docs":{},"个":{"docs":{},"月":{"docs":{},"前":{"docs":{},"写":{"docs":{},"的":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"还":{"docs":{},"不":{"docs":{},"知":{"docs":{},"道":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"情":{"docs":{},"有":{"docs":{},"可":{"docs":{},"原":{"docs":{},"，":{"docs":{},"毕":{"docs":{},"竟":{"docs":{},"是":{"docs":{},"做":{"docs":{},"到":{"docs":{},"后":{"docs":{},"面":{"docs":{},"几":{"docs":{},"题":{"docs":{},"才":{"docs":{},"慢":{"docs":{},"慢":{"docs":{},"用":{"docs":{},"起":{"docs":{},"来":{"docs":{},"的":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"循":{"docs":{},"环":{"docs":{},"里":{"docs":{},"的":{"docs":{},"处":{"docs":{},"理":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"太":{"docs":{},"不":{"docs":{},"简":{"docs":{},"洁":{"docs":{},"了":{"docs":{},"，":{"docs":{},"看":{"docs":{},"着":{"docs":{},"很":{"docs":{},"难":{"docs":{},"受":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"改":{"docs":{},"成":{"docs":{},"了":{"docs":{},"现":{"docs":{},"在":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"虽":{"docs":{},"然":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"代":{"docs":{},"码":{"docs":{},"更":{"docs":{},"加":{"docs":{},"易":{"docs":{},"读":{"docs":{},"，":{"docs":{},"看":{"docs":{},"着":{"docs":{},"舒":{"docs":{},"服":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"介":{"docs":{},"绍":{"docs":{},"的":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"有":{"4":{"docs":{},"个":{"docs":{},"地":{"docs":{},"方":{"docs":{},"需":{"docs":{},"要":{"docs":{},"我":{"docs":{},"们":{"docs":{},"放":{"docs":{},"置":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"3":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"处":{"docs":{},"理":{"1":{"docs":{"93.-restore-ip-addresses.html":{"ref":"93.-restore-ip-addresses.html","tf":0.022727272727272728}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"那":{"docs":{},"个":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"代":{"docs":{},"表":{"docs":{},"了":{"docs":{},"右":{"docs":{},"侧":{"docs":{},"边":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"代":{"docs":{},"表":{"docs":{},"了":{"docs":{},"下":{"docs":{},"侧":{"docs":{},"边":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"左":{"docs":{},"上":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"代":{"docs":{},"表":{"docs":{},"了":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"就":{"docs":{},"是":{"docs":{},"当":{"docs":{},"前":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"边":{"docs":{},"长":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"，":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"题":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"这":{"docs":{},"里":{"docs":{},"加":{"docs":{},"入":{"docs":{},"了":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"组":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"所":{"docs":{},"有":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"是":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"处":{"docs":{},"理":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"会":{"docs":{},"达":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"里":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"拓":{"docs":{},"展":{"docs":{},"版":{"docs":{},"本":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"处":{"docs":{},"理":{"docs":{},"的":{"docs":{},"也":{"docs":{},"是":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"对":{"docs":{},"于":{"docs":{},"最":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"和":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"重":{"docs":{},"复":{"docs":{},"，":{"docs":{},"就":{"docs":{},"将":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"+":{"docs":{},"+":{"docs":{},"。":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"处":{"docs":{},"理":{"docs":{},"基":{"docs":{},"本":{"docs":{},"和":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"一":{"docs":{},"样":{"docs":{},"了":{"docs":{"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"ref":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"目":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"相":{"docs":{},"等":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"看":{"docs":{},"着":{"docs":{},"自":{"docs":{},"己":{"docs":{},"之":{"docs":{},"前":{"docs":{},"写":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"实":{"docs":{},"在":{"docs":{},"太":{"docs":{},"难":{"docs":{},"受":{"docs":{},"，":{"docs":{},"想":{"docs":{},"优":{"docs":{},"化":{"docs":{},"一":{"docs":{},"下":{"docs":{},"。":{"docs":{"27.-remove-element.html":{"ref":"27.-remove-element.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"q":{"1":{"docs":{},",":{"docs":{},"q":{"2":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}},"docs":{}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}}}}}}}}}}}},"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.026881720430107527},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.023809523809523808}},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}},"e":{"docs":{},"n":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":3.391666666666666},"52.-n-queens-ii.html":{"ref":"52.-n-queens-ii.html","tf":2.7}},"s":{"docs":{},"'":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}},"u":{"docs":{},"e":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"127.-Word-Ladder.html":{"ref":"127.-Word-Ladder.html","tf":0.005813953488372093},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":2.022935779816514},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":2.0273972602739727}},")":{"docs":{},",":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}},".":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}},".":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525},"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0136986301369863}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"2":{"docs":{},")":{"docs":{},";":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}},"docs":{}}}}}}},"s":{"docs":{},".":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.009174311926605505}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.014814814814814815},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.013513513513513514}},")":{"docs":{},";":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}},"f":{"docs":{},"r":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406}}}}}}},"t":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}},";":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203},"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757},"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}},")":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}},"q":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755}},"q":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248}}},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}},";":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}},"暴":{"docs":{},"力":{"docs":{},"法":{"docs":{},"两":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"h":{"docs":{},"e":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"长":{"docs":{},"m":{"docs":{},"，":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"长":{"docs":{},"n":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"m":{"docs":{},")":{"docs":{"28.-implement-strstrkmp-suan-fa.html":{"ref":"28.-implement-strstrkmp-suan-fa.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"会":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"超":{"docs":{},"过":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{},"那":{"docs":{},"就":{"docs":{},"是":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"/":{"docs":{"29.-divide-two-integers.html":{"ref":"29.-divide-two-integers.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"里":{"docs":{},"为":{"docs":{},"啥":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"是":{"1":{"0":{"docs":{},",":{"docs":{},"因":{"docs":{},"为":{"docs":{},"最":{"docs":{},"后":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},",":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"状":{"docs":{},"态":{"docs":{},"为":{"1":{"docs":{},",":{"docs":{},"最":{"docs":{},"后":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"状":{"docs":{},"态":{"docs":{},"即":{"docs":{},"可":{"docs":{},".":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}},"是":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"查":{"docs":{},"找":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"否":{"docs":{},"被":{"docs":{},"访":{"docs":{},"问":{"docs":{},"过":{"docs":{},"是":{"docs":{},"有":{"docs":{},"必":{"docs":{},"要":{"docs":{},"的":{"docs":{},"。":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.014705882352941176}},"{":{"docs":{"61.-rotate-list.html":{"ref":"61.-rotate-list.html","tf":0.005263157894736842},"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988},"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.012987012987012988},"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}},",":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}},"→":{"docs":{"31.-next-permutation.html":{"ref":"31.-next-permutation.html","tf":0.022058823529411766}}},"不":{"docs":{},"管":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"还":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"但":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"明":{"docs":{},"显":{"docs":{},"好":{"docs":{},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{"32.-longest-valid-parentheses.html":{"ref":"32.-longest-valid-parentheses.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"仅":{"docs":{},"如":{"docs":{},"此":{"docs":{},"，":{"docs":{},"还":{"docs":{},"希":{"docs":{},"望":{"docs":{},"能":{"docs":{},"在":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"内":{"docs":{},"返":{"docs":{},"回":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"这":{"docs":{},"就":{"docs":{},"希":{"docs":{},"望":{"docs":{},"我":{"docs":{},"们":{"docs":{},"保":{"docs":{},"存":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"只":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"值":{"docs":{},"保":{"docs":{},"存":{"docs":{},"，":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"不":{"docs":{},"行":{"docs":{},"的":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"如":{"docs":{},"果":{"docs":{},"这":{"docs":{},"个":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"被":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"需":{"docs":{},"要":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"保":{"docs":{},"存":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"最":{"docs":{},"得":{"docs":{},"到":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"过":{"docs":{},"程":{"docs":{},"也":{"docs":{},"需":{"docs":{},"要":{"docs":{},"有":{"docs":{},"先":{"docs":{},"进":{"docs":{},"后":{"docs":{},"出":{"docs":{},"的":{"docs":{},"特":{"docs":{},"性":{"docs":{},"。":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"难":{"docs":{},"看":{"docs":{},"出":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"时":{"docs":{},"间":{"docs":{},"和":{"docs":{},"空":{"docs":{},"间":{"docs":{},"都":{"docs":{},"是":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"231.-Power-of-Two.html":{"ref":"231.-Power-of-Two.html","tf":0.017543859649122806}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"排":{"docs":{},"除":{"docs":{},"另":{"docs":{},"一":{"docs":{},"半":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"找":{"docs":{},"到":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"一":{"docs":{},"半":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"是":{"docs":{},"否":{"docs":{},"期":{"docs":{},"中":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"就":{"docs":{},"进":{"docs":{},"入":{"docs":{},"这":{"docs":{},"一":{"docs":{},"半":{"docs":{},"查":{"docs":{},"找":{"docs":{},"否":{"docs":{},"则":{"docs":{},"进":{"docs":{},"入":{"docs":{},"另":{"docs":{},"一":{"docs":{},"半":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"每":{"docs":{},"次":{"docs":{},"排":{"docs":{},"除":{"docs":{},"一":{"docs":{},"半":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"就":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"33.-search-in-rotated-sorted-array.html":{"ref":"33.-search-in-rotated-sorted-array.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"改":{"docs":{},"了":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"一":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"重":{"docs":{},"复":{"docs":{},"使":{"docs":{},"用":{"docs":{},"。":{"docs":{},"在":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"进":{"docs":{},"入":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"加":{"docs":{},"一":{"docs":{},"。":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"那":{"docs":{},"样":{"docs":{},"不":{"docs":{},"变":{"docs":{"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"想":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"中":{"docs":{},"说":{"docs":{},"的":{"docs":{},"那":{"docs":{},"样":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"的":{"docs":{},"详":{"docs":{},"细":{"docs":{},"分":{"docs":{},"析":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"看":{"docs":{},"主":{"docs":{},"定":{"docs":{},"理":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"没":{"docs":{},"到":{"docs":{},"常":{"docs":{},"数":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"也":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"于":{"docs":{},"u":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"同":{"docs":{},"理":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"将":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},">":{"docs":{},"=":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"改":{"docs":{},"为":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},">":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"会":{"docs":{},"在":{"docs":{},"刚":{"docs":{},"好":{"docs":{},"大":{"docs":{},"于":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"重":{"docs":{},"合":{"docs":{},"。":{"docs":{},"我":{"docs":{},"理":{"docs":{},"解":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"也":{"docs":{},"是":{"docs":{},"用":{"docs":{},"了":{"docs":{},"很":{"docs":{},"久":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"看":{"docs":{},"文":{"docs":{},"字":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"会":{"docs":{},"有":{"docs":{},"很":{"docs":{},"多":{"docs":{},"疑":{"docs":{},"惑":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"反":{"docs":{},"复":{"docs":{},"看":{"docs":{},"看":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"自":{"docs":{},"习":{"docs":{},"推":{"docs":{},"敲":{"docs":{},"。":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"：":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"应":{"docs":{},"该":{"docs":{},"不":{"docs":{},"用":{"docs":{},"那":{"docs":{},"么":{"docs":{},"久":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"到":{"docs":{},"后":{"docs":{},"期":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"数":{"docs":{},"中":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"都":{"docs":{},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"加":{"docs":{},"入":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"直":{"docs":{},"接":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"e":{"docs":{},"；":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"还":{"docs":{},"是":{"docs":{},"不":{"docs":{},"慢":{"docs":{},"的":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"k":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"加":{"docs":{},"了":{"docs":{},"快":{"docs":{},"速":{"docs":{},"处":{"docs":{},"理":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"在":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"上":{"docs":{},"运":{"docs":{},"行":{"docs":{},"时":{"docs":{},"间":{"docs":{},"能":{"docs":{},"降":{"docs":{},"到":{"4":{"docs":{},"m":{"docs":{},"s":{"docs":{},"，":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"分":{"docs":{},"析":{"docs":{},"应":{"docs":{},"该":{"docs":{},"要":{"docs":{},"用":{"docs":{},"均":{"docs":{},"摊":{"docs":{},"分":{"docs":{},"析":{"docs":{},"。":{"docs":{},"也":{"docs":{},"不":{"docs":{},"太":{"docs":{},"了":{"docs":{},"解":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"多":{"docs":{},"分":{"docs":{},"析":{"docs":{},"了":{"docs":{},"。":{"docs":{"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"ref":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"：":{"docs":{},"得":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"排":{"docs":{},"列":{"docs":{},"，":{"docs":{},"类":{"docs":{},"似":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"法":{"docs":{},"，":{"docs":{},"一":{"docs":{},"共":{"docs":{},"需":{"docs":{},"要":{"docs":{},"执":{"docs":{},"行":{"docs":{},"n":{"docs":{},"!":{"docs":{},"次":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"就":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"!":{"docs":{},")":{"docs":{},".":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"最":{"docs":{},"好":{"docs":{},"使":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"是":{"docs":{},"一":{"docs":{},"系":{"docs":{},"列":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"首":{"docs":{},"先":{"docs":{},"定":{"docs":{},"好":{"docs":{},"一":{"docs":{},"个":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"当":{"docs":{},"做":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"比":{"docs":{},"这":{"docs":{},"个":{"docs":{},"值":{"docs":{},"小":{"docs":{},"的":{"docs":{},"当":{"docs":{},"做":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"大":{"docs":{},"的":{"docs":{},"当":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"代":{"docs":{},"码":{"docs":{},"简":{"docs":{},"化":{"docs":{},"很":{"docs":{},"多":{"docs":{},"了":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"单":{"docs":{},"就":{"docs":{},"这":{"docs":{},"样":{"docs":{},"做":{"docs":{},"还":{"docs":{},"是":{"docs":{},"不":{"docs":{},"行":{"docs":{},"，":{"docs":{},"会":{"docs":{},"有":{"docs":{},"大":{"docs":{},"量":{"docs":{},"的":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"1":{"docs":{"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.006024096385542169}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"题":{"docs":{},"来":{"docs":{},"说":{"docs":{},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"用":{"docs":{},"双":{"docs":{},"重":{"docs":{},"循":{"docs":{},"环":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"从":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"地":{"docs":{},"点":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"消":{"docs":{},"耗":{"docs":{},"量":{"docs":{},"，":{"docs":{},"要":{"docs":{},"是":{"docs":{},"能":{"docs":{},"顺":{"docs":{},"时":{"docs":{},"针":{"docs":{},"走":{"docs":{},"完":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"也":{"docs":{},"能":{"docs":{},"a":{"docs":{},"c":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"。":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"最":{"docs":{},"多":{"docs":{},"访":{"docs":{},"问":{"docs":{},"两":{"docs":{},"次":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"总":{"docs":{},"的":{"docs":{},"最":{"docs":{},"多":{"docs":{},"访":{"docs":{},"问":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"是":{"2":{"docs":{},"*":{"docs":{},"n":{"docs":{},"²":{"docs":{},".":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"开":{"docs":{},"始":{"docs":{},"定":{"docs":{},"义":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"要":{"docs":{},"给":{"docs":{},"他":{"docs":{},"分":{"docs":{},"配":{"docs":{},"n":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"里":{"docs":{},"的":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"是":{"docs":{},"动":{"docs":{},"态":{"docs":{},"递":{"docs":{},"增":{"docs":{},"空":{"docs":{},"间":{"docs":{},"的":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"空":{"docs":{},"间":{"docs":{},"不":{"docs":{},"够":{"docs":{},"，":{"docs":{},"会":{"docs":{},"重":{"docs":{},"新":{"docs":{},"开":{"docs":{},"辟":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"提":{"docs":{},"前":{"docs":{},"分":{"docs":{},"配":{"docs":{},"好":{"docs":{},"n":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"能":{"docs":{},"减":{"docs":{},"少":{"docs":{},"算":{"docs":{},"法":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"和":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"维":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"双":{"docs":{},"重":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"48.-rotate-image.html":{"ref":"48.-rotate-image.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"操":{"docs":{},"作":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"+":{"docs":{},"n":{"docs":{},")":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"进":{"docs":{},"行":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"转":{"docs":{},"置":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"操":{"docs":{},"作":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.008}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"得":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"单":{"docs":{},"纯":{"docs":{},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"。":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"。":{"docs":{},"这":{"docs":{},"其":{"docs":{},"实":{"docs":{},"很":{"docs":{},"像":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"函":{"docs":{},"数":{"docs":{},"中":{"docs":{},"的":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"和":{"docs":{},"u":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"是":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"不":{"docs":{},"是":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"索":{"docs":{},"引":{"docs":{},"减":{"docs":{},"一":{"docs":{},"就":{"docs":{},"行":{"docs":{},"了":{"docs":{},"。":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"最":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"简":{"docs":{},"单":{"docs":{},"办":{"docs":{},"法":{"docs":{},"是":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"。":{"docs":{},"跳":{"docs":{},"到":{"docs":{},"下":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"将":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"中":{"docs":{},"。":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"出":{"docs":{},"有":{"docs":{},"相":{"docs":{},"同":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"集":{"docs":{},"合":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"办":{"docs":{},"法":{"docs":{},"确":{"docs":{},"定":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"都":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"中":{"docs":{},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"也":{"docs":{},"是":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"实":{"docs":{},"现":{"docs":{},"的":{"docs":{},"，":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"在":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"中":{"docs":{},"只":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"判":{"docs":{},"断":{"docs":{},"分":{"docs":{},"支":{"docs":{},"，":{"docs":{},"会":{"docs":{},"比":{"docs":{},"传":{"docs":{},"统":{"docs":{},"的":{"3":{"docs":{},"个":{"docs":{},"判":{"docs":{},"断":{"docs":{},"分":{"docs":{},"支":{"docs":{},"更":{"docs":{},"加":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"以":{"docs":{},"及":{"docs":{},"快":{"docs":{},"速":{"docs":{"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"ref":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","tf":0.00847457627118644}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"看":{"docs":{},"懂":{"docs":{},"意":{"docs":{},"思":{"docs":{},"之":{"docs":{},"后":{"docs":{},"发":{"docs":{},"现":{"docs":{},"直":{"docs":{},"接":{"docs":{},"使":{"docs":{},"用":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"即":{"docs":{},"可":{"docs":{"35.-search-insert-position.html":{"ref":"35.-search-insert-position.html","tf":0.038461538461538464}}}}}}}}}}}}}}}}}}}}}}}},"了":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"之":{"docs":{},"后":{"docs":{},"明":{"docs":{},"白":{"docs":{},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"求":{"docs":{},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{},"最":{"docs":{},"快":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"还":{"docs":{},"是":{"docs":{},"从":{"docs":{},"中":{"docs":{},"间":{"docs":{},"往":{"docs":{},"两":{"docs":{},"边":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"好":{"docs":{},"些":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"两":{"docs":{},"边":{"docs":{},"向":{"docs":{},"中":{"docs":{},"间":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"。":{"docs":{},"看":{"docs":{},"到":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"朋":{"docs":{},"友":{"docs":{},"可":{"docs":{},"以":{"docs":{},"仔":{"docs":{},"细":{"docs":{},"体":{"docs":{},"会":{"docs":{},"一":{"docs":{},"下":{"docs":{},"两":{"docs":{},"种":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"docs":{},"。":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"有":{"docs":{},"人":{"docs":{},"用":{"docs":{},"桶":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"这":{"docs":{},"题":{"docs":{},"，":{"docs":{},"我":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"很":{"docs":{},"巧":{"docs":{},"妙":{"docs":{},"。":{"docs":{},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"桶":{"docs":{},"排":{"docs":{},"序":{"docs":{},"一":{"docs":{},"样":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"定":{"docs":{},"下":{"docs":{},"桶":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"设":{"docs":{},"为":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},"。":{"docs":{},"从":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"桶":{"docs":{},"只":{"docs":{},"能":{"docs":{},"放":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"出":{"docs":{},"现":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"桶":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"桶":{"docs":{},"中":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"差":{"docs":{},"值":{"docs":{},"就":{"docs":{},"是":{"docs":{},"t":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"在":{"docs":{},"这":{"docs":{},"个":{"docs":{},"桶":{"docs":{},"的":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"和":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"桶":{"docs":{},"中":{"docs":{},"找":{"docs":{},"数":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"差":{"docs":{},"值":{"docs":{},"是":{"docs":{},"否":{"docs":{},"小":{"docs":{},"于":{"docs":{},"t":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"。":{"docs":{},"通":{"docs":{},"过":{"docs":{},"这":{"docs":{},"种":{"docs":{},"办":{"docs":{},"法":{"docs":{},"，":{"docs":{},"将":{"docs":{},"数":{"docs":{},"字":{"docs":{},"换":{"docs":{},"成":{"docs":{},"桶":{"docs":{},"，":{"docs":{},"再":{"docs":{},"重":{"docs":{},"复":{"docs":{},"利":{"docs":{},"用":{"docs":{},"上":{"docs":{},"题":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"可":{"docs":{},"以":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"220.-Contains-Duplicate-III.html":{"ref":"220.-Contains-Duplicate-III.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"似":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"实":{"docs":{},"现":{"docs":{},"起":{"docs":{},"来":{"docs":{},"确":{"docs":{},"实":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"很":{"docs":{},"多":{"docs":{},"细":{"docs":{},"节":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"提":{"docs":{},"一":{"docs":{},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"中":{"docs":{},"最":{"docs":{},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"尾":{"docs":{},"指":{"docs":{},"针":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"如":{"docs":{},"果":{"docs":{},"比":{"docs":{},"他":{"docs":{},"大":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"插":{"docs":{},"入":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"尾":{"docs":{},"指":{"docs":{},"针":{"docs":{},"需":{"docs":{},"要":{"docs":{},"后":{"docs":{},"移":{"docs":{},"一":{"docs":{},"位":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"比":{"docs":{},"他":{"docs":{},"小":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"下":{"docs":{},"一":{"docs":{},"位":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"前":{"docs":{},"面":{"docs":{},"去":{"docs":{},"了":{"docs":{},"，":{"docs":{},"新":{"docs":{},"的":{"docs":{},"下":{"docs":{},"一":{"docs":{},"位":{"docs":{},"就":{"docs":{},"接":{"docs":{},"在":{"docs":{},"尾":{"docs":{},"指":{"docs":{},"针":{"docs":{},"后":{"docs":{},"面":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"存":{"docs":{},"放":{"docs":{},"之":{"docs":{},"前":{"docs":{},"访":{"docs":{},"问":{"docs":{},"过":{"docs":{},"的":{"docs":{},"信":{"docs":{},"息":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"保":{"docs":{},"证":{"docs":{},"每":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"只":{"docs":{},"访":{"docs":{},"问":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{},"这":{"docs":{},"也":{"docs":{},"类":{"docs":{},"似":{"docs":{},"一":{"docs":{},"些":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"内":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"保":{"docs":{},"存":{"docs":{},"数":{"docs":{},"独":{"docs":{},"规":{"docs":{},"则":{"docs":{},"下":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"位":{"docs":{},"置":{"docs":{},"对":{"docs":{},"后":{"docs":{},"面":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"影":{"docs":{},"响":{"docs":{},"。":{"docs":{},"在":{"docs":{},"数":{"docs":{},"独":{"docs":{},"中":{"docs":{},"，":{"docs":{},"行":{"docs":{},"和":{"docs":{},"列":{"docs":{},"以":{"docs":{},"及":{"docs":{},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"中":{"docs":{},"不":{"docs":{},"能":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"将":{"docs":{},"访":{"docs":{},"问":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"3":{"docs":{},"个":{"docs":{},"规":{"docs":{},"则":{"docs":{},"保":{"docs":{},"存":{"docs":{},"到":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"中":{"docs":{},"，":{"docs":{},"这":{"docs":{},"种":{"docs":{},"思":{"docs":{},"路":{"docs":{},"其":{"docs":{},"实":{"docs":{},"不":{"docs":{},"难":{"docs":{},"得":{"docs":{},"出":{"docs":{},"，":{"docs":{},"难":{"docs":{},"得":{"docs":{},"出":{"docs":{},"的":{"docs":{},"是":{"docs":{},"该":{"docs":{},"如":{"docs":{},"果":{"docs":{},"在":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"中":{"docs":{},"保":{"docs":{},"存":{"docs":{},"信":{"docs":{},"息":{"docs":{},"。":{"docs":{},"如":{"docs":{},"何":{"docs":{},"保":{"docs":{},"存":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"代":{"docs":{},"码":{"docs":{},"。":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"栈":{"docs":{},"，":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"84.-largest-rectangle-in-histogram.html":{"ref":"84.-largest-rectangle-in-histogram.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"还":{"docs":{},"有":{"docs":{},"优":{"docs":{},"化":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"，":{"docs":{},"去":{"docs":{},"看":{"docs":{},"了":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"队":{"docs":{},"列":{"docs":{},"来":{"docs":{},"做":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"需":{"docs":{},"保":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"默":{"docs":{},"认":{"docs":{},"只":{"docs":{},"能":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"但":{"docs":{},"是":{"docs":{},"其":{"docs":{},"实":{"docs":{},"可":{"docs":{},"以":{"docs":{},"先":{"docs":{},"定":{"docs":{},"义":{"docs":{},"好":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"看":{"docs":{},"情":{"docs":{},"况":{"docs":{},"从":{"docs":{},"左":{"docs":{},"右":{"docs":{},"分":{"docs":{},"别":{"docs":{},"将":{"docs":{},"结":{"docs":{},"果":{"docs":{},"放":{"docs":{},"置":{"docs":{},"进":{"docs":{},"去":{"docs":{},"。":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"表":{"docs":{},"示":{"docs":{},"给":{"docs":{},"所":{"docs":{},"有":{"docs":{},"小":{"docs":{},"朋":{"docs":{},"友":{"docs":{},"分":{"docs":{},"配":{"docs":{},"的":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"，":{"docs":{},"开":{"docs":{},"始":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"小":{"docs":{},"朋":{"docs":{},"友":{"docs":{},"都":{"docs":{},"是":{"1":{"docs":{},"个":{"docs":{},"。":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}}}}}}},"异":{"docs":{},"或":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"同":{"docs":{},"样":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"异":{"docs":{},"或":{"docs":{},"之":{"docs":{},"后":{"docs":{},"结":{"docs":{},"果":{"docs":{},"相":{"docs":{},"同":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"数":{"docs":{},"异":{"docs":{},"或":{"docs":{},"就":{"docs":{},"行":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"队":{"docs":{},"列":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"。":{"docs":{},"队":{"docs":{},"列":{"docs":{},"和":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"是":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"f":{"docs":{},"i":{"docs":{},"f":{"docs":{},"o":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"o":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"队":{"docs":{},"列":{"docs":{},"实":{"docs":{},"现":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"效":{"docs":{},"率":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"很":{"docs":{},"低":{"docs":{},"。":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"。":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"做":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"我":{"docs":{},"实":{"docs":{},"现":{"docs":{},"的":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"认":{"docs":{},"为":{"docs":{},"应":{"docs":{},"该":{"docs":{},"没":{"docs":{},"有":{"docs":{},"地":{"docs":{},"方":{"docs":{},"能":{"docs":{},"改":{"docs":{},"了":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"次":{"docs":{},"抱":{"docs":{},"着":{"docs":{},"试":{"docs":{},"一":{"docs":{},"试":{"docs":{},"的":{"docs":{},"心":{"docs":{},"态":{"docs":{},"去":{"docs":{},"看":{"docs":{},"了":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"确":{"docs":{},"实":{"docs":{},"有":{"docs":{},"很":{"docs":{},"厉":{"docs":{},"害":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"平":{"docs":{},"均":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"低":{"docs":{},"到":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"中":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"进":{"docs":{},"行":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"36.-valid-sudoku.html":{"ref":"36.-valid-sudoku.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"执":{"docs":{},"行":{"docs":{},"n":{"docs":{},"²":{"docs":{},"次":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"执":{"docs":{},"行":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"次":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"86.-partition-list.html":{"ref":"86.-partition-list.html","tf":0.007518796992481203}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"即":{"docs":{},"可":{"docs":{},"得":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},",":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"135.-Candy.html":{"ref":"135.-Candy.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}}},"!":{"docs":{},"=":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.007772020725388601}}}},"&":{"docs":{},"&":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269},"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.008403361344537815},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0051813471502590676},"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.0196078431372549},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.012738853503184714},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.024691358024691357}}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678}}},")":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}},"g":{"docs":{},"a":{"docs":{},"s":{"docs":{},",":{"docs":{"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0061162079510703364}}}}},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"200.-Number-of-Islands.html":{"ref":"200.-Number-of-Islands.html","tf":0.00980392156862745}}}}}}},"a":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.01509433962264151}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},",":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}},"|":{"docs":{},"|":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357},"40.-combination-sum-ii.html":{"ref":"40.-combination-sum-ii.html","tf":0.012345679012345678},"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338},"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.007547169811320755},"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"世":{"docs":{},"家":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"很":{"docs":{},"慢":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"加":{"docs":{},"入":{"docs":{},"了":{"docs":{},"剪":{"docs":{},"枝":{"docs":{},"策":{"docs":{},"略":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"一":{"docs":{},"定":{"docs":{},"程":{"docs":{},"度":{"docs":{},"上":{"docs":{},"加":{"docs":{},"快":{"docs":{},"了":{"docs":{},"运":{"docs":{},"行":{"docs":{},"速":{"docs":{},"度":{"docs":{},"的":{"docs":{},"。":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"加":{"docs":{},"入":{"docs":{},"了":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"，":{"docs":{},"会":{"docs":{},"快":{"docs":{},"一":{"docs":{},"点":{"docs":{},"。":{"docs":{"241.-Different-Ways-to-Add-Parentheses.html":{"ref":"241.-Different-Ways-to-Add-Parentheses.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"归":{"docs":{},"题":{"docs":{},"目":{"docs":{},"本":{"docs":{},"身":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"0":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}},"docs":{}}}}}}}}}}}}},"组":{"docs":{},"合":{"docs":{},"数":{"docs":{},"相":{"docs":{},"加":{"docs":{},"最":{"docs":{},"后":{"docs":{},"和":{"docs":{},"为":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"，":{"docs":{},"基":{"docs":{},"本":{"docs":{},"需":{"docs":{},"要":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"所":{"docs":{},"有":{"docs":{},"集":{"docs":{},"合":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"得":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"集":{"docs":{},"合":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"和":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"数":{"docs":{},"字":{"docs":{},"相":{"docs":{},"加":{"docs":{},"如":{"docs":{},"果":{"docs":{},"已":{"docs":{},"经":{"docs":{},"大":{"docs":{},"于":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"，":{"docs":{},"就":{"docs":{},"没":{"docs":{},"必":{"docs":{},"要":{"docs":{},"继":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"了":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"加":{"docs":{},"入":{"docs":{},"了":{"docs":{},"剪":{"docs":{},"枝":{"docs":{},"策":{"docs":{},"略":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"为":{"docs":{},"了":{"docs":{},"先":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"小":{"docs":{},"数":{"docs":{},"字":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"大":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"在":{"docs":{},"进":{"docs":{},"入":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"之":{"docs":{},"前":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"满":{"docs":{},"足":{"docs":{},"剪":{"docs":{},"枝":{"docs":{},"策":{"docs":{},"略":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"满":{"docs":{},"足":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"进":{"docs":{},"入":{"docs":{},"函":{"docs":{},"数":{"docs":{},"。":{"docs":{"39.-combination-sum.html":{"ref":"39.-combination-sum.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"需":{"docs":{},"要":{"docs":{},"放":{"docs":{},"置":{"docs":{},"k":{"docs":{},"个":{"docs":{},"值":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"值":{"docs":{},"只":{"docs":{},"能":{"docs":{},"比":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"小":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"重":{"docs":{},"复":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"不":{"docs":{},"是":{"docs":{},"太":{"docs":{},"好":{"docs":{},"分":{"docs":{},"析":{"docs":{},"，":{"docs":{},"有":{"docs":{},"很":{"docs":{},"多":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"例":{"docs":{},"题":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{"77.-combinations.html":{"ref":"77.-combinations.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"中":{"docs":{},"间":{"docs":{},"加":{"docs":{},"入":{"docs":{},"剪":{"docs":{},"枝":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"已":{"docs":{},"经":{"docs":{},"大":{"docs":{},"于":{"docs":{},"n":{"docs":{},"了":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"继":{"docs":{},"续":{"docs":{},"往":{"docs":{},"下":{"docs":{},"求":{"docs":{},"解":{"docs":{},"了":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"得":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"缺":{"docs":{},"失":{"docs":{},"的":{"docs":{},"正":{"docs":{},"数":{"docs":{},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"负":{"docs":{},"数":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"可":{"docs":{},"以":{"docs":{},"很":{"docs":{},"好":{"docs":{},"地":{"docs":{},"用":{"docs":{},"数":{"docs":{},"组":{"docs":{},"下":{"docs":{},"标":{"docs":{},"对":{"docs":{},"应":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"将":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"数":{"docs":{},"填":{"docs":{},"入":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"下":{"docs":{},"标":{"docs":{},"当":{"docs":{},"中":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"再":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"缺":{"docs":{},"失":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{"41.-first-missing-positive.html":{"ref":"41.-first-missing-positive.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"其":{"docs":{},"实":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"得":{"docs":{},"到":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"k":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"。":{"docs":{},"只":{"docs":{},"是":{"docs":{},"之":{"docs":{},"前":{"docs":{},"那":{"docs":{},"个":{"docs":{},"是":{"docs":{},"要":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"将":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"数":{"docs":{},"归":{"docs":{},"位":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"用":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"得":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"是":{"docs":{},"第":{"docs":{},"几":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"得":{"docs":{},"到":{"docs":{},"左":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"位":{"docs":{},"置":{"docs":{},"即":{"docs":{},"可":{"docs":{"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"排":{"docs":{},"列":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"也":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"算":{"docs":{},"法":{"docs":{},"课":{"docs":{},"将":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"例":{"docs":{},"题":{"docs":{},"。":{"docs":{},"直":{"docs":{},"接":{"docs":{},"每":{"docs":{},"次":{"docs":{},"交":{"docs":{},"换":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"情":{"docs":{},"况":{"docs":{},"都":{"docs":{},"交":{"docs":{},"换":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"所":{"docs":{},"有":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{},"其":{"docs":{},"实":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"解":{"docs":{},"释":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"将":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"交":{"docs":{},"换":{"docs":{},"到":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"组":{"docs":{},"合":{"docs":{},"数":{"docs":{},"相":{"docs":{},"加":{"docs":{},"得":{"docs":{},"到":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"很":{"docs":{},"像":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"直":{"docs":{},"接":{"docs":{},"使":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"，":{"docs":{},"加":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"区":{"docs":{},"分":{"docs":{},"是":{"docs":{},"否":{"docs":{},"已":{"docs":{},"经":{"docs":{},"加":{"docs":{},"入":{"docs":{},"新":{"docs":{},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{"46.-permutations.html":{"ref":"46.-permutations.html","tf":0.011111111111111112}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"可":{"docs":{},"以":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"出":{"docs":{},"现":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"会":{"docs":{},"进":{"docs":{},"行":{"docs":{},"两":{"docs":{},"次":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"分":{"docs":{},"支":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"得":{"docs":{},"到":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"子":{"docs":{},"集":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"题":{"docs":{},"相":{"docs":{},"比":{"docs":{},"，":{"docs":{},"多":{"docs":{},"了":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"在":{"docs":{},"计":{"docs":{},"算":{"docs":{},"子":{"docs":{},"集":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"处":{"docs":{},"理":{"docs":{},"重":{"docs":{},"复":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"和":{"docs":{},"第":{"docs":{},"一":{"docs":{},"题":{"docs":{},"类":{"docs":{},"似":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"。":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"一":{"docs":{},"次":{"docs":{},"次":{"docs":{},"将":{"docs":{},"新":{"docs":{},"数":{"docs":{},"字":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"到":{"docs":{},"之":{"docs":{},"前":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"中":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"新":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"。":{"docs":{"90.-subsets-ii.html":{"ref":"90.-subsets-ii.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"有":{"docs":{},"个":{"docs":{},"性":{"docs":{},"质":{"docs":{},"就":{"docs":{},"是":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"结":{"docs":{},"果":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"直":{"docs":{},"接":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"保":{"docs":{},"存":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"值":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"值":{"docs":{},"大":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"当":{"docs":{},"前":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"不":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"就":{"docs":{},"是":{"docs":{},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"浅":{"docs":{},"的":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"深":{"docs":{},"度":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"广":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"广":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"有":{"docs":{},"找":{"docs":{},"的":{"docs":{},"极":{"docs":{},"值":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"小":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"来":{"docs":{},"说":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"难":{"docs":{},"，":{"docs":{},"毕":{"docs":{},"竟":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"是":{"docs":{},"有":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"“":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"”":{"docs":{},"的":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"在":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"之":{"docs":{},"间":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"可":{"docs":{},"以":{"docs":{},"返":{"docs":{},"回":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"小":{"docs":{},"的":{"docs":{},"那":{"docs":{},"个":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"在":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"大":{"docs":{},"的":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"在":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"接":{"docs":{},"水":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"异":{"docs":{},"曲":{"docs":{},"同":{"docs":{},"工":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"结":{"docs":{},"题":{"docs":{},"。":{"docs":{},"哪":{"docs":{},"边":{"docs":{},"短":{"docs":{},"，":{"docs":{},"动":{"docs":{},"哪":{"docs":{},"边":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"两":{"docs":{},"指":{"docs":{},"针":{"docs":{},"重":{"docs":{},"合":{"docs":{},"退":{"docs":{},"出":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{},"中":{"docs":{},"间":{"docs":{},"维":{"docs":{},"护":{"docs":{},"左":{"docs":{},"右":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"存":{"docs":{},"水":{"docs":{},"量":{"docs":{},"等":{"docs":{},"于":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"减":{"docs":{},"去":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"。":{"docs":{"42.-trapping-rain-water.html":{"ref":"42.-trapping-rain-water.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"55.-jump-game.html":{"ref":"55.-jump-game.html","tf":0.011363636363636364}}}}}},"旋":{"docs":{},"转":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"题":{"docs":{},"类":{"docs":{},"似":{"docs":{},"解":{"docs":{},"答":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"移":{"docs":{},"步":{"docs":{},"到":{"docs":{},"s":{"docs":{},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"一":{"docs":{},"下":{"docs":{"107.-binary-tree-level-order-traversal-ii.html":{"ref":"107.-binary-tree-level-order-traversal-ii.html","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.00684931506849315}}}}}}}}},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"—":{"docs":{},"—":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"!":{"docs":{},")":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"会":{"docs":{},"比":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"慢":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"原":{"docs":{},"因":{"docs":{},"就":{"docs":{},"在":{"docs":{},"于":{"docs":{},"这":{"docs":{},"里":{"docs":{},"函":{"docs":{},"数":{"docs":{},"参":{"docs":{},"数":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"没":{"docs":{},"用":{"docs":{},"引":{"docs":{},"用":{"docs":{},"传":{"docs":{},"递":{"docs":{},"。":{"docs":{},"每":{"docs":{},"次":{"docs":{},"参":{"docs":{},"数":{"docs":{},"传":{"docs":{},"递":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"会":{"docs":{},"复":{"docs":{},"制":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"开":{"docs":{},"销":{"docs":{},"会":{"docs":{},"很":{"docs":{},"大":{"docs":{},"。":{"docs":{"47.-permutations-ii.html":{"ref":"47.-permutations-ii.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"更":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"已":{"docs":{},"经":{"docs":{},"直":{"docs":{},"接":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"了":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"出":{"docs":{},"中":{"docs":{},"间":{"docs":{},"可":{"docs":{},"能":{"docs":{},"有":{"docs":{},"交":{"docs":{},"叉":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"合":{"docs":{},"并":{"docs":{},"。":{"docs":{},"前":{"docs":{},"后":{"docs":{},"没":{"docs":{},"有":{"docs":{},"交":{"docs":{},"叉":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"变":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"插":{"docs":{},"入":{"docs":{},"。":{"docs":{"57.-insert-interval.html":{"ref":"57.-insert-interval.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"甚":{"docs":{},"至":{"docs":{},"比":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{"83.-remove-duplicates-from-sorted-list.html":{"ref":"83.-remove-duplicates-from-sorted-list.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"142.-Linked-List-Cycle-II.html":{"ref":"142.-Linked-List-Cycle-II.html","tf":0.005917159763313609}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"没":{"docs":{},"什":{"docs":{},"么":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"换":{"docs":{},"汤":{"docs":{},"不":{"docs":{},"换":{"docs":{},"药":{"docs":{},"。":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"是":{"docs":{},"路":{"docs":{},"线":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{"64.-minimum-path-sum.html":{"ref":"64.-minimum-path-sum.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"很":{"docs":{},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"出":{"docs":{},"现":{"3":{"docs":{},"次":{"docs":{},"，":{"docs":{},"除":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"异":{"docs":{},"或":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"没":{"docs":{},"这":{"docs":{},"么":{"docs":{},"好":{"docs":{},"用":{"docs":{},"了":{"docs":{},"。":{"docs":{},"我":{"docs":{},"开":{"docs":{},"始":{"docs":{},"对":{"docs":{},"这":{"docs":{},"题":{"docs":{},"也":{"docs":{},"是":{"docs":{},"一":{"docs":{},"脸":{"docs":{},"懵":{"docs":{},"逼":{"docs":{},"，":{"docs":{},"看":{"docs":{},"了":{"docs":{},"答":{"docs":{},"案":{"docs":{},"还":{"docs":{},"是":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"没":{"docs":{},"那":{"docs":{},"么":{"docs":{},"清":{"docs":{},"晰":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"些":{"docs":{},"数":{"docs":{},"字":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"的":{"docs":{},"基":{"docs":{},"础":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"状":{"docs":{},"态":{"docs":{},"图":{"docs":{},"来":{"docs":{},"理":{"docs":{},"解":{"docs":{},"题":{"docs":{},"目":{"docs":{},"。":{"docs":{"137.-Single-Number-II.html":{"ref":"137.-Single-Number-II.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"计":{"docs":{},"算":{"docs":{},"数":{"docs":{},"量":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"列":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"是":{"docs":{},"多":{"docs":{},"了":{"docs":{},"k":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"限":{"docs":{},"制":{"docs":{},"。":{"docs":{},"我":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"做":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"用":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"保":{"docs":{},"存":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"映":{"docs":{},"射":{"docs":{},"关":{"docs":{},"系":{"docs":{},"是":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"一":{"docs":{},"个":{"docs":{},"类":{"docs":{},"型":{"docs":{},"，":{"docs":{},"简":{"docs":{},"化":{"docs":{},"了":{"docs":{},"一":{"docs":{},"点":{"docs":{},"。":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"需":{"docs":{},"要":{"docs":{},"输":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"保":{"docs":{},"存":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"树":{"docs":{},"开":{"docs":{},"始":{"docs":{},"和":{"docs":{},"结":{"docs":{},"束":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{},"来":{"docs":{},"映":{"docs":{},"射":{"docs":{},"他":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"只":{"docs":{},"要":{"docs":{},"树":{"docs":{},"的":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"固":{"docs":{},"定":{"docs":{},"好":{"docs":{},"，":{"docs":{},"能":{"docs":{},"生":{"docs":{},"成":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"也":{"docs":{},"就":{"docs":{},"出":{"docs":{},"来":{"docs":{},"了":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"结":{"docs":{},"果":{"docs":{"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"十":{"docs":{},"进":{"docs":{},"制":{"docs":{},"加":{"docs":{},"法":{"docs":{},"没":{"docs":{},"什":{"docs":{},"么":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"都":{"docs":{},"是":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"进":{"docs":{},"位":{"docs":{},"标":{"docs":{},"志":{"docs":{},"位":{"docs":{},"，":{"docs":{},"两":{"docs":{},"数":{"docs":{},"相":{"docs":{},"加":{"docs":{},"再":{"docs":{},"加":{"docs":{},"上":{"docs":{},"标":{"docs":{},"志":{"docs":{},"位":{"docs":{},"。":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{},"改":{"docs":{},"变":{"docs":{},"标":{"docs":{},"志":{"docs":{},"位":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"注":{"docs":{},"意":{"docs":{},"开":{"docs":{},"头":{"docs":{},"的":{"0":{"docs":{},"需":{"docs":{},"要":{"docs":{},"删":{"docs":{},"除":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"?":{"docs":{"44.-wildcard-matching.html":{"ref":"44.-wildcard-matching.html","tf":0.006369426751592357},"134.-Gas-Station.html":{"ref":"134.-Gas-Station.html","tf":0.0030581039755351682}}},"假":{"docs":{},"定":{"docs":{},"有":{"docs":{},"n":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"平":{"docs":{},"均":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"docs":{},"m":{"docs":{},"，":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"排":{"docs":{},"序":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"比":{"docs":{},"较":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"需":{"docs":{},"要":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"*":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"49.-group-anagrams.html":{"ref":"49.-group-anagrams.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"2":{"docs":{},"的":{"1":{"0":{"0":{"docs":{},"次":{"docs":{},"方":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"直":{"docs":{},"接":{"docs":{},"乘":{"1":{"0":{"0":{"docs":{},"次":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"没":{"docs":{},"有":{"docs":{},"必":{"docs":{},"要":{"docs":{},"。":{"docs":{},"完":{"docs":{},"全":{"docs":{},"可":{"docs":{},"以":{"docs":{},"求":{"4":{"docs":{},"的":{"5":{"0":{"docs":{},"次":{"docs":{},"方":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"1":{"6":{"docs":{},"的":{"2":{"5":{"docs":{},"次":{"docs":{},"方":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"每":{"docs":{},"次":{"docs":{},"能":{"docs":{},"减":{"docs":{},"少":{"docs":{},"一":{"docs":{},"半":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"量":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"是":{"docs":{},"还":{"docs":{},"有":{"docs":{},"负":{"docs":{},"数":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"负":{"docs":{},"数":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"将":{"docs":{},"x":{"docs":{},"化":{"docs":{},"为":{"1":{"docs":{},"/":{"docs":{},"x":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"n":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"正":{"docs":{},"数":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"，":{"docs":{},"一":{"docs":{},"种":{"docs":{},"最":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"就":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{},"最":{"docs":{},"后":{"docs":{},"直":{"docs":{},"接":{"docs":{},"将":{"docs":{},"n":{"docs":{"50.-pow-x-n.html":{"ref":"50.-pow-x-n.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{},"出":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"求":{"docs":{},"解":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"保":{"docs":{},"存":{"docs":{},"节":{"docs":{},"点":{"docs":{},"高":{"docs":{},"度":{"docs":{},"可":{"docs":{},"以":{"docs":{},"最":{"docs":{},"左":{"docs":{},"到":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"再":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"保":{"docs":{},"存":{"docs":{},"节":{"docs":{},"点":{"docs":{},"高":{"docs":{},"度":{"docs":{},"最":{"docs":{},"右":{"docs":{},"可":{"docs":{},"以":{"docs":{},"到":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"还":{"docs":{},"有":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"保":{"docs":{},"存":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"从":{"docs":{},"以":{"docs":{},"为":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"慢":{"docs":{},"加":{"docs":{},"高":{"docs":{},"维":{"docs":{},"度":{"docs":{},"。":{"docs":{},"起":{"docs":{},"始":{"docs":{},"时":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"数":{"docs":{},"组":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"为":{"docs":{},"s":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"面":{"docs":{},"积":{"docs":{},"，":{"docs":{},"实":{"docs":{},"质":{"docs":{},"是":{"docs":{},"求":{"docs":{},"出":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"面":{"docs":{},"积":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"总":{"docs":{},"面":{"docs":{},"积":{"docs":{},"减":{"docs":{},"去":{"docs":{},"公":{"docs":{},"共":{"docs":{},"面":{"docs":{},"积":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"223.-Rectangle-Area.html":{"ref":"223.-Rectangle-Area.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"经":{"docs":{},"典":{"docs":{},"的":{"docs":{},"n":{"docs":{},"皇":{"docs":{},"后":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"放":{"docs":{},"之":{"docs":{},"前":{"docs":{},"首":{"docs":{},"先":{"docs":{},"判":{"docs":{},"断":{"docs":{},"这":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"是":{"docs":{},"否":{"docs":{},"合":{"docs":{},"法":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"合":{"docs":{},"法":{"docs":{},"，":{"docs":{},"放":{"docs":{},"入":{"docs":{},"这":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"合":{"docs":{},"法":{"docs":{},"判":{"docs":{},"断":{"docs":{},"下":{"docs":{},"个":{"docs":{},"能":{"docs":{},"放":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"能":{"docs":{},"放":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"就":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"。":{"docs":{"51.-n-queens.html":{"ref":"51.-n-queens.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"最":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"每":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"步":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"判":{"docs":{},"断":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"做":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"就":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"k":{"docs":{},")":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"挺":{"docs":{},"久":{"docs":{},"时":{"docs":{},"间":{"docs":{},"的":{"docs":{},"。":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"能":{"docs":{},"合":{"docs":{},"并":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"范":{"docs":{},"围":{"docs":{},"有":{"docs":{},"重":{"docs":{},"合":{"docs":{},"。":{"docs":{},"重":{"docs":{},"合":{"docs":{},"的":{"docs":{},"话":{"docs":{},"存":{"docs":{},"在":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"种":{"docs":{},"是":{"docs":{},"左":{"docs":{},"边":{"docs":{},"重":{"docs":{},"合":{"docs":{},"，":{"docs":{},"一":{"docs":{},"种":{"docs":{},"是":{"docs":{},"右":{"docs":{},"边":{"docs":{},"重":{"docs":{},"合":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"程":{"docs":{},"序":{"docs":{},"中":{"docs":{},"同":{"docs":{},"时":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"两":{"docs":{},"个":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"情":{"docs":{},"况":{"docs":{},"会":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"首":{"docs":{},"先":{"docs":{},"按":{"docs":{},"照":{"docs":{},"做":{"docs":{},"范":{"docs":{},"围":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"消":{"docs":{},"除":{"docs":{},"左":{"docs":{},"边":{"docs":{},"影":{"docs":{},"响":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"一":{"docs":{},"直":{"docs":{},"看":{"docs":{},"右":{"docs":{},"边":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"与":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"重":{"docs":{},"合":{"docs":{},"，":{"docs":{},"合":{"docs":{},"并":{"docs":{},"两":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"继":{"docs":{},"续":{"docs":{},"看":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"不":{"docs":{},"重":{"docs":{},"合":{"docs":{},"，":{"docs":{},"将":{"docs":{},"当":{"docs":{},"前":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"56.-merge-intervals.html":{"ref":"56.-merge-intervals.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"代":{"docs":{},"码":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"分":{"docs":{},"析":{"docs":{},"，":{"docs":{},"可":{"docs":{},"能":{"docs":{},"大":{"docs":{},"家":{"docs":{},"都":{"docs":{},"认":{"docs":{},"为":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"更":{"docs":{},"好":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"运":{"docs":{},"行":{"docs":{},"下":{"docs":{},"来":{"docs":{},"，":{"docs":{},"反":{"docs":{},"而":{"docs":{},"是":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"更":{"docs":{},"快":{"docs":{},"，":{"docs":{},"我":{"docs":{},"认":{"docs":{},"为":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"修":{"docs":{},"改":{"docs":{},"了":{"docs":{},"指":{"docs":{},"针":{"docs":{},"中":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"修":{"docs":{},"改":{"docs":{},"值":{"docs":{},"可":{"docs":{},"能":{"docs":{},"比":{"docs":{},"读":{"docs":{},"取":{"docs":{},"一":{"docs":{},"个":{"docs":{},"值":{"docs":{},"消":{"docs":{},"耗":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"多":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"导":{"docs":{},"致":{"docs":{},"用":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"传":{"docs":{},"参":{"docs":{},"数":{"docs":{},"更":{"docs":{},"好":{"docs":{},"。":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"异":{"docs":{},"或":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"136.-Single-Number.html":{"ref":"136.-Single-Number.html","tf":0.015384615384615385}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"都":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"树":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"才":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"和":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"n":{"docs":{},"_":{"2":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}},"docs":{}}},"k":{"docs":{},"_":{"docs":{},"t":{"docs":{},"h":{"docs":{"60.-permutation-sequence.html":{"ref":"60.-permutation-sequence.html","tf":0.013333333333333334}}}}}}},"需":{"docs":{},"要":{"docs":{},"填":{"docs":{},"满":{"docs":{},"n":{"docs":{},"*":{"docs":{},"n":{"docs":{},"个":{"docs":{},"格":{"docs":{},"子":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"填":{"docs":{},"格":{"docs":{},"子":{"docs":{},"移":{"docs":{},"动":{"docs":{},"时":{"docs":{},"间":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"59.-spiral-matrix-ii.html":{"ref":"59.-spiral-matrix-ii.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"排":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"显":{"docs":{},"然":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"会":{"docs":{},"很":{"docs":{},"好":{"docs":{},"。":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"常":{"docs":{},"数":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{},"既":{"docs":{},"然":{"docs":{},"是":{"docs":{},"常":{"docs":{},"数":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"那":{"docs":{},"就":{"docs":{},"不":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"我":{"docs":{},"还":{"docs":{},"是":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"舒":{"docs":{},"服":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"很":{"docs":{},"快":{"docs":{},"很":{"docs":{},"清":{"docs":{},"晰":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"的":{"docs":{},"。":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"维":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"62.-unique-paths.html":{"ref":"62.-unique-paths.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"可":{"docs":{},"以":{"docs":{},"排":{"docs":{},"除":{"docs":{},"一":{"docs":{},"半":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"x":{"docs":{},")":{"docs":{"69.-sqrt-x.html":{"ref":"69.-sqrt-x.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"问":{"docs":{},"题":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"还":{"docs":{},"是":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"的":{"docs":{},"写":{"docs":{},"法":{"docs":{},"。":{"docs":{},"毕":{"docs":{},"竟":{"docs":{},"如":{"docs":{},"果":{"docs":{},"节":{"docs":{},"点":{"docs":{},"很":{"docs":{},"多":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"多":{"docs":{},"递":{"docs":{},"归":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"栈":{"docs":{},"开":{"docs":{},"销":{"docs":{},"会":{"docs":{},"很":{"docs":{},"大":{"docs":{},"。":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"必":{"docs":{},"须":{"docs":{},"掌":{"docs":{},"握":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"不":{"docs":{},"是":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"定":{"docs":{},"义":{"docs":{},"是":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"高":{"docs":{},"度":{"docs":{},"差":{"docs":{},"要":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"1":{"docs":{},".":{"docs":{},"于":{"docs":{},"是":{"docs":{},"这":{"docs":{},"题":{"docs":{},"变":{"docs":{},"成":{"docs":{},"了":{"docs":{},"类":{"docs":{},"似":{"docs":{},"求":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"之":{"docs":{},"前":{"docs":{},"也":{"docs":{},"做":{"docs":{},"过":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"高":{"docs":{},"度":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"在":{"docs":{},"求":{"docs":{},"出":{"docs":{},"高":{"docs":{},"度":{"docs":{},"之":{"docs":{},"后":{"docs":{},"加":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"判":{"docs":{},"断":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"是":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"的":{"docs":{},"如":{"docs":{},"何":{"docs":{},"处":{"docs":{},"理":{"docs":{},"。":{"docs":{},"求":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"必":{"docs":{},"须":{"docs":{},"是":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"，":{"docs":{},"这":{"docs":{},"就":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"面":{"docs":{},"临":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"一":{"docs":{},"种":{"docs":{},"解":{"docs":{},"决":{"docs":{},"方":{"docs":{},"案":{"docs":{},"是":{"docs":{},"把":{"docs":{},"求":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{},"照":{"docs":{},"搬":{"docs":{},"过":{"docs":{},"来":{"docs":{},"，":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"全":{"docs":{},"局":{"docs":{},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"，":{"docs":{},"全":{"docs":{},"局":{"docs":{},"变":{"docs":{},"量":{"docs":{},"为":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"另":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},".":{"docs":{},"由":{"docs":{},"于":{"docs":{},"题":{"docs":{},"目":{"docs":{},"中":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"这":{"docs":{},"么":{"docs":{},"大":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"和":{"docs":{},"任":{"docs":{},"何":{"docs":{},"子":{"docs":{},"树":{"docs":{},"组":{"docs":{},"合":{"docs":{},"都":{"docs":{},"是":{"docs":{},"不":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"的":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"会":{"docs":{},"传":{"docs":{},"递":{"docs":{},"到":{"docs":{},"调":{"docs":{},"用":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"来":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"返":{"docs":{},"回":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"还":{"docs":{},"是":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"先":{"docs":{},"跟":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"方":{"docs":{},"法":{"docs":{},"很":{"docs":{},"好":{"docs":{},"做":{"docs":{},"，":{"docs":{},"几":{"docs":{},"行":{"docs":{},"代":{"docs":{},"码":{"docs":{},"就":{"docs":{},"能":{"docs":{},"搞":{"docs":{},"定":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"还":{"docs":{},"是":{"docs":{},"和":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"有":{"docs":{},"三":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"。":{"docs":{},"除":{"docs":{},"了":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"难":{"docs":{},"一":{"docs":{},"点":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"解":{"docs":{},"法":{"docs":{},"。":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"比":{"docs":{},"于":{"docs":{},"上":{"docs":{},"题":{"docs":{},"加":{"docs":{},"入":{"docs":{},"了":{"docs":{},"一":{"docs":{},"些":{"docs":{},"处":{"docs":{},"理":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"63.-unique-paths-ii.html":{"ref":"63.-unique-paths-ii.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}}}}}}}}},"当":{"docs":{},"于":{"docs":{},"对":{"docs":{},"树":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"性":{"docs":{},"处":{"docs":{},"理":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"67.-add-binary.html":{"ref":"67.-add-binary.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"斐":{"docs":{},"波":{"docs":{},"拉":{"docs":{},"契":{"docs":{},"数":{"docs":{},"列":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"相":{"docs":{},"对":{"docs":{},"于":{"docs":{},"第":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"减":{"docs":{},"少":{"docs":{},"了":{"docs":{},"线":{"docs":{},"性":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"开":{"docs":{},"销":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"从":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"减":{"docs":{},"到":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"。":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"ref":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}},"说":{"docs":{},"是":{"docs":{},"爬":{"docs":{},"楼":{"docs":{},"梯":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"斐":{"docs":{},"波":{"docs":{},"拉":{"docs":{},"契":{"docs":{},"数":{"docs":{},"列":{"docs":{},"。":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"等":{"docs":{},"于":{"docs":{},"前":{"docs":{},"两":{"docs":{},"个":{"docs":{},"的":{"docs":{},"值":{"docs":{},"相":{"docs":{},"加":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"所":{"docs":{},"有":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"保":{"docs":{},"存":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"70.-climbing-stairs.html":{"ref":"70.-climbing-stairs.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"则":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},")":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},";":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"驱":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"将":{"docs":{},"它":{"docs":{},"的":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"重":{"docs":{},"新":{"docs":{},"设":{"docs":{},"为":{"docs":{},"空":{"docs":{},"（":{"docs":{},"恢":{"docs":{},"复":{"docs":{},"树":{"docs":{},"的":{"docs":{},"形":{"docs":{},"状":{"docs":{},"）":{"docs":{},"。":{"docs":{},"输":{"docs":{},"出":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"更":{"docs":{},"新":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"。":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"空":{"docs":{},"，":{"docs":{},"将":{"docs":{},"它":{"docs":{},"的":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"设":{"docs":{},"置":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"更":{"docs":{},"新":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"。":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"在":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"在":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"下":{"docs":{},"的":{"docs":{},"前":{"docs":{},"驱":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"则":{"docs":{},"输":{"docs":{},"出":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"并":{"docs":{},"将":{"docs":{},"其":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"作":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"做":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"会":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"会":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"浅":{"docs":{},"的":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"用":{"docs":{},"广":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"会":{"docs":{},"返":{"docs":{},"回":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"降":{"docs":{},"低":{"docs":{},"很":{"docs":{},"多":{"docs":{},"的":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"应":{"docs":{},"该":{"docs":{},"也":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"下":{"docs":{},"一":{"docs":{},"天":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"比":{"docs":{},"今":{"docs":{},"天":{"docs":{},"高":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"直":{"docs":{},"接":{"docs":{},"把":{"docs":{},"利":{"docs":{},"润":{"docs":{},"加":{"docs":{},"上":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"之":{"docs":{},"后":{"docs":{},"价":{"docs":{},"格":{"docs":{},"持":{"docs":{},"续":{"docs":{},"走":{"docs":{},"高":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"先":{"docs":{},"不":{"docs":{},"加":{"docs":{},"利":{"docs":{},"润":{"docs":{},"，":{"docs":{},"一":{"docs":{},"直":{"docs":{},"往":{"docs":{},"后":{"docs":{},"看":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"最":{"docs":{},"高":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"用":{"docs":{},"最":{"docs":{},"高":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"减":{"docs":{},"去":{"docs":{},"最":{"docs":{},"低":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"，":{"docs":{},"这":{"docs":{},"是":{"docs":{},"利":{"docs":{},"润":{"docs":{},"增":{"docs":{},"益":{"docs":{},"。":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"题":{"docs":{},"是":{"docs":{},"求":{"docs":{},"出":{"docs":{},"最":{"docs":{},"左":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"按":{"docs":{},"照":{"docs":{},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"先":{"docs":{},"根":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"得":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"199.-Binary-Tree-Right-Side-View.html":{"ref":"199.-Binary-Tree-Right-Side-View.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.008298755186721992}}}}}}},"不":{"docs":{},"加":{"docs":{},"记":{"docs":{},"忆":{"docs":{},"模":{"docs":{},"式":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"就":{"docs":{},"跟":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"加":{"docs":{},"了":{"docs":{},"记":{"docs":{},"忆":{"docs":{},"模":{"docs":{},"式":{"docs":{},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"快":{"docs":{},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"这":{"docs":{},"里":{"docs":{},"不":{"docs":{},"好":{"docs":{},"分":{"docs":{},"析":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"何":{"docs":{},"证":{"docs":{},"明":{"docs":{},"这":{"docs":{},"里":{"docs":{},"不":{"docs":{},"会":{"docs":{},"将":{"docs":{},"超":{"docs":{},"过":{"1":{"docs":{},"/":{"3":{"docs":{},"的":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"排":{"docs":{},"除":{"docs":{},"呢":{"docs":{},"？":{"docs":{"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"处":{"docs":{},"理":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"之":{"docs":{},"前":{"docs":{},"也":{"docs":{},"总":{"docs":{},"结":{"docs":{},"了":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"几":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"。":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"，":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"一":{"docs":{},"些":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"字":{"docs":{},"典":{"docs":{},"树":{"docs":{},"等":{"docs":{},"等":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"看":{"docs":{},"到":{"docs":{},"题":{"docs":{},"目":{"docs":{},"找":{"docs":{},"不":{"docs":{},"到":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"做":{"docs":{},"过":{"docs":{},"类":{"docs":{},"似":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"使":{"docs":{},"用":{"docs":{},"这":{"docs":{},"几":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"试":{"docs":{},"试":{"docs":{},"。":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"这":{"docs":{},"题":{"docs":{},"其":{"docs":{},"实":{"docs":{},"和":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"串":{"docs":{},"问":{"docs":{},"题":{"docs":{},"很":{"docs":{},"像":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"比":{"docs":{},"较":{"docs":{},"中":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"大":{"docs":{},"小":{"docs":{},"差":{"docs":{},"不":{"docs":{},"多":{"docs":{},"可":{"docs":{},"能":{"docs":{},"需":{"docs":{},"要":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"如":{"docs":{},"果":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"平":{"docs":{},"均":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"m":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"平":{"docs":{},"均":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"n":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},"*":{"docs":{},"m":{"docs":{},")":{"docs":{"179.-Largest-Number.html":{"ref":"179.-Largest-Number.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"典":{"docs":{},"树":{"docs":{},"的":{"docs":{},"时":{"docs":{},"空":{"docs":{},"分":{"docs":{},"析":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"前":{"docs":{},"面":{"docs":{},"几":{"docs":{},"个":{"docs":{},"文":{"docs":{},"章":{"docs":{},"介":{"docs":{},"绍":{"docs":{},"了":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"得":{"docs":{},"到":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"次":{"docs":{},"数":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"我":{"docs":{},"们":{"docs":{},"知":{"docs":{},"道":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{},"r":{"docs":{},"o":{"docs":{},")":{"docs":{},"三":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"设":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{"72.-edit-distance.html":{"ref":"72.-edit-distance.html","tf":0.007751937984496124}}},"docs":{}}}}},"是":{"docs":{},"s":{"1":{"docs":{},"长":{"docs":{},"m":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{},"长":{"docs":{},"n":{"docs":{},"，":{"docs":{},"会":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"个":{"docs":{},"m":{"docs":{},"*":{"docs":{},"n":{"docs":{},"的":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},",":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"*":{"docs":{},"n":{"docs":{},")":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}},"s":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"m":{"docs":{},",":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"n":{"docs":{},",":{"docs":{},"每":{"docs":{},"个":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"平":{"docs":{},"均":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"docs":{},"k":{"docs":{},",":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{},"n":{"docs":{},"k":{"docs":{},")":{"docs":{"139.-Word-Break.html":{"ref":"139.-Word-Break.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"能":{"docs":{},"否":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"的":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"标":{"docs":{},"志":{"docs":{},"位":{"docs":{},"标":{"docs":{},"志":{"0":{"docs":{},"，":{"1":{"docs":{},"的":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"。":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"交":{"docs":{},"换":{"docs":{},"到":{"0":{"docs":{},"的":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"交":{"docs":{},"换":{"docs":{},"到":{"1":{"docs":{},"的":{"docs":{},"末":{"docs":{},"尾":{"docs":{"75.-sort-colors.html":{"ref":"75.-sort-colors.html","tf":0.009433962264150943}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"产":{"docs":{},"生":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"做":{"docs":{},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"题":{"docs":{},"目":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"需":{"docs":{},"要":{"docs":{},"求":{"docs":{},"连":{"docs":{},"续":{"docs":{},"序":{"docs":{},"列":{"docs":{},"满":{"docs":{},"足":{"docs":{},"一":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"能":{"docs":{},"用":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"前":{"docs":{},"一":{"docs":{},"后":{"docs":{},"指":{"docs":{},"针":{"docs":{},"代":{"docs":{},"表":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"。":{"docs":{"76.-minimum-window-substring.html":{"ref":"76.-minimum-window-substring.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"类":{"docs":{},"似":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"得":{"docs":{},"到":{"docs":{},"组":{"docs":{},"合":{"docs":{},"，":{"docs":{},"只":{"docs":{},"不":{"docs":{},"过":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"得":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"改":{"docs":{},"变":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"中":{"docs":{},"，":{"docs":{},"将":{"docs":{},"中":{"docs":{},"间":{"docs":{},"结":{"docs":{},"果":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"到":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"在":{"docs":{},"进":{"docs":{},"入":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"就":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"在":{"docs":{},"递":{"docs":{},"归":{"docs":{},"基":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"能":{"docs":{},"到":{"docs":{},"达":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"效":{"docs":{},"果":{"docs":{},"。":{"docs":{"78.-subsets.html":{"ref":"78.-subsets.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.00980392156862745}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"安":{"docs":{},"放":{"docs":{},"数":{"docs":{},"字":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"也":{"docs":{},"很":{"docs":{},"像":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"构":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{},"排":{"docs":{},"列":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"只":{"docs":{},"是":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"需":{"docs":{},"要":{"docs":{},"列":{"docs":{},"举":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"多":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"一":{"docs":{},"点":{"docs":{},"是":{"docs":{},"，":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"限":{"docs":{},"制":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"需":{"docs":{},"要":{"docs":{},"记":{"docs":{},"录":{"docs":{},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"字":{"docs":{},"之":{"docs":{},"前":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"多":{"docs":{},"少":{"docs":{},"次":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"超":{"docs":{},"过":{"docs":{},"了":{"docs":{},"限":{"docs":{},"制":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"次":{"docs":{},"安":{"docs":{},"放":{"docs":{},"就":{"docs":{},"不":{"docs":{},"安":{"docs":{},"放":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"中":{"docs":{},"，":{"docs":{},"会":{"docs":{},"出":{"docs":{},"现":{"docs":{},"很":{"docs":{},"多":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"最":{"docs":{},"后":{"docs":{},"会":{"docs":{},"汇":{"docs":{},"聚":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"用":{"docs":{},"记":{"docs":{},"忆":{"docs":{},"化":{"docs":{},"方":{"docs":{},"法":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"会":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"下":{"docs":{},"午":{"docs":{},"上":{"docs":{},"课":{"docs":{},"忽":{"docs":{},"然":{"docs":{},"想":{"docs":{},"通":{"docs":{},"了":{"docs":{},"中":{"docs":{},"午":{"docs":{},"异":{"docs":{},"或":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"我":{"docs":{},"中":{"docs":{},"午":{"docs":{},"出":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"是":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"^":{"docs":{},"=":{"1":{"docs":{},".":{"docs":{},"大":{"docs":{},"家":{"docs":{},"应":{"docs":{},"该":{"docs":{},"都":{"docs":{},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"是":{"1":{"docs":{},"个":{"docs":{},"字":{"docs":{},"节":{"docs":{},"的":{"docs":{},"，":{"docs":{},"有":{"8":{"docs":{},"位":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"数":{"docs":{},"字":{"1":{"docs":{},"是":{"0":{"0":{"0":{"0":{"0":{"0":{"1":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"异":{"docs":{},"或":{"docs":{},"之":{"docs":{},"后":{"docs":{},"只":{"docs":{},"有":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"会":{"docs":{},"改":{"docs":{},"变":{"docs":{},"。":{"docs":{},"只":{"docs":{},"改":{"docs":{},"变":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"很":{"docs":{},"容":{"docs":{},"易":{"docs":{},"导":{"docs":{},"致":{"docs":{},"异":{"docs":{},"或":{"docs":{},"之":{"docs":{},"后":{"docs":{},"和":{"docs":{},"其":{"docs":{},"他":{"docs":{},"字":{"docs":{},"符":{"docs":{},"相":{"docs":{},"同":{"docs":{},"。":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"面":{"docs":{},"给":{"docs":{},"出":{"docs":{},"两":{"docs":{},"种":{"docs":{},"代":{"docs":{},"码":{"docs":{"132.-Palindrome-Partitioning-II.html":{"ref":"132.-Palindrome-Partitioning-II.html","tf":0.0125}}}}}}}}}},"思":{"docs":{},"路":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"都":{"docs":{},"类":{"docs":{},"似":{"docs":{},"一":{"docs":{},"种":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"法":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"从":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"开":{"docs":{},"始":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"对":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"从":{"docs":{},"这":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"4":{"docs":{},"个":{"docs":{},"方":{"docs":{},"向":{"docs":{},"继":{"docs":{},"续":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"都":{"docs":{},"有":{"4":{"docs":{},"个":{"docs":{},"分":{"docs":{},"量":{"docs":{},"。":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"不":{"docs":{},"能":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"到":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"我":{"docs":{},"这":{"docs":{},"里":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"完":{"docs":{},"，":{"docs":{},"我":{"docs":{},"去":{"docs":{},"我":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"我":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"不":{"docs":{},"能":{"docs":{},"再":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"这":{"docs":{},"个":{"docs":{},"原":{"docs":{},"来":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"了":{"docs":{},"。":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"以":{"docs":{},"想":{"docs":{},"通":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"将":{"docs":{},"代":{"docs":{},"码":{"docs":{},"改":{"docs":{},"为":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"^":{"docs":{},"=":{"2":{"5":{"5":{"docs":{},"就":{"docs":{},"稳":{"docs":{},"稳":{"docs":{},"的":{"docs":{},"过":{"docs":{},"了":{"docs":{},"。":{"docs":{},"（":{"2":{"5":{"5":{"docs":{},"=":{"1":{"1":{"1":{"1":{"1":{"1":{"1":{"1":{"docs":{},"）":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"成":{"docs":{},"是":{"docs":{},"下":{"docs":{},"面":{"6":{"docs":{},"项":{"docs":{},"相":{"docs":{},"加":{"docs":{"1223.-dice-roll-simulation.html":{"ref":"1223.-dice-roll-simulation.html","tf":0.005434782608695652}}}}}},"docs":{}}}}}}}}}}}}}}},"有":{"docs":{},"操":{"docs":{},"作":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{"155.-Min-Stack.html":{"ref":"155.-Min-Stack.html","tf":0.008130081300813009}}}}},"docs":{}}}}}}}}}}}}}},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"用":{"docs":{},"标":{"docs":{},"志":{"docs":{},"，":{"docs":{},"显":{"docs":{},"示":{"docs":{},"这":{"docs":{},"里":{"docs":{},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"了":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"将":{"docs":{},"当":{"docs":{},"前":{"docs":{},"字":{"docs":{},"符":{"docs":{},"设":{"docs":{},"置":{"docs":{},"为":{"0":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"之":{"docs":{},"后":{"docs":{},"肯":{"docs":{},"的":{"docs":{},"和":{"docs":{},"他":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"不":{"docs":{},"了":{"docs":{},"了":{"docs":{},"。":{"docs":{"79.-word-search.html":{"ref":"79.-word-search.html","tf":0.006493506493506494}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"大":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"进":{"docs":{},"行":{"3":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"对":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"进":{"docs":{},"行":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"85.-maximal-rectangle.html":{"ref":"85.-maximal-rectangle.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"本":{"docs":{},"来":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"变":{"docs":{},"体":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"有":{"docs":{},"个":{"docs":{},"对":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"的":{"docs":{},"预":{"docs":{},"处":{"docs":{},"理":{"docs":{},"，":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"会":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"81.-search-in-rotated-sorted-array-ii.html":{"ref":"81.-search-in-rotated-sorted-array-ii.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"题":{"docs":{},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"解":{"docs":{},"决":{"docs":{},"办":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"每":{"docs":{},"次":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"就":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"238.-Product-of-Array-Except-Self.html":{"ref":"238.-Product-of-Array-Except-Self.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"质":{"docs":{},"是":{"docs":{},"树":{"docs":{},"的":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"对":{"docs":{},"称":{"docs":{},"的":{"docs":{},"。":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"需":{"docs":{},"要":{"docs":{},"用":{"docs":{},"到":{"docs":{},"队":{"docs":{},"列":{"docs":{},"来":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"得":{"docs":{},"到":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"对":{"docs":{},"称":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"对":{"docs":{},"于":{"docs":{},"这":{"docs":{},"题":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"个":{"docs":{},"技":{"docs":{},"巧":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"采":{"docs":{},"取":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"策":{"docs":{},"略":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"访":{"docs":{},"问":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"先":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"左":{"docs":{},"及":{"docs":{},"节":{"docs":{},"点":{"docs":{},"再":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"先":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"右":{"docs":{},"再":{"docs":{},"左":{"docs":{},"。":{"docs":{},"这":{"docs":{},"样":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"从":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"拿":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"出":{"docs":{},"来":{"docs":{},"，":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"刚":{"docs":{},"好":{"docs":{},"都":{"docs":{},"是":{"docs":{},"对":{"docs":{},"称":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"判":{"docs":{},"断":{"docs":{},"它":{"docs":{},"们":{"docs":{},"是":{"docs":{},"否":{"docs":{},"一":{"docs":{},"样":{"docs":{},"就":{"docs":{},"行":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"继":{"docs":{},"续":{"docs":{},"运":{"docs":{},"行":{"docs":{},"。":{"docs":{"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"又":{"docs":{},"是":{"docs":{},"链":{"docs":{},"表":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"做":{"docs":{},"链":{"docs":{},"表":{"docs":{},"题":{"docs":{},"一":{"docs":{},"样":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"形":{"docs":{},"式":{"docs":{},"解":{"docs":{},"决":{"docs":{"82.-remove-duplicates-from-sorted-list-ii.html":{"ref":"82.-remove-duplicates-from-sorted-list-ii.html","tf":0.008928571428571428}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"\\":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.07407407407407407},"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291},"95.-unique-binary-search-trees-ii.html":{"ref":"95.-unique-binary-search-trees-ii.html","tf":0.030120481927710843},"96.-unique-binary-search-trees.html":{"ref":"96.-unique-binary-search-trees.html","tf":0.060240963855421686},"98.-validate-binary-search-tree.html":{"ref":"98.-validate-binary-search-tree.html","tf":0.02040816326530612},"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.025157232704402517},"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.037037037037037035},"101.-symmetric-tree.html":{"ref":"101.-symmetric-tree.html","tf":0.044444444444444446},"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.015503875968992248},"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.007547169811320755},"104.-maximum-depth-of-binary-tree.html":{"ref":"104.-maximum-depth-of-binary-tree.html","tf":0.0196078431372549},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.01694915254237288},"108.-convert-sorted-array-to-binary-search-tree.html":{"ref":"108.-convert-sorted-array-to-binary-search-tree.html","tf":0.007751937984496124},"110.-balanced-binary-tree.html":{"ref":"110.-balanced-binary-tree.html","tf":0.036231884057971016},"111.-minimum-depth-of-binary-tree.html":{"ref":"111.-minimum-depth-of-binary-tree.html","tf":0.014492753623188406},"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.030303030303030304},"113.-path-sum-ii.html":{"ref":"113.-path-sum-ii.html","tf":0.0273972602739726},"114.-flatten-binary-tree-to-linked-list.html":{"ref":"114.-flatten-binary-tree-to-linked-list.html","tf":0.06557377049180328},"124.-Binary-Tree-Maximum-Path-Sum.html":{"ref":"124.-Binary-Tree-Maximum-Path-Sum.html","tf":0.020833333333333332},"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.012},"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357},"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364},"222.-Count-Complete-Tree-Nodes.html":{"ref":"222.-Count-Complete-Tree-Nodes.html","tf":0.0125},"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.04225352112676056},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.024691358024691357},"662.-maximum-width-of-binary-tree.html":{"ref":"662.-maximum-width-of-binary-tree.html","tf":0.03319502074688797}}},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"进":{"docs":{},"行":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"左":{"docs":{},"边":{"docs":{},"和":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"左":{"docs":{},"边":{"docs":{},"是":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"和":{"docs":{},"右":{"docs":{},"边":{"docs":{},"是":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"。":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"docs":{},"，":{"docs":{},"左":{"docs":{},"右":{"docs":{},"，":{"docs":{},"右":{"docs":{},"左":{"docs":{},"是":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"话":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"就":{"docs":{},"是":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"剪":{"docs":{},"枝":{"docs":{},"加":{"docs":{},"快":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"判":{"docs":{},"断":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"否":{"docs":{},"包":{"docs":{},"含":{"docs":{},"同":{"docs":{},"样":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"包":{"docs":{},"含":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{},"虽":{"docs":{},"然":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"能":{"docs":{},"剪":{"docs":{},"去":{"docs":{},"很":{"docs":{},"多":{"docs":{},"分":{"docs":{},"支":{"docs":{},"，":{"docs":{},"是":{"docs":{},"值":{"docs":{},"得":{"docs":{},"的":{"docs":{},"。":{"docs":{"87.-scramble-string.html":{"ref":"87.-scramble-string.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"合":{"docs":{},"并":{"docs":{},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"这":{"docs":{},"也":{"docs":{},"是":{"docs":{},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"中":{"docs":{},"必":{"docs":{},"不":{"docs":{},"可":{"docs":{},"少":{"docs":{},"的":{"docs":{},"一":{"docs":{},"步":{"docs":{},"，":{"docs":{},"如":{"docs":{},"何":{"docs":{},"做":{"docs":{},"好":{"docs":{},"这":{"docs":{},"一":{"docs":{},"步":{"docs":{},"，":{"docs":{},"速":{"docs":{},"度":{"docs":{},"快":{"docs":{},"并":{"docs":{},"且":{"docs":{},"不":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"有":{"docs":{},"点":{"docs":{},"难":{"docs":{},"度":{"docs":{},"的":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"一":{"docs":{},"般":{"docs":{},"是":{"docs":{},"将":{"docs":{},"前":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"数":{"docs":{},"组":{"docs":{},"复":{"docs":{},"制":{"docs":{},"，":{"docs":{},"后":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"将":{"docs":{},"后":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"数":{"docs":{},"组":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"，":{"docs":{},"前":{"docs":{},"半":{"docs":{},"部":{"docs":{},"分":{"docs":{},"保":{"docs":{},"存":{"docs":{},"下":{"docs":{},"来":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"尽":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"利":{"docs":{},"用":{"docs":{},"前":{"docs":{},"面":{"docs":{},"保":{"docs":{},"存":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"能":{"docs":{},"不":{"docs":{},"改":{"docs":{},"变":{"docs":{},"就":{"docs":{},"不":{"docs":{},"改":{"docs":{},"变":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"从":{"docs":{},"后":{"docs":{},"往":{"docs":{},"前":{"docs":{},"合":{"docs":{},"并":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"已":{"docs":{},"经":{"docs":{},"用":{"docs":{},"完":{"docs":{},"了":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"就":{"docs":{},"能":{"docs":{},"直":{"docs":{},"接":{"docs":{},"使":{"docs":{},"用":{"docs":{},"了":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"改":{"docs":{},"变":{"docs":{},"。":{"docs":{"88.-merge-sorted-array.html":{"ref":"88.-merge-sorted-array.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"≤":{"docs":{"92.-reverse-linked-list-ii.html":{"ref":"92.-reverse-linked-list-ii.html","tf":0.024},"230.-Kth-Smallest-Element-in-a-BST.html":{"ref":"230.-Kth-Smallest-Element-in-a-BST.html","tf":0.012345679012345678},"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.012195121951219513}}},"步":{"docs":{},"骤":{"docs":{},"是":{"docs":{},"：":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}},"递":{"docs":{},"归":{"docs":{},"写":{"docs":{},"法":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"按":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"访":{"docs":{},"问":{"docs":{},"就":{"docs":{},"行":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"写":{"docs":{},"法":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"首":{"docs":{},"先":{"docs":{},"要":{"docs":{},"明":{"docs":{},"白":{"docs":{},"我":{"docs":{},"们":{"docs":{},"访":{"docs":{},"问":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"先":{"docs":{},"左":{"docs":{},"，":{"docs":{},"后":{"docs":{},"中":{"docs":{},"再":{"docs":{},"右":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"保":{"docs":{},"存":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"没":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"将":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"一":{"docs":{},"直":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"进":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"顶":{"docs":{},"上":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"就":{"docs":{},"能":{"docs":{},"访":{"docs":{},"问":{"docs":{},"了":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"于":{"docs":{},"这":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"把":{"docs":{},"它":{"docs":{},"当":{"docs":{},"做":{"docs":{},"一":{"docs":{},"个":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"，":{"docs":{},"继":{"docs":{},"续":{"docs":{},"运":{"docs":{},"行":{"docs":{},"一":{"docs":{},"遍":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"就":{"docs":{},"不":{"docs":{},"说":{"docs":{},"了":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"还":{"docs":{},"是":{"docs":{},"不":{"docs":{},"好":{"docs":{},"理":{"docs":{},"解":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"但":{"docs":{},"是":{"docs":{},"换":{"docs":{},"种":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"先":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"先":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"版":{"docs":{},"本":{"docs":{},"。":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{},"分":{"docs":{},"析":{"docs":{},"和":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"上":{"docs":{},"面":{"3":{"docs":{},"中":{"docs":{},"方":{"docs":{},"法":{"docs":{},"从":{"docs":{},"上":{"docs":{},"到":{"docs":{},"下":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"越":{"docs":{},"来":{"docs":{},"越":{"docs":{},"好":{"docs":{},"的":{"docs":{},"。":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"对":{"docs":{},"于":{"docs":{},"递":{"docs":{},"归":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"减":{"docs":{},"少":{"docs":{},"了":{"docs":{},"函":{"docs":{},"数":{"docs":{},"栈":{"docs":{},"开":{"docs":{},"销":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"空":{"docs":{},"间":{"docs":{},"用":{"docs":{},"的":{"docs":{},"少":{"docs":{},"一":{"docs":{},"点":{"docs":{},"。":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"对":{"docs":{},"于":{"docs":{},"上":{"docs":{},"面":{"docs":{},"两":{"docs":{},"中":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"只":{"docs":{},"用":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"空":{"docs":{},"间":{"docs":{},"是":{"docs":{},"用":{"docs":{},"的":{"docs":{},"最":{"docs":{},"少":{"docs":{},"的":{"docs":{},"。":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"以":{"docs":{},"上":{"1":{"docs":{},"、":{"2":{"docs":{},"直":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{"94.-binary-tree-inorder-traversal.html":{"ref":"94.-binary-tree-inorder-traversal.html","tf":0.005291005291005291}}}}}}}}}}}},"docs":{}}},"docs":{}}}}},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"方":{"docs":{},"程":{"docs":{},"得":{"docs":{},"出":{"docs":{},"：":{"docs":{},"对":{"docs":{},"于":{"docs":{},"a":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"c":{"docs":{},"和":{"docs":{},"d":{"docs":{},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"a":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{"97.-interleaving-string.html":{"ref":"97.-interleaving-string.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"已":{"docs":{},"知":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"中":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"是":{"docs":{},"错":{"docs":{},"的":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"找":{"docs":{},"到":{"docs":{},"两":{"docs":{},"个":{"docs":{},"错":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"就":{"docs":{},"行":{"docs":{},"。":{"docs":{},"还":{"docs":{},"是":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"不":{"docs":{},"是":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"增":{"docs":{},"长":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{},"记":{"docs":{},"录":{"docs":{},"下":{"docs":{},"来":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"交":{"docs":{},"换":{"docs":{},"两":{"docs":{},"个":{"docs":{},"的":{"docs":{},"值":{"docs":{"99.-recover-binary-search-tree.html":{"ref":"99.-recover-binary-search-tree.html","tf":0.006289308176100629}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"树":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"判":{"docs":{},"断":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"分":{"docs":{},"别":{"docs":{},"进":{"docs":{},"行":{"docs":{},"同":{"docs":{},"样":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"。":{"docs":{"100.-same-tree.html":{"ref":"100.-same-tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"才":{"docs":{},"能":{"docs":{},"知":{"docs":{},"道":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"值":{"docs":{},"是":{"docs":{},"多":{"docs":{},"少":{"docs":{},"。":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"信":{"docs":{},"息":{"docs":{},"传":{"docs":{},"入":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"传":{"docs":{},"递":{"docs":{},"一":{"docs":{},"种":{"docs":{},"是":{"docs":{},"直":{"docs":{},"接":{"docs":{},"改":{"docs":{},"变":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"改":{"docs":{},"将":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"值":{"docs":{},"加":{"docs":{},"到":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"用":{"docs":{},"参":{"docs":{},"数":{"docs":{},"传":{"docs":{},"递":{"docs":{},"。":{"docs":{"129.-Sum-Root-to-Leaf-Numbers.html":{"ref":"129.-Sum-Root-to-Leaf-Numbers.html","tf":0.004}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"算":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"关":{"docs":{},"键":{"docs":{},"是":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"和":{"docs":{},"使":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"但":{"docs":{},"是":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"算":{"docs":{},"法":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"了":{"docs":{},"大":{"docs":{},"量":{"docs":{},"的":{"docs":{},"空":{"docs":{},"闲":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"树":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"102.-binary-tree-level-order-traversal.html":{"ref":"102.-binary-tree-level-order-traversal.html","tf":0.007751937984496124}}}}}}}}}}}}}},"遍":{"docs":{},"树":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"226.-Invert-Binary-Tree.html":{"ref":"226.-Invert-Binary-Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"103.-binary-tree-zigzag-level-order-traversal.html":{"ref":"103.-binary-tree-zigzag-level-order-traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"112.-path-sum.html":{"ref":"112.-path-sum.html","tf":0.007575757575757576}}}}}}}}}}}}}},"了":{"docs":{},"很":{"docs":{},"多":{"docs":{},"次":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"用":{"docs":{},"额":{"docs":{},"外":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"160.-Intersection-of-Two-Linked-Lists.html":{"ref":"160.-Intersection-of-Two-Linked-Lists.html","tf":0.0025906735751295338}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"解":{"3":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"组":{"docs":{},"合":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}}}}}}}},"docs":{}}}}},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"和":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"转":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"利":{"docs":{},"用":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"值":{"docs":{},"就":{"docs":{},"是":{"docs":{},"当":{"docs":{},"前":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"。":{"docs":{},"找":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"去":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"位":{"docs":{},"置":{"docs":{},"左":{"docs":{},"边":{"docs":{},"就":{"docs":{},"是":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"右":{"docs":{},"边":{"docs":{},"是":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"于":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"，":{"docs":{},"去":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"他":{"docs":{},"们":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"于":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"ref":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"和":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"得":{"docs":{},"到":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"本":{"docs":{},"质":{"docs":{},"和":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"没":{"docs":{},"区":{"docs":{},"别":{"docs":{},"。":{"docs":{},"只":{"docs":{},"是":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"出":{"docs":{},"现":{"docs":{},"在":{"docs":{},"最":{"docs":{},"后":{"docs":{},"面":{"docs":{},"。":{"docs":{},"将":{"docs":{},"前":{"docs":{},"一":{"docs":{},"题":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"修":{"docs":{},"改":{"docs":{},"下":{"docs":{},"即":{"docs":{},"可":{"docs":{"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"ref":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"^":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.033707865168539325}},"^":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.033707865168539325}},"^":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.016853932584269662}},"^":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.011235955056179775}}}}}},"做":{"docs":{},"多":{"docs":{},"了":{"docs":{},"题":{"docs":{},"目":{"docs":{},"之":{"docs":{},"后":{"docs":{},"会":{"docs":{},"有":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"，":{"docs":{},"这":{"docs":{},"题":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"解":{"docs":{},"决":{"docs":{},"没":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"就":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"问":{"docs":{},"题":{"docs":{},"想":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"已":{"docs":{},"经":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"完":{"docs":{},"毕":{"docs":{},"，":{"docs":{},"s":{"docs":{},"串":{"docs":{},"加":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"这":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"和":{"docs":{},"t":{"docs":{},"串":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"不":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"。":{"docs":{},"没":{"docs":{},"有":{"docs":{},"事":{"docs":{},"情":{"docs":{},"发":{"docs":{},"生":{"docs":{},"，":{"docs":{},"总":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"数":{"docs":{},"依":{"docs":{},"然":{"docs":{},"是":{"docs":{},"没":{"docs":{},"加":{"docs":{},"入":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"s":{"docs":{},"串":{"docs":{},"和":{"docs":{},"去":{"docs":{},"掉":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"t":{"docs":{},"串":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"加":{"docs":{},"上":{"docs":{},"之":{"docs":{},"前":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"题":{"docs":{},"之":{"docs":{},"前":{"docs":{},"，":{"docs":{},"我":{"docs":{},"一":{"docs":{},"直":{"docs":{},"没":{"docs":{},"有":{"docs":{},"真":{"docs":{},"正":{"docs":{},"理":{"docs":{},"解":{"docs":{},"k":{"docs":{},"m":{"docs":{},"p":{"docs":{},"。":{"docs":{},"只":{"docs":{},"是":{"docs":{},"会":{"docs":{},"用":{"docs":{},"k":{"docs":{},"m":{"docs":{},"p":{"docs":{},"，":{"docs":{},"知":{"docs":{},"道":{"docs":{},"他":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"算":{"docs":{},"法":{"docs":{},"。":{"docs":{},"k":{"docs":{},"m":{"docs":{},"p":{"docs":{},"中":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"最":{"docs":{},"后":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"表":{"docs":{},"明":{"docs":{},"的":{"docs":{},"是":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"最":{"docs":{},"前":{"docs":{},"面":{"docs":{},"一":{"docs":{},"段":{"docs":{},"和":{"docs":{},"被":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"段":{"docs":{},"的":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"用":{"docs":{},"在":{"docs":{},"这":{"docs":{},"里":{"docs":{},"，":{"docs":{},"恰":{"docs":{},"恰":{"docs":{},"合":{"docs":{},"适":{"docs":{},"。":{"docs":{},"将":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"出":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"前":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"再":{"docs":{},"将":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"加":{"docs":{},"到":{"docs":{},"原":{"docs":{},"来":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"前":{"docs":{},"面":{"docs":{},"即":{"docs":{},"可":{"docs":{"214.-Shortest-Palindrome.html":{"ref":"214.-Shortest-Palindrome.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"原":{"docs":{},"始":{"docs":{},"版":{"docs":{},"本":{"docs":{},"是":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"版":{"docs":{},"本":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"。":{"docs":{},"优":{"docs":{},"化":{"docs":{},"后":{"docs":{},"的":{"docs":{},"版":{"docs":{},"本":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"到":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{},"不":{"docs":{},"仅":{"docs":{},"如":{"docs":{},"此":{"docs":{},"，":{"docs":{},"其":{"docs":{},"时":{"docs":{},"间":{"docs":{},"也":{"docs":{},"会":{"docs":{},"降":{"docs":{},"低":{"docs":{"115.-distinct-subsequences.html":{"ref":"115.-distinct-subsequences.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"帕":{"docs":{},"斯":{"docs":{},"卡":{"docs":{},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{},"，":{"docs":{},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{},"面":{"docs":{},"积":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"的":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"点":{"docs":{},"都":{"docs":{},"要":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"118.-pascals-triangle.html":{"ref":"118.-pascals-triangle.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"时":{"docs":{},"间":{"docs":{},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"求":{"docs":{},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{},"问":{"docs":{},"题":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"120.-triangle.html":{"ref":"120.-triangle.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"能":{"docs":{},"买":{"docs":{},"一":{"docs":{},"次":{"docs":{},"商":{"docs":{},"品":{"docs":{},"，":{"docs":{},"一":{"docs":{},"次":{"docs":{},"交":{"docs":{},"易":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"我":{"docs":{},"们":{"docs":{},"从":{"docs":{},"第":{"docs":{},"一":{"docs":{},"天":{"docs":{},"开":{"docs":{},"始":{"docs":{},"买":{"docs":{},"商":{"docs":{},"品":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"天":{"docs":{},"必":{"docs":{},"须":{"docs":{},"买":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"次":{"docs":{},"机":{"docs":{},"会":{"docs":{},"。":{"docs":{},"到":{"docs":{},"了":{"docs":{},"第":{"docs":{},"二":{"docs":{},"天":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"第":{"docs":{},"二":{"docs":{},"天":{"docs":{},"比":{"docs":{},"第":{"docs":{},"一":{"docs":{},"天":{"docs":{},"贵":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"得":{"docs":{},"到":{"docs":{},"利":{"docs":{},"润":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"第":{"docs":{},"二":{"docs":{},"天":{"docs":{},"比":{"docs":{},"第":{"docs":{},"一":{"docs":{},"天":{"docs":{},"便":{"docs":{},"宜":{"docs":{},"，":{"docs":{},"那":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"第":{"docs":{},"二":{"docs":{},"天":{"docs":{},"再":{"docs":{},"买":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"转":{"docs":{},"化":{"docs":{},"成":{"docs":{},"代":{"docs":{},"码":{"docs":{},"的":{"docs":{},"意":{"docs":{},"思":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"都":{"docs":{},"记":{"docs":{},"录":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"当":{"docs":{},"做":{"docs":{},"我":{"docs":{},"们":{"docs":{},"购":{"docs":{},"买":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"都":{"docs":{},"用":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"减":{"docs":{},"去":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"的":{"docs":{},"利":{"docs":{},"润":{"docs":{},"。":{"docs":{"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"ref":"121.-Best-Time-to-Buy-and-Sell-Stock.html","tf":0.008547008547008548}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"保":{"docs":{},"存":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"也":{"docs":{},"是":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"ref":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","tf":0.005813953488372093}}}}}}}}}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"是":{"docs":{},"判":{"docs":{},"断":{"docs":{},"回":{"docs":{},"文":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"这":{"docs":{},"个":{"docs":{},"和":{"docs":{},"复":{"docs":{},"制":{"docs":{},"相":{"docs":{},"比":{"docs":{},"就":{"docs":{},"很":{"docs":{},"小":{"docs":{},"。":{"docs":{},"下":{"docs":{},"一":{"docs":{},"题":{"docs":{},"我":{"docs":{},"么":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"显":{"docs":{},"然":{"docs":{},"更":{"docs":{},"好":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"规":{"docs":{},"定":{"docs":{},"了":{"docs":{},"m":{"docs":{},"a":{"docs":{},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}}}}}}}}},"空":{"docs":{},"间":{"docs":{},"太":{"docs":{},"多":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"每":{"docs":{},"次":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"都":{"docs":{},"需":{"docs":{},"要":{"docs":{},"复":{"docs":{},"制":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"太":{"docs":{},"慢":{"docs":{},"了":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"后":{"docs":{},"面":{"docs":{},"看":{"docs":{},"到":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"使":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"做":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"。":{"docs":{},"发":{"docs":{},"现":{"docs":{},"其":{"docs":{},"实":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"也":{"docs":{},"不":{"docs":{},"会":{"docs":{},"太":{"docs":{},"慢":{"docs":{},"。":{"docs":{},"确":{"docs":{},"实":{"docs":{},"，":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"在":{"docs":{},"这":{"docs":{},"里":{"docs":{},"会":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"数":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"相":{"docs":{},"比":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"的":{"docs":{},"复":{"docs":{},"制":{"docs":{},"一":{"docs":{},"整":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"整":{"docs":{},"个":{"docs":{},"速":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"提":{"docs":{},"高":{"docs":{},"了":{"docs":{},"。":{"docs":{"131.-Palindrome-Partitioning.html":{"ref":"131.-Palindrome-Partitioning.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},":":{"docs":{"216.-Combination-Sum-III.html":{"ref":"216.-Combination-Sum-III.html","tf":0.009174311926605505}}}}}}}},"加":{"docs":{},"入":{"docs":{},"备":{"docs":{},"忘":{"docs":{},"录":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"能":{"docs":{},"减":{"docs":{},"少":{"docs":{},"很":{"docs":{},"多":{"docs":{},"额":{"docs":{},"外":{"docs":{},"计":{"docs":{},"算":{"docs":{},"了":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}},"计":{"docs":{},"算":{"3":{"docs":{},"的":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"是":{"9":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"是":{"1":{"2":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"是":{"1":{"5":{"docs":{},"以":{"docs":{},"此":{"docs":{},"类":{"docs":{},"推":{"docs":{},"，":{"docs":{},"都":{"docs":{},"不":{"docs":{},"是":{"docs":{},"质":{"docs":{},"数":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"排":{"docs":{},"除":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"好":{"docs":{},"像":{"docs":{},"还":{"docs":{},"是":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"1":{"2":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}},"docs":{}},"docs":{}}}}}},"docs":{}}}}}}}}},"docs":{},"结":{"docs":{},"果":{"docs":{},"需":{"docs":{},"要":{"docs":{},"用":{"docs":{},"到":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"单":{"docs":{},"纯":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"在":{"docs":{},"这":{"docs":{},"里":{"docs":{},"太":{"docs":{},"慢":{"docs":{},"了":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"可":{"docs":{},"以":{"docs":{},"加":{"docs":{},"入":{"docs":{},"一":{"docs":{},"种":{"docs":{},"备":{"docs":{},"忘":{"docs":{},"录":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"类":{"docs":{},"似":{"docs":{},"d":{"docs":{},"p":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"减":{"docs":{},"少":{"docs":{},"我":{"docs":{},"们":{"docs":{},"再":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"中":{"docs":{},"的":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"举":{"docs":{},"个":{"docs":{},"例":{"docs":{},"子":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"由":{"docs":{},"很":{"docs":{},"多":{"docs":{},"个":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"在":{"docs":{},"一":{"docs":{},"起":{"docs":{},"的":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"个":{"docs":{},"子":{"docs":{},"串":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"加":{"docs":{},"入":{"docs":{},"备":{"docs":{},"忘":{"docs":{},"录":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"同":{"docs":{},"样":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"计":{"docs":{},"算":{"docs":{},"一":{"docs":{},"次":{"docs":{},"就":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"140.-Word-Break-II.html":{"ref":"140.-Word-Break-II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"每":{"docs":{},"次":{"docs":{},"走":{"docs":{},"两":{"docs":{},"步":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"环":{"docs":{},"，":{"docs":{},"不":{"docs":{},"用":{"docs":{},"n":{"docs":{},"时":{"docs":{},"间":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"能":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"141.-Linked-List-Cycle.html":{"ref":"141.-Linked-List-Cycle.html","tf":0.005847953216374269}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{},"解":{"docs":{},"法":{"docs":{},"使":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"需":{"docs":{},"要":{"docs":{},"理":{"docs":{},"解":{"docs":{},"先":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{},"先":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"首":{"docs":{},"先":{"docs":{},"访":{"docs":{},"问":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"左":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"再":{"docs":{},"右":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"画":{"docs":{},"图":{"docs":{},"可":{"docs":{},"以":{"docs":{},"知":{"docs":{},"道":{"docs":{},"，":{"docs":{},"先":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"首":{"docs":{},"先":{"docs":{},"会":{"docs":{},"访":{"docs":{},"问":{"docs":{},"左":{"docs":{},"边":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"由":{"docs":{},"底":{"docs":{},"向":{"docs":{},"上":{"docs":{},"对":{"docs":{},"之":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"再":{"docs":{},"进":{"docs":{},"行":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"一":{"docs":{},"个":{"docs":{},"递":{"docs":{},"归":{"docs":{},"得":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"并":{"docs":{},"将":{"docs":{},"右":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"压":{"docs":{},"栈":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"144.-Binary-Tree-Preorder-Traversal.html":{"ref":"144.-Binary-Tree-Preorder-Traversal.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"改":{"docs":{},"为":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.009345794392523364}}}},"根":{"docs":{"145.-Binary-Tree-Postorder-Traversal.html":{"ref":"145.-Binary-Tree-Postorder-Traversal.html","tf":0.018691588785046728}}},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"执":{"docs":{},"行":{"docs":{},"n":{"docs":{},"次":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"操":{"docs":{},"作":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"。":{"docs":{"147.-Insertion-Sort-List.html":{"ref":"147.-Insertion-Sort-List.html","tf":0.004201680672268907}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"有":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"一":{"docs":{},"部":{"docs":{},"分":{"docs":{},"是":{"docs":{},"对":{"docs":{},"两":{"docs":{},"半":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"就":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"合":{"docs":{},"并":{"docs":{},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{},"合":{"docs":{},"并":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"也":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"过":{"docs":{},"了":{"docs":{"148.-Sort-List.html":{"ref":"148.-Sort-List.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"数":{"docs":{},"字":{"docs":{},"压":{"docs":{},"入":{"docs":{},"，":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"符":{"docs":{},"号":{"docs":{},"就":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"将":{"docs":{},"计":{"docs":{},"算":{"docs":{},"结":{"docs":{},"果":{"docs":{},"压":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"中":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"程":{"docs":{},"序":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"150.-Evaluate-Reverse-Polish-Notation.html":{"ref":"150.-Evaluate-Reverse-Polish-Notation.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}},"乍":{"docs":{},"一":{"docs":{},"看":{"docs":{},"发":{"docs":{},"现":{"docs":{},"只":{"docs":{},"要":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"得":{"docs":{},"到":{"docs":{},"两":{"docs":{},"两":{"docs":{},"直":{"docs":{},"接":{"docs":{},"差":{"docs":{},"值":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"就":{"docs":{},"行":{"docs":{},"了":{"docs":{},"。":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"这":{"docs":{},"里":{"docs":{},"要":{"docs":{},"求":{"docs":{},"我":{"docs":{},"们":{"docs":{},"使":{"docs":{},"用":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"普":{"docs":{},"通":{"docs":{},"的":{"docs":{},"比":{"docs":{},"较":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"最":{"docs":{},"快":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"快":{"docs":{},"排":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"比":{"docs":{},"较":{"docs":{},"排":{"docs":{},"序":{"docs":{},"是":{"docs":{},"不":{"docs":{},"行":{"docs":{},"的":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"需":{"docs":{},"要":{"docs":{},"使":{"docs":{},"用":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"桶":{"docs":{},"排":{"docs":{},"序":{"docs":{},"就":{"docs":{},"很":{"docs":{},"适":{"docs":{},"合":{"docs":{},"这":{"docs":{},"里":{"docs":{},"。":{"docs":{},"桶":{"docs":{},"排":{"docs":{},"序":{"docs":{},"原":{"docs":{},"理":{"docs":{},"是":{"docs":{},"将":{"docs":{},"数":{"docs":{},"据":{"docs":{},"按":{"docs":{},"组":{"docs":{},"分":{"docs":{},"入":{"docs":{},"桶":{"docs":{},"中":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"桶":{"docs":{},"里":{"docs":{},"的":{"docs":{},"数":{"docs":{},"在":{"docs":{},"进":{"docs":{},"行":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"对":{"docs":{},"于":{"docs":{},"这":{"docs":{},"题":{"docs":{},"，":{"docs":{},"巧":{"docs":{},"妙":{"docs":{},"的":{"docs":{},"处":{"docs":{},"理":{"docs":{},"可":{"docs":{},"以":{"docs":{},"省":{"docs":{},"去":{"docs":{},"桶":{"docs":{},"里":{"docs":{},"数":{"docs":{},"据":{"docs":{},"排":{"docs":{},"序":{"docs":{},"这":{"docs":{},"一":{"docs":{},"步":{"docs":{},"。":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"桶":{"docs":{},"排":{"docs":{},"序":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"是":{"docs":{},"关":{"docs":{},"键":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"首":{"docs":{},"先":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"和":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"减":{"docs":{},"去":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"g":{"docs":{},"a":{"docs":{},"p":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"除":{"docs":{},"以":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"164.-Maximum-Gap.html":{"ref":"164.-Maximum-Gap.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"⌊":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}},"⌋":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125},"229.-Majority-Element-II.html":{"ref":"229.-Majority-Element-II.html","tf":0.008771929824561403}}},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"重":{"docs":{},"新":{"docs":{},"更":{"docs":{},"换":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"次":{"docs":{},"数":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"一":{"docs":{},"半":{"docs":{},"以":{"docs":{},"上":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"最":{"docs":{},"后":{"docs":{},"结":{"docs":{},"果":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"是":{"docs":{},"m":{"docs":{},"a":{"docs":{},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"169.-Majority-Element.html":{"ref":"169.-Majority-Element.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"下":{"docs":{},"一":{"docs":{},"次":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"这":{"docs":{},"个":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"，":{"docs":{},"就":{"docs":{},"查":{"docs":{},"看":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"相":{"docs":{},"差":{"docs":{},"是":{"docs":{},"否":{"docs":{},"小":{"docs":{},"于":{"docs":{},"k":{"docs":{},"，":{"docs":{},"这":{"docs":{},"是":{"docs":{},"可":{"docs":{},"行":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"大":{"docs":{},"了":{"docs":{},"一":{"docs":{},"点":{"docs":{},"。":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"简":{"docs":{},"单":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"的":{"docs":{},"办":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"保":{"docs":{},"存":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"切":{"docs":{},"割":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"为":{"1":{"0":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"与":{"docs":{},"之":{"docs":{},"前":{"docs":{},"记":{"docs":{},"录":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"比":{"docs":{},"较":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"就":{"docs":{},"加":{"docs":{},"入":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"对":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"操":{"docs":{},"作":{"docs":{},"是":{"docs":{},"麻":{"docs":{},"烦":{"docs":{},"的":{"docs":{},"，":{"docs":{},"比":{"docs":{},"较":{"docs":{},"也":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"位":{"docs":{},"位":{"docs":{},"比":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"限":{"docs":{},"制":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"只":{"docs":{},"有":{"4":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"用":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"表":{"docs":{},"示":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"4":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"两":{"docs":{},"位":{"docs":{},"，":{"docs":{},"一":{"docs":{},"共":{"1":{"0":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"2":{"0":{"docs":{},"位":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"表":{"docs":{},"示":{"docs":{},"所":{"docs":{},"有":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"了":{"docs":{},"。":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"类":{"docs":{},"型":{"docs":{},"是":{"3":{"2":{"docs":{},"位":{"docs":{},"的":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"表":{"docs":{},"示":{"docs":{},"每":{"docs":{},"个":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"，":{"docs":{},"用":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"来":{"docs":{},"比":{"docs":{},"较":{"docs":{},"和":{"docs":{},"保":{"docs":{},"存":{"docs":{},"也":{"docs":{},"比":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"快":{"docs":{},"多":{"docs":{},"了":{"docs":{},"。":{"docs":{"187.-Repeated-DNA-Sequences.html":{"ref":"187.-Repeated-DNA-Sequences.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}},"确":{"docs":{},"定":{"docs":{},"好":{"docs":{},"了":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"了":{"docs":{},"，":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"可":{"docs":{},"以":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"让":{"docs":{},"a":{"docs":{},"b":{"docs":{},"都":{"docs":{},"右":{"docs":{},"移":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"，":{"docs":{},"a":{"docs":{"201- Bitwise-AND-of-Numbers-Range.html":{"ref":"201- Bitwise-AND-of-Numbers-Range.html","tf":0.022727272727272728}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"把":{"docs":{},"结":{"docs":{},"果":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"1":{"docs":{},"的":{"docs":{},"，":{"docs":{},"认":{"docs":{},"定":{"docs":{},"为":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"圈":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"而":{"docs":{},"会":{"docs":{},"一":{"docs":{},"直":{"docs":{},"循":{"docs":{},"环":{"docs":{},"的":{"docs":{},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}},"链":{"docs":{},"表":{"docs":{},"找":{"docs":{},"环":{"docs":{},"问":{"docs":{},"题":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"题":{"docs":{},"解":{"docs":{},"。":{"docs":{"202.-Happy-Number.html":{"ref":"202.-Happy-Number.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"质":{"docs":{},"数":{"docs":{},"加":{"docs":{},"起":{"docs":{},"来":{"docs":{},"。":{"docs":{},"描":{"docs":{},"述":{"docs":{},"的":{"docs":{},"应":{"docs":{},"该":{"docs":{},"不":{"docs":{},"是":{"docs":{},"很":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"仔":{"docs":{},"细":{"docs":{},"看":{"docs":{},"看":{"docs":{},"代":{"docs":{},"码":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"计":{"docs":{},"算":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"面":{"docs":{},"积":{"docs":{},"首":{"docs":{},"先":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"计":{"docs":{},"算":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"边":{"docs":{},"长":{"docs":{},"，":{"docs":{},"边":{"docs":{},"长":{"docs":{},"求":{"docs":{},"出":{"docs":{},"来":{"docs":{},"了":{"docs":{},"，":{"docs":{},"面":{"docs":{},"积":{"docs":{},"自":{"docs":{},"然":{"docs":{},"不":{"docs":{},"在":{"docs":{},"话":{"docs":{},"下":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"用":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"代":{"docs":{},"表":{"docs":{},"一":{"docs":{},"个":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"，":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"值":{"docs":{},"代":{"docs":{},"表":{"docs":{},"边":{"docs":{},"长":{"docs":{},"。":{"docs":{},"这":{"docs":{},"个":{"docs":{},"点":{"docs":{},"是":{"docs":{},"正":{"docs":{},"方":{"docs":{},"形":{"docs":{},"的":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"。":{"docs":{"221.-Maximal-Square.html":{"ref":"221.-Maximal-Square.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"等":{"docs":{},"等":{"docs":{},"数":{"docs":{},"字":{"docs":{},"明":{"docs":{},"显":{"docs":{},"都":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"不":{"docs":{},"计":{"docs":{},"算":{"docs":{},"。":{"docs":{},"于":{"docs":{},"是":{"docs":{},"修":{"docs":{},"改":{"docs":{},"计":{"docs":{},"算":{"docs":{},"倍":{"docs":{},"数":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"9":{"docs":{},"直":{"docs":{},"接":{"docs":{},"加":{"docs":{},"上":{"2":{"3":{"docs":{},"，":{"4":{"3":{"docs":{},"。":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{"204.-Count-Primes.html":{"ref":"204.-Count-Primes.html","tf":0.015625}}},"学":{"docs":{},"习":{"docs":{},"一":{"docs":{},"门":{"docs":{},"课":{"docs":{},"程":{"docs":{},"之":{"docs":{},"前":{"docs":{},"要":{"docs":{},"学":{"docs":{},"习":{"docs":{},"先":{"docs":{},"学":{"docs":{},"课":{"docs":{},"程":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"两":{"docs":{},"门":{"docs":{},"课":{"docs":{},"程":{"docs":{},"是":{"docs":{},"互":{"docs":{},"相":{"docs":{},"满":{"docs":{},"足":{"docs":{},"的":{"docs":{},"，":{"docs":{},"那":{"docs":{},"就":{"docs":{},"学":{"docs":{},"不":{"docs":{},"完":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"把":{"docs":{},"这":{"docs":{},"种":{"docs":{},"关":{"docs":{},"系":{"docs":{},"构":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"图":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"能":{"docs":{},"学":{"docs":{},"的":{"docs":{},"课":{"docs":{},"程":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"入":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"课":{"docs":{},"程":{"docs":{},"在":{"docs":{},"图":{"docs":{},"中":{"docs":{},"删":{"docs":{},"除":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"能":{"docs":{},"学":{"docs":{},"的":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"也":{"docs":{},"是":{"docs":{},"入":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"处":{"docs":{},"理":{"docs":{},"就":{"docs":{},"是":{"docs":{},"拓":{"docs":{},"扑":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"拓":{"docs":{},"扑":{"docs":{},"排":{"docs":{},"序":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"题":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"建":{"docs":{},"图":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"和":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"入":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"平":{"docs":{},"均":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"删":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"循":{"docs":{},"环":{"docs":{},"平":{"docs":{},"均":{"docs":{},"进":{"docs":{},"行":{"docs":{},"n":{"docs":{},"次":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"总":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"207.-Course-Schedule.html":{"ref":"207.-Course-Schedule.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"≥":{"docs":{"209.-Minimum-Size-Subarray-Sum.html":{"ref":"209.-Minimum-Size-Subarray-Sum.html","tf":0.00980392156862745}}},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"最":{"docs":{},"好":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"字":{"docs":{},"典":{"docs":{},"树":{"docs":{},"。":{"docs":{},"这":{"docs":{},"题":{"docs":{},"也":{"docs":{},"不":{"docs":{},"例":{"docs":{},"外":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"要":{"docs":{},"将":{"docs":{},"给":{"docs":{},"你":{"docs":{},"的":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"中":{"docs":{},"的":{"docs":{},"单":{"docs":{},"词":{"docs":{},"全":{"docs":{},"部":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"字":{"docs":{},"典":{"docs":{},"树":{"docs":{},"中":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"查":{"docs":{},"找":{"docs":{"212.-Word-Search-II.html":{"ref":"212.-Word-Search-II.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"唯":{"docs":{},"一":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"解":{"docs":{},"释":{"docs":{},"，":{"docs":{},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{},"比":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"算":{"docs":{},"法":{"docs":{},"快":{"docs":{},"的":{"docs":{},"理":{"docs":{},"由":{"docs":{},"就":{"docs":{},"是":{"docs":{},"，":{"docs":{},"n":{"docs":{},"不":{"docs":{},"大":{"docs":{},"，":{"docs":{},"l":{"docs":{},"g":{"docs":{},"n":{"docs":{},"小":{"docs":{},"于":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"解":{"docs":{},"法":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"系":{"docs":{},"数":{"docs":{},"。":{"docs":{"217.-Contains-Duplicate.html":{"ref":"217.-Contains-Duplicate.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"至":{"docs":{},"于":{"docs":{},"代":{"docs":{},"码":{"docs":{},"中":{"docs":{},"为":{"docs":{},"啥":{"docs":{},"开":{"docs":{},"始":{"docs":{},"有":{"docs":{},"个":{"docs":{"219.-Contains-Duplicate-II.html":{"ref":"219.-Contains-Duplicate-II.html","tf":0.010309278350515464}}}}}}}}}}}}},"基":{"docs":{},"本":{"docs":{},"计":{"docs":{},"算":{"docs":{},"器":{"docs":{},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"加":{"docs":{},"减":{"docs":{},"法":{"docs":{},"，":{"docs":{},"之":{"docs":{},"前":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"学":{"docs":{},"习":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"提":{"docs":{},"到":{"docs":{},"了":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"这":{"docs":{},"学":{"docs":{},"期":{"docs":{},"学":{"docs":{},"习":{"docs":{},"编":{"docs":{},"译":{"docs":{},"原":{"docs":{},"理":{"docs":{},"课":{"docs":{},"，":{"docs":{},"也":{"docs":{},"学":{"docs":{},"到":{"docs":{},"了":{"docs":{},"栈":{"docs":{},"式":{"docs":{},"计":{"docs":{},"算":{"docs":{},"机":{"docs":{},"，":{"docs":{},"也":{"docs":{},"是":{"docs":{},"提":{"docs":{},"供":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"指":{"docs":{},"令":{"docs":{},"可":{"docs":{},"以":{"docs":{},"实":{"docs":{},"现":{"docs":{},"计":{"docs":{},"算":{"docs":{},"器":{"docs":{},"。":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"碰":{"docs":{},"到":{"docs":{},"括":{"docs":{},"号":{"docs":{},"，":{"docs":{},"将":{"docs":{},"当":{"docs":{},"前":{"docs":{},"结":{"docs":{},"果":{"docs":{},"和":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"保":{"docs":{},"存":{"docs":{},"。":{"docs":{},"括":{"docs":{},"号":{"docs":{},"就":{"docs":{},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"一":{"docs":{},"次":{"docs":{},"递":{"docs":{},"归":{"docs":{},"调":{"docs":{},"用":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"括":{"docs":{},"号":{"docs":{},"里":{"docs":{},"面":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"次":{"docs":{},"计":{"docs":{},"算":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"保":{"docs":{},"存":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"回":{"docs":{},"，":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"上":{"docs":{},"次":{"docs":{},"保":{"docs":{},"存":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"将":{"docs":{},"其":{"docs":{},"与":{"docs":{},"括":{"docs":{},"号":{"docs":{},"里":{"docs":{},"的":{"docs":{},"相":{"docs":{},"加":{"docs":{},"。":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}}}}}}}},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"里":{"docs":{},"没":{"docs":{},"有":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"计":{"docs":{},"算":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"将":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"改":{"docs":{},"为":{"docs":{},"这":{"docs":{},"次":{"docs":{},"操":{"docs":{},"作":{"docs":{},"对":{"docs":{},"应":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"将":{"docs":{},"当":{"docs":{},"前":{"docs":{},"保":{"docs":{},"存":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"乘":{"1":{"0":{"docs":{},"，":{"docs":{},"加":{"docs":{},"上":{"docs":{},"这":{"docs":{},"次":{"docs":{},"数":{"docs":{},"字":{"docs":{"224.-Basic-Calculator.html":{"ref":"224.-Basic-Calculator.html","tf":0.007633587786259542}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}},"树":{"docs":{},"以":{"docs":{},"及":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"题":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"观":{"docs":{},"察":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{},",":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"那":{"docs":{},"基":{"docs":{},"本":{"docs":{},"上":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"首":{"docs":{},"先":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"去":{"docs":{},"想":{"docs":{},"是":{"docs":{},"否":{"docs":{},"可":{"docs":{},"行":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"便":{"docs":{},"利":{"docs":{},"数":{"docs":{},"组":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"作":{"docs":{},"为":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"变":{"docs":{},"成":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"为":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"就":{"docs":{},"能":{"docs":{},"得":{"docs":{},"到":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{},"递":{"docs":{},"归":{"docs":{},"思":{"docs":{},"想":{"docs":{},"一":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"之":{"docs":{},"后":{"docs":{},"就":{"docs":{},"问":{"docs":{},"题":{"docs":{},"不":{"docs":{},"大":{"docs":{},"了":{"docs":{"654.-maximum-binary-tree.html":{"ref":"654.-maximum-binary-tree.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"主":{"docs":{},"要":{"docs":{},"要":{"docs":{},"实":{"docs":{},"现":{"docs":{},"的":{"docs":{},"是":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"和":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"其":{"docs":{},"他":{"docs":{},"操":{"docs":{},"作":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"改":{"docs":{},"动":{"docs":{},"。":{"docs":{"225.-Implement-Stack-using-Queues.html":{"ref":"225.-Implement-Stack-using-Queues.html","tf":0.0045871559633027525}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"由":{"docs":{},"于":{"docs":{},"这":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"次":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"和":{"docs":{},"一":{"docs":{},"次":{"docs":{},"转":{"docs":{},"移":{"docs":{},"栈":{"docs":{},"操":{"docs":{},"作":{"docs":{},"以":{"docs":{},"及":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"这":{"docs":{},"几":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"而":{"docs":{},"言":{"docs":{},"，":{"docs":{},"平":{"docs":{},"均":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"232.-Implement-Queue-using-Stacks.html":{"ref":"232.-Implement-Queue-using-Stacks.html","tf":0.0045662100456621}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"一":{"docs":{},"次":{"docs":{},"查":{"docs":{},"找":{"docs":{},"到":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"，":{"docs":{},"很":{"docs":{},"多":{"docs":{},"信":{"docs":{},"息":{"docs":{},"对":{"docs":{},"后":{"docs":{},"一":{"docs":{},"次":{"docs":{},"来":{"docs":{},"说":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"也":{"docs":{},"是":{"docs":{},"能":{"docs":{},"用":{"docs":{},"上":{"docs":{},"的":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"需":{"docs":{},"要":{"docs":{},"想":{"docs":{},"个":{"docs":{},"办":{"docs":{},"法":{"docs":{},"利":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"信":{"docs":{},"息":{"docs":{},"。":{"docs":{"239.-Sliding-Window-Maximum.html":{"ref":"239.-Sliding-Window-Maximum.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"“":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"ref":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","tf":0.005376344086021506},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"ref":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","tf":0.005952380952380952}}}}}},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"从":{"docs":{},"原":{"docs":{},"点":{"docs":{},"出":{"docs":{},"发":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"判":{"docs":{},"断":{"docs":{},"能":{"docs":{},"否":{"docs":{},"到":{"docs":{},"达":{"docs":{},"原":{"docs":{},"点":{"docs":{},"，":{"docs":{},"一":{"docs":{},"共":{"4":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"统":{"docs":{},"计":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"比":{"docs":{},"较":{"docs":{},"上":{"docs":{},"下":{"docs":{},"是":{"docs":{},"否":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"左":{"docs":{},"右":{"docs":{},"是":{"docs":{},"否":{"docs":{},"一":{"docs":{},"样":{"docs":{},"即":{"docs":{},"可":{"docs":{"657.-robot-reaturn-to-origin.html":{"ref":"657.-robot-reaturn-to-origin.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"length":13554},"corpusTokens":["!=","\"","\"\"","\"\".","\"\";","\"((()))\",","\"(()\"","\"(()())\",","\"(())()\",","\"()\"","\"()(())\",","\"()()\"","\"()()()\"","\"()[]{}\"","\"(1+(4+5+2)","\"([)]\"","\"(]\"","\")()())\"","\"*\"","\"*\",","\"*\"]","\"*a*b\"","\"+\",","\"+\"]","\".*\"","\"...q\",","\"..q.\"],","\".q..\"]","\"/\",","\"1","\"1\"","\"1\",","\"100\"","\"1010\",","\"10101\"","\"1011\"","\"11\",","\"12\"","\"123\"","\"13\",","\"132\"","\"17\",","\"2","\"2*3","\"210\"","\"213\"","\"226\"","\"23\"","\"231\"","\"2314\"","\"255.255.111.35\"]","\"25525511135\"","\"3\",","\"312\"","\"321\"","\"5\",","\"6\",","\"9\",","\"9534330\"","\";","\"?a\"","\"a","\"a\"","\"a*\"","\"a*c?b\"","\"aa\"","\"aa\".","\"aaaaa\",","\"aaaaacccccaaaaaccccccaaaaagggttt\"","\"aaacecaaa\"","\"aab\"","\"aab\".","\"aabcc\",","\"aacecaaa\"","\"aadbbbaccc\"","\"aadbbcbcac\"","\"ab\"","\"aba\"","\"abc\"","\"abc\",","\"abcabcbb\"","\"abcb\",","\"abcced\",","\"abcd\"","\"abcde\"","\"abcde\",","\"acdcb\"","\"ace\"","\"acgaattccg\".","\"adceb\"","\"add\"","\"adjacent\"","\"adobecodebanc\",","\"ae\",","\"aec\"","\"af\",","\"and\",","\"appl","\"applepen\",","\"applepenapple\"","\"applepenapple\",","\"at\",","\"ate\",","\"b\",","\"bab\"","\"babad\"","\"babgbag\",","\"bag\"","\"banc\"","\"bar\"","\"bat\"],","\"bb\"","\"bba\"","\"bbbbb\"","\"bbf\"","\"bd\",","\"be\",","\"bf\",","\"blue","\"bz\"","\"c*a*b\"","\"caebd\"","\"cat","\"cat\"]","\"cats\",","\"catsanddog\"","\"catsandog\"","\"catsandog\",","\"cb\"","\"cbbd\"","\"cccccaaaaa\"]","\"cd\",","\"ce\",","\"cf\"].","\"code\"]","\"cog\"","\"cog\",","\"dbbca\",","\"dcbabcd\"","\"dce\".","\"dog\"","\"dog\",","\"dog\"]","\"dot\"","\"eat\"","\"egg\",","\"exampl","\"execution\"","\"facing\"","\"fl\"","\"foo\",","\"gr\"","\"great\",","\"great\".","\"great\":","\"happy\".","\"hello\",","\"hit\"","\"hit\",","\"horse\",","\"hot\"","\"intention\",","\"l\"","\"leet","\"leetcode\"","\"leetcode\",","\"ll\"","\"mis*is*p*.\"","\"mississippi\"","\"nat\",","\"pahnaplsiigyir\"","\"paper\",","\"paypalishiring\"","\"paypalishiring\",","\"pen\",","\"pen\"]","\"pinalsigyahrpi\"","\"pine","\"pine\",","\"pineappl","\"pineapple\"]","\"pineapplepenapple\"","\"pwke\"","\"pwwkew\"","\"q...\",","\"r\"","\"rabbbit\",","\"rabbit\"","\"rgeat\"","\"rgeat\".","\"rgtae\"","\"rgtae\".","\"ros\"","\"sand\",","\"see\",","\"tan\",","\"tea\",","\"the","\"title\"","\"vf\"","\"wke\",","\"world!","\"zero","\"{[]}\"","&&","&a","&board,","&candidates,","&combination,","&cost)","&gas,","&grid,","&res)","&res,","&visit,","''","'('","'(',","')","')',","'*'","'*'.","'.'","'.'.","'0'","'0')","'0')+c;","'0')+int(b[i]","'0');","'0';","'1'","'1')","'?'","'['","']',","'a'","'a',","'a'.","'a';","'a'])","'a'],","'b'","'b'.","'c')","'c',","'e')","'finish'","'h'","'i'","'n'","'o'","'q'","'r')","'start'","'t')","'u')","'x'","'x')","'x'.","'z'","'{',","'}',","(","(!p","(!target)","(((2*3)","((10","((2","((2*(3","((2*3)","((9","((cur","((pre","(*)","(.)\".","(0","(0,","(1","(1,1)","(12","(12).","(13","(1left);","(2","(2*((3","(2*(3","(2,2)","(22","(3,2).","(3,6)","(4","(4*5))","(4*5)))","(5","(5,3).","(5,3,null,9).","(6","(6,9)","(6,null,null,null,null,null,null,7).","(also","(auto","(beginword","(binari","(black)","(blue","(bst)","(bst),","(bst).","(can","(candidates)","(clockwise).","(contain","(cur","(cur)","(doubl","(down).","(for","(head=begin);","(homebrew),","(i","(i+1).","(i,","(i.e.","(i.e.,","(ie,","(includ","(index","(ins.empty())","(insert","(insert/delet","(int","(just","(k","(land)","(lca)","(left),","(lgn","(long","(m","(ma.count(bucket_num+1)&&ma[bucket_num+1]","(mark","(merg","(not","(note","(nums.empty()","(nums[k]","(nums[l]","(nx","(p),","(p1","(p2","(partial","(pre","(prefix","(price","(rabb,rab)","(rabb,rabb).","(rabbb,rabb)","(red)","(remov","(replac","(right),","(root","(s)","(s2.size()+1,false));","(size","(start","(substrings)","(sum","(t.size()+1,0);","(target),","(the","(up),","(water),","(well","(where","(without","(words.empty()","(xn).","(you",")","),","){","*","**so","*,","*.","*/","*child[26];","*cur","*detectcycle(listnod","*getintersectionnode(listnod","*head)","*heada,","*headb)","*left,*right;","*left;","*next;","*p","*p,","*p1","*p2","*pre","*right;","*root;","+","++end;","++i)","++i;","+,","+=",",",".","..","...","...,","/","/*","/**","/.","//","//board[i][j]='\\0';","//convert","//cout","//cout>&","//coutleft,left,(2*pos)%int_max,level+1);","//coutleft=build(nums,low,mid);","//first","//low_bound","//morri","//morris解法","//next[0]=","//res.push_back(null);","//the","//thi","//unordered_map","//updat","//upper_bound","//use","//下面是迭代做法","//两边向中间扩展","//之前的代码","//修改的先根遍历的方法","//判断第一列是否有0","//利用bst的中序遍历性质来解决问题","//原始二维数组方法","//层次遍历的方法","//快慢指针","//改变叶子节点的值","//最原始的暴力法","//此题代码","//用一个数组保存","//用参数传递","//由于保证是完全二叉树，所以计算高度直接在左边即可","//类似上一题，直接用回溯法解决问题","//迭代写法","//迭代解法","//递归写法","//需要多一个bucket装最大的那个数字","//顺序遍历方法","0","0'","0's,","0)","0),","0).","0);","0,","0.","0.25","0.25000","00","00000","00011","00100","01","0;","0?","0},","0²","0位置，那么之后的所有位置又可以递归调用函数，得到后面位置的所有排列。第一位置补上，就是所有排列了","0，它的子树就是","1","1\"","1'","1's,","1)","1)!个。同理可以退出，如果需要找第k个排列，第一个字符我们是可以确定的。然后利用递归的思路，一直将数字推出。","1))","1);","1){","1+count(root","1,","1,0}};","1,1]","1,2,1,","1,2,1]","1,2,3","1,2,31,1,5","1,3,23,2,1","1,5,1","1,i=0;","1,j,pos+1)||","1,j=0;","1,j=n","1,pos+1)","1,res=m+n","1,right+1);","1,size);","1,sizeof(cache));","1.","1/22","1/4","10","10,","10,9,20,null,null,15,7]","10,null,5],","10.","100","100);","100.","100.0","1000.","101.","102.","1024.00000","1026","1026.","103.","104.","105.","106.","107.","108.","10]","10^9","10生成bst。首先利用5当中间节点的时候，1","11","11\",","11)))","11).","11,","11.","110.","11000","11010","111.","11110","112.","113.","114.","115.","118.","12","12,","12.","120","120.","121","121.","122.","1223.","123","123.","124.","127.","128.","129.","13","13,","13.","130.","131.","132))","132.","133.","134.","135.","136.","137.","139.","14","14,","14.","140.","141.","142.","143.","144.","145.","147.","148.","15","15,","15.","150.","151.","152.","153.","154.","155.","15],","16","16,","16.3sum","160.","164.","169.","17","17)","17,","17.","179.","18","18.","181","187.","188.","19","19.","199.","19],","1:","1:].","1:height(root","1;","1;i>0;","1;j=y+1;","1?(1right):","1?0:","1]","1])","1]))+1;","1]);","1]){","1],","1],min(dp[i","1].","1]:0);","1];","1]==t[j","1]=nums.back();","1]=t","1][j","1][j],dp[i][j","1][y]","1},","1},{","1};","1}};","1²","1→3→1→1→1","1→l2→ln","1→ln,","1。对于一个完全二叉树，他左子树和右子树肯定有一个是完美二叉树，只要找到这个完美二叉树，就可以直接计算出结果，然后对另一个子树递归调用这个函数。直到节点为null","1。然后定义一个curleft和curright，每当当前节点为0的时候，就要改变curleft和currgiht，当节点为1的时候，改变right和left数组。具体行为可以看代码理解。","1即可。这样int_min就会变int_max","1次之后，队列头就是开始的队列尾了，也就是最后push进队列的数，也就是stack","1次，将队列头push到队列尾。siz","1的时候，这种情况要单独考虑下","1，它的子树就是","1，就直接返回0。","1，就能得到平均的gap。也就是这个题的可能的最小值。我们令这个值为桶的大小。桶里的数字直接的差值我们是不需要记录的，只需要记录桶直接的数字差值。","2","2's,","2's.","2)","2);","2,","2,0,","2,1,","2,4]","2.","2.00000,","2.10000,","2.82842...,","20","20,","20.","200,","200.","201.","2019.","2019/10/16","202.","204.","205.","207.","209.","20],","21","21,","21.","211.","212.","214.","2147483649;","216.","217.","218","219.","22","22,","22.","220.","221.","222.","223.","224.","225.","226.","229.","22],","23","23,","23.","230.","231","231.","232.","234.","235.","236.","238.","239.","24.","240.","241.","24],","25","25.","26","26),","26,","27.","28.","29.","2:","2;","2;i>=0;","2;i>=1;","2]","2]){","2]相比，如果大于的话，那么当前肯定要加，但是如果等于的话，那肯定就是前面已经放置了两个相同的数，就可以不用再写了。","2^0","2^4","2_index","2_index+1","2_index+1.","2_index+2","2d","2h","2²","2→…","2。然后再找到中间夹着的字符是如何分布的。","2展示的那样，一次交易即可。那么我们还是以第一题（一次交易得到最大值），为基础解此题。","3","3)","3)+(6+8)\"","3),","3);","3,","3,0,5,9],","3,4,","3,5,3,6,7],","3,9,","3.","30","30,","30]","31.","32","32.","321","33.","34","34,","34.","342","35.","36","36.","39.","3:","3]","3sum","3x3","3个字符的情况。","4","4)","4))*5)","4)*5)","4)*5))","4),","4*5\"","4,","4.","40","40.","41.","42","42.","44.","45","45.","46.","465","47.","48.","49","49.","491","491.","495","495.","4:","4]","4],","4].","4sum","4个字符，如果都是代表3个字符。那么每次遍历的通量就是3个，如果输入digit","4当左子树的情况。我们可以用动态规划的方法来避免重复计算。","4要当左子树，然后用6当中间节点的时候，还是会碰到1","5","5))","5),","5,","5,4],","5.","50.","50]","51.","52.","53.","54.","55.","56.","57.","59.","5:","5]","5],","6","6),","6).","6,","6.","60.","61.","62.","63.","64.","654.","657.","659.","662.","67.","68","69.","6]","6²","7","7,","7,10,11]","7.","70.","72.","73.","74.","75.","76.","77.","78.","79.","7]","7],","8","8'","8,","8,10],","8.","80.","807.","81.","82","82.","83.","84.","85.","86.","87.","88.","8],","8²","9","9,","9,10));","9,11],","9.","9.26100","90","90%","90.","91.","92.","93.","94.","95.","96.","97.","98.","99","99.","9],","9x9","9x9.","9²",":",";","=","==","=nums[slow++];","=root",">",">&",">0",">0，得到two的转换关系是two=(two\\^nums[i])&~on",">1",">11",">2",">2,",">3",">3.",">4",">4,",">5",">5,",">5.",">6",">9",">=",">child[board[i][j]",">child[board[nx][ny]",">child[i]",">child[i])",">child[i];",">empty();",">getmin();",">left",">left)",">left)&&issametree(p",">left)+1;",">left)+count(root",">left),maxdepth(root",">left);",">left){",">left,add*10+root",">left,level+1,res);",">left,p,q);",">left,q",">left,sum)||haspathsum(root",">left,t",">left;",">left==null&&root",">left==null);",">left==null){",">left=help(nums,left,ma",">left=inverttree(root",">left=le;",">left=null;",">next",">next!=null){",">next&&fast",">next)",">next);",">next){",">next,(l1",">next,l2",">next,l2);",">next;",">next==null)",">next==null){",">next==null||head",">next=addtwonumbers(l1",">next=deleteduplicates(head);",">next=deleteduplicates(next);",">next=head",">next=head;",">next=merge(l1",">next=merge(l1,l2",">next=mergetwolists(l1",">next=mergetwolists(l1,l2",">next=mov",">next=move;",">next=null;",">next=pr",">next=pro.top();",">next=reorder(tmp",">next=second",">next=swappairs(tmp",">next=tmp",">next=tou",">next=tou1",">null",">null,",">peek();",">pop();",">push(x);",">right",">right!=now){",">right!=null&&pr",">right!=root){",">right&&prev",">right)",">right))+1;",">right);",">right)==h",">right){",">right,add*10+root",">right,left,(2*pos+1)%int_max,level+1)));",">right,level+1,res);",">right,p,q);",">right,q",">right,sum);",">right;",">right==null)",">right==null)&&(root",">right==null){",">right=build(nums,mid+1,high);",">right=build(preorder,inorder,prelow+1+leftsize,prehigh,inroot+1,inhigh);",">right=help(nums,ma+1,right);",">right=inverttree(tmp);",">right=now;",">right=null;",">right=ri;",">right=root",">right=root;",">rollmax=rollmax;",">str",">str);",">str.clear();",">str.empty())",">top();",">val!=right",">val!=st.top())",">val)",">val)){",">val);",">val){",">val*10;",">val+=max(l,r);",">val+=root",">val+add)%10);",">val+add)/10);",">val+l+r;",">val+l2",">val,q",">val,root",">val;",">val==head",">val==now",">val==q",">val=second",">val=tmp;",">val>=x){",">val>l2",">val>ma){",">val>root",">valright;",">valval){",">valval;",">右",">左",">左。得到最后结果之后，将结果逆序即可。","?","[","[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]","[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],","[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],","[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],","[\"..q.\",","[\".q..\",","[\"1\",\"0\",\"0\",\"1\",\"0\"]","[\"1\",\"0\",\"1\",\"0\",\"0\"],","[\"1\",\"0\",\"1\",\"1\",\"1\"],","[\"1\",\"1\",\"1\",\"1\",\"1\"],","[\"10\",","[\"2\",","[\"255.255.11.135\",","[\"4\",","[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],","[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],","[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],","[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],","[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],","[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],","[\"a\",\"a\",\"b\"]","[\"aa\",\"b\"]","[\"aa\",\"b\"],","[\"aaaaaccccc\",","[\"ad\",","[\"apple\",","[\"ate\",\"eat\",\"tea\"],","[\"bat\"]","[\"cat\",","[\"cats\",","[\"dog\",\"racecar\",\"car\"]","[\"eat\",","[\"eat\",\"oath\"]","[\"flower\",\"flow\",\"flight\"]","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]","[\"leet\",","[\"nat\",\"tan\"],","[\"oath\",\"pea\",\"eat\",\"rain\"]","['a','b','c','e'],","['a','d','e','e']","['e','t','a','e'],","['i','f','l','v']","['i','h','k','r'],","['o','a','a','n'],","['s','f','c','s'],","[0,","[0,0,0,0],","[0,0,0]","[0,0,0],","[0,0,1,1,1,1,2,3,3],","[0,0,1,1,2,2]","[0,0,1,2,2,5,6]","[0,1,0,1,0,1,99]","[0,1,0,2,1,0,1,3,2,1,2,1]","[0,1,0,2,1,0,1,3,2,1,2,1].","[0,1,0],","[0,1,2,0],","[0,1,2,2,3,0,4,2],","[0,1,2,4,5,6,7]","[0,1]","[0,3,1,0]","[0,4,5,0],","[0,9,1,2,4],","[0,9,1,2,4].","[1","[1,","[1,0,1,1],","[1,0,1]","[1,0,1],","[1,0,2]","[1,1,1,1,1,1]","[1,1,1,2,2,3]","[1,1,1,2,2,3],","[1,1,1,3,3,2,2,2]","[1,1,1,3,3,4,3,2,4,2]","[1,1,1]","[1,1,1],","[1,1,2,2,2,3]","[1,1,2]","[1,1,2],","[1,1],","[1,2,0]","[1,2,1],","[1,2,2,3,3,null,null,4,4]:","[1,2,2,3,4,4,3]","[1,2,2,3,5,6]","[1,2,2,null,3,null,3]","[1,2,2]","[1,2,2],","[1,2,3,...,n]","[1,2,3,0,0,0],","[1,2,3,1,2,3],","[1,2,3,1]","[1,2,3,1],","[1,2,3,3,4,4,5,5]","[1,2,3,3,4,5]","[1,2,3,4,4,5]","[1,2,3,4,5]","[1,2,3,4,8,12,11,10,9,5,6,7]","[1,2,3,4]","[1,2,3,6,9,8,7,4,5]","[1,2,3,null,5,null,4]","[1,2,3]","[1,2,3],","[1,2]","[1,2],","[1,3,","[1,3,1,5]","[1,3,1],","[1,3,2]","[1,3,2],","[1,3,3,1],","[1,3,5]","[1,3,5],","[1,3,6,9],","[1,3,null,null,2]","[1,3]","[1,3],","[1,4,6,4,1]","[1,4]","[1,4],","[1,5,1],","[1,5,9,1,5,9],","[1,5],","[1,5].","[1,6].","[1,8,6,2,5,4,8,3,7]","[1,null,2,3]","[1,null,2,null,3]","[1,null,2]","[1,null,3,2],","[10,","[10,2]","[100,","[10]","[12,","[13,","[14,","[15,13,","[15,14,12,16]","[15,7]","[16,","[18,","[1],","[2,","[2,0,2,1,1,0]","[2,1,1]","[2,1,3]","[2,1,3],","[2,1,4,null,null,3]","[2,1,5,6,2,3]","[2,1,5,6,2,3].","[2,2,1,1,1,2,2]","[2,2,1]","[2,2,2,0,1]","[2,2,2,2],","[2,2,3,2]","[2,2,3]","[2,2],","[2,3,","[2,3,1,1,4]","[2,3,1,2,4,3]","[2,3,1],","[2,3,3],","[2,3,4]","[2,3,4]]","[2,3,5],","[2,3,6,7],","[2,3]","[2,3],","[2,4,1],","[2,4],","[2,5,6,0,0,1,2]).","[2,5,6,0,0,1,2],","[2,5,6],","[2,5]","[2,6,4],","[2,6,4].","[2,6]","[20,9],","[23,","[24,12,8,6]","[2],","[3","[3,","[3,1,2],","[3,1,4,null,2],","[3,1,4,null,null,2]","[3,1,null,null,2]","[3,1,null,null,2],","[3,2,0,","[3,2,1,0,4]","[3,2,1]","[3,2,2,3],","[3,2,3]","[3,2,4],","[3,2,4].","[3,2,6,5,0,3],","[3,2,null,1],","[3,3,5,0,0,3,1,4]","[3,3,5,5,6,7]","[3,30,34,5,9]","[3,4,","[3,4,3]","[3,4,5,1,2]","[3,4,5,2],","[3,4]","[3,4],","[3,5,1,6,2,0,8,null,null,7,4]","[3,5,1,6,2,0,8,null,null,7,4],","[3,5]","[3,5],[6,7],[8,10].","[3,6,9,1]","[3,9,20,15,7]","[3,9,20,null,null,15,7],","[3,9,20,null,null,15,7]:","[3]","[3],","[4,","[4,1,2,1,2]","[4,1,8,3]","[4,1,8,4,5],","[4,1,8,4,5].","[4,2,1]","[4,3]","[4,5,6,7,0,1,2]","[4,5,6,7,0,1,2]).","[4,5,6,7,0,1,2],","[4,5,6],","[4,5]","[4,8]","[4,9,0,5,1]","[5","[5,","[5,0,1,8,4,5],","[5,0,1,8,4,5].","[5,1,4,null,null,3,6]","[5,3,6,2,4,null,null,1],","[5,4,11,2],","[5,7,7,8,8,10],","[5,7]","[5,8,4,5]","[6,2,8,0,4,7,9,null,null,3,5]","[6,2,8,0,4,7,9,null,null,3,5],","[6,5,7],","[7,1,5,3,6,4]","[7,4,1],","[7,6,4,3,1]","[7,8,9,11,12]","[7,8,9]","[7],","[8,5,2],","[9,10,11,12]","[9,20],","[9,3,15,20,7]","[9,6,3]","[[1,0],[0,1]]","[[1,0]]","[[1,2,4]]","[[1,2,6],","[[1,2],[3,10],[12,16]]","[[1,2],[3,5],[6,7],[8,10],[12,16]],","[[1,3],[2,6],[8,10],[15,18]]","[[1,3],[6,9]],","[[1,4],[4,5]]","[[1,5],[6,9]]","[[1,5]]","[[1,6],[8,10],[15,18]]","[]","[](interv","[lgn","[m,","[−231,","\\","]","],","]:nums2[j","];","]=","]=='q')","][j","^","^^","^^^","^^^^","_k_th","_n_2","a\"","a)","a)*(d","a){","a,","a.start","a1,","a2,","a;","a=1;a","a=a","a=a/10;","a[0]","a[1]","abbrevi","abov","above.","absolut","accord","ad","add","add){","add=0)","addbinary(str","addit","address","addtwonumbers(l1,l2,0);","addtwonumbers(listnode*","addword(\"bad\")","addword(\"dad\")","addword(\"mad\")","addword(word)","adjac","adjacent,","affect","again).","again.","ai)","ai).","al=a.size(),bl=b.size();","algorigthm","algorihtm","algorithm","algorithm'","algorithm.html","algorthm","all,","alloc","allow","along","alphabet","also,","altern","although","alway","amongst","amount","anagram","analysi","analysis.)","analyz","ancestor","anlysi","anoth","ans.push_back(nums[q.front()]);","ans;","answer","answer.","anywher","appear","appl","apple\"","apple\",","apple\".","applepen","approach,","april","arbitrari","arbitrary.","area","area,","area.","arithmet","around","arrang","array","array'","array,","array.","array:","array?","array那题很像。这里是找到最小值。首先，如果一个数组是有序的，那么最小值肯定就是第一个数，如果在哪个地发rotate了，那么那个点就是最小值，也是我们需要找的值。","array，这题在数组中加入了重复的数字，导致会出现一些问题。比如left和right是一样的数，甚至是，left和mid和right都是一样的数，这就不好区分两个区间。首先使用一个循环处理，如果left和right一样，将left++。这样就能去除所有边界一样的情况。除去之后，就和前面没有重复数组是一样的处理情况了","arriv","as:","ascend","ask","assign","assum","attack","axi","b","b)","b)+(long","b){return","b,","b.","b1=int_min,b2=int_min,s1=0,s2=0;","b1=max(b1,","b2=max(b2,s1","b=b","babgbag","back","back,","backward","balanc","balanced.","bar","base","base_index;","basic","be","be:","be?","becom","becomes:","befor","beforehand.","begin","begin)","begin){","begin,int","begin;","begin=0,end=0,head=0,length=int_max;","begin=0,end=s.size()","begins.","beginword","beginword,","belong","below","below).","below,","below.","below:","best","best;","best=0;","best=max(best,i","better","between","between).","beyond","binari","bit","bitwis","blue","blue\"","blue,","blue.","bo=false;","bo=true;","bo?i:","board","board)","board,","board.","board.empty()","board[0].empty())","board[i][j]='\\0';","board[i][j]=t;","board[i][j]^=255;","bonu","bool","border","border,","both","bottom","bottom.","box","box,","bracket","brackets.","break","break;","bst","bst'","bst's:","bst.","bst:","bucket(bucket_number+1,make_pair(int_max,int_min));","bucket[index].first=min(bucket[index].first,num);","bucket[index].second=max(bucket[index].second,num);","build","build(nums,0,nums.size());","build(preorder,inorder,0,preorder.size(),0,inorder.size());","build(vector&","buildtree(vector&","built","buttons)","buy","c","c'","c,","c1","c1.","c2","c:t)","c=0;","c=1;","c==c?以及aabc和dbbca是否匹配aadbbcbca，或者是a==c?以及aabcc和dbbc是否匹配aadbbcbca。上面两中情况任何一种成立，这里的匹配都可以算成功。所以这里动态规划保存之前的结果，这次匹配使用前面的结果解决问题。","cache;","cache=qu.front();","cache=x;","cache[5002][7][16];","cache[hash]++;","cache[pos][number][per];","calcul","calculate(str","calculation.","call","caller","caller.","can't","cancompletecircuit(vector","cancompletecircuit(vector&","candi","candid","candidate1=i;","candidate1=nums[0];","candidate2=i;","candidate2=nums[0];","candidates.end());","candidates.size()","candidates[i","candidates[i]","candidates[i],","candidates[i];","candy(vector&","candy.","canfinish(int","canjump(vector&","can’t","captur","car","caret","case,","case.","cases在209个的时候tel了。这种方法也会把代码贴出来","cell","cell,","center).","ch:moves){","ch:s){","chang","changed.","char","charact","character.","characters.","check","chessboard","child","child'","child)","child[board[i][j]","child[board[nx][ny]","children","children,","children.","choos","chosen","circuit","circular","clarification:","class","climb","climbstairs(int","clockwis","clone","close","closest","cmp{","code","code\".","code中有一个循环，循环中进行的操作只有查找和插入hash，时间都是o(1)，所以最后时间复杂度是o(n)","col=board[0].size();","collect","collid","collis","color","column","column.","columns),","combin","combin(string&word,vector&prev){","combin(tmp,prev);","combination,","combination.pop_back();","combination.push_back(candidates[i]);","combination;","combinations.","combinationsum(candidates,","combinationsum(std::vector","combinationsum2(candidates,","combinationsum2(std::vector","combinationsum3(int","combine(int","come","common","complet","complex","complexity.","complexity?","compos","comput","computearea(int","conbin(res,digits,0,\"\");","conbin(vector&","conditions.","configur","confus","connect","connections.","conquer","consecut","consecutively,","consid","consist","constant","constant)","constraint","constraint.","constraints:","construct","constructmaximumbinarytree(vector&","consum","contain","container,","containsduplicate(vector&","containsnearbyalmostduplicate(vector&","containsnearbyduplicate(vector&","contigu","continu","continue;","contribut","convers","convert","convert(str","coordin","copy)","corner","corner,","corner:","correct","correspond","cost","cost)","cost[end];","cost[i]","cost[start];","coud","count","count(treenode*","count):count(count){","count++;","count1","count1++;","count1=0;","count1=1;","count2","count2++;","count2=0;","count2=1;","count=0;","count=int(a[i]","count=t.size();","countnodes(treenode*","countprimes(int","cours","courses?","cout","coutleft);","coutvalnext;","cover","cur","cur;","cur=cur","cur=head","curright=j","cut","cut,tail;","cut.","cut[num]++;","cycl","cycle,","d","d)","d,","d[][2]","data","data,","day","dd=labs(dividend);","deal","decim","decod","default","defin","definit","definition.","degre","delet","deleteduplicates(head);","deleteduplicates(listnode*","depend","depth","depth.","dequ","descend","describ","descripit","descripiton","descript","desctipt","design","determin","devis","dfs(grid,","dfs遍历树，每次遍历中间时间复杂度为o(1)，最后时间复杂度o(n)","dfs，每层有4个分量，时间复杂度还是挺高的，但是不好分析。我这里就不分析了","di=labs(divisor);","diagram","dice","dictionari","dictionary'","dictionary,","die","die,","diesimulator(int","differ","diffwaystocompute(str","digit","digit.","digits)","digits,","digits,int","direction,","directli","directly.","display","distanc","distinct","distinct.","disturb","divid","divide(int","dividend","dividend,","divis","divisor","divisor)","divisor,","divisor.","dna","dna,","dna.","doesn't","dog\"","dog\",","done,","done.","doubl","down","dp","dp(0,0,0,n);","dp(int","dp(m,1);","dp(matrix.size(),vector(matrix[0].size(),0));","dp(n+1,0);","dp(n,false);","dp(nums.size(),0);","dp(s.size()+1,0);","dp(s.size()+1,vector(p.size()+1,false));","dp(s.size()+1,vector(t.size()+1));","dp(word2.size()+2);","dp.back();","dp[0]=","dp[0]=1;","dp[0]=nums[0];","dp[0][0]=true;","dp[1]=1;","dp[i+1]=min(dp[i+1],dp[j]+1);","dp[i][j]=min(dp[i","dp[j]+=dp[j","dp[t.size()];","drawn","dummi","dummy,","dummy;","duplic","duplicates)","duplicates,","duplicates.","dure","e","e)","e)*(h","e,","each","earlier","eat","edg","edges,","edit","effici","element","element,","element.","elements,","elements.","element出现的次数肯定是数组的一半以上，所以只需要定义一个count保存出现最多次数数字的次数，遍历数组，如果重复出现则count++，否则","element留下来了","elev","else{","else即可。这里一共就4种类型的符号。操作符，数字，括号，括回。","empti","empty()","empty.","encod","end","end(0)","end(e)","end)","end){","end,","end,int","end;","endlessli","endpoint","endword","endword),","endword,","enent","engag","engin","enough","entir","environ","equal","equidist","error。所以这里用数组保存之前的结果。整个动态规划的状态有3个维度，一是前面出现的次数，二是前一个数字，三是当前防止的轮数。","etc.","eval","evalrpn(vector&","evalu","exact","exactli","exampl","example\"","example,","example:","example:given","examples.","except","exect","execut","exent","exist","exist(vector>&","exists,","explanation:","explanation:th","explicit","express","expression.","extra","f","f(1,1,1),f(1,2,1),f(1,3,1),f(1,4,1),f(1,5,1),f(1,6,1).","f);","f*","f,","fals","false));","false.","false;","false。如果所有的跳完，return","far","farthest","fast","fast)","fast++;","fast;","fast=0,slow=0;","fast=fast","fast=happy(happy(fast));","fast=head,*slow=head;","fast=n;","father=new","father[father_j]=father_i;","figur","figure.","fill","filled)","filled,","final","find","findmax(treenode*","findmin(vector&","findrepeateddnasequences(str","findwords(vector","finish","first","first,","first=null;","first=pre;","firstmissingpositive(vector&","fit","five","fix","flatten","flatten(treenode*","flip","follow","follow:","follows:","font","for(auto","for(auto&","for(auto&ch:s){","for(auto&num:nums){","for(int","for(str","for(treenode*","form","form.","formed)","forward","forward.","found","four","foursum(vector&","fourth","fr=qu.front();","frequently?","fromleft(matrix[0].size(),0);","fromright(matrix[0].size(),matrix[0].size());","fromright[j]=matrix[0].size()","fromright[j]=min(fromright[j],curright);","front","front,","full","function","function,","function.","g","g,","ga","game","game2类似。这里不限制你跳跃的次数，我们只需要每次记录能达到的最远距离即可。每次循环开始的时候更新最大值。如果更新之后的最大值和当前值是一样的话，说明只能跳到这里了，return","gap","gas,","gas.","gas.size()","gas[end]","gas[i].","gas[start]","gener","genera(1,n,n);","genera(int","generate(int","generatematrix(int","generateparenthesis(int","generatetrees(int","get","getmin()","getnext(next,needle);","getnext(next,rs);","gitbook地址：https://kongchengzhuge.gitbook.io/leetcode/","give","give?","given","go","goal","good","google:","gr","graph","graph(numcourses);","graphic","great","greater","grid","grid)","grid.","grid[x","grid[x][i","grid[x][y]","grids.","group","groupanagrams(vector&","grow","guarante","h","h)","h.","h==","h=height(root);","half=sqrt(n);","hand","happi","happy(int","hascycle(listnod","hash=0,mask=(1=9){","hash=hash&mask;","hashmap插入和取值操作是o(1),循环中时间复杂度是o(1)，最后时间复杂度是o(n)","haspathsum(root","haspathsum(treenode*","haystack","haystack,","haystack.","head","head)","head){","head,","head.","head;","head=1,last=0,res=1;","head=head","head=reorder(head);","head=tou1;","heada;","heada=heada","headb;","headb=headb","height","height(matrix[0].size(),0);","height(root","height(treenode*","height)","heights)","heights.push_back(0);","hello","hello\"","help(board,word,i","help(board,word,i+1,j,pos+1)||","help(board,word,i,j","help(board,word,i,j+1,pos+1)||","help(nums,0,nums.size()","help(res,\"\",n,0);","help(res,k,n,tmp,0,1);","help(res,k,n,tmp,sum+i,i+1);","help(res,tmp+'(',left","help(res,tmp+')',left,right","help(res,tmp,nums,0);","help(root,left,1,0);","help(treenode*root,vector&left,long","help(vector&nums,int","help(vector&res,str","help(vector>&","help(vector>&res,int","help(vector>&res,vector&tmp,vector&nums,int","helper(res,tmp,n,k,1);","helper(res,tmp,sum","helper(res,tmp,sum,root);","helper(root","helper(root,0);","helper(s,res,tmp,0);","helper(string&s,vector>&res,vector&tmp,int","helper(treenode*","helper(vector>&","here","here,","here.","high){","higher","histogram","histogram'","histogram.","hold","horizont","hors","howell:","however,","i);","i){","i){i为0","i++;","i+1);","i,","i,int","i.","i.e.","i:nums){","i;","i=0,j=","i=0,j=height.size()","i=0,res=int_min;","i=0;","i=0;i","i=0;i&","i=0;i(matrix[i][j]","i=0;i(nums[i])","i=0;i({strs[i]});","i=0;i0&&nums[i]","i=0;i0?left++:right","i=0;i=0&&(i+j)=0&&(i+j+1)","i=0;i=0&&j>=0){","i=0;i=0&&rightres){","i=0;i=0&&s.substr(pos,sz)==worddict[j]&&res[pos]){","i=0;i=0){","i=0;i=0;","i=0;i=heights[st.top()]){","i=0;i=k)","i=0;i=s.size())","i=0;i>","i=0;i>&","i=0;i>&board,","i=0;ileft){","i=0;inext(needle.size(),","i=0;irank[father_j]){","i=1;i","i=1;i&","i=1;i&prices){","i=1;i0;","i=1;i0?dp[i","i=1;i=0;","i=1;iprices[i","i=1;itmp=res[start];","i=2;i","i=3;i","i=3;ihalf)","i=atol(s.c_str());","i=begin;i","i=inlow;ileft=build(preorder,inorder,prelow+1,prelow+1+leftsize,inlow,inroot);","i=left+1;inums[i]?ma:i;","i=m","i=matrix.size()","i=pos;i","i=pos;i>","i=pos;in)","i=s.size()","i=start;i","i=tmp.size()","i=triangle.size()","i=x","i>=0&&nums1[i]>nums2[j]?nums1[i","i]和p[0","ident","identifi","if(","if(add==0)","if(al=0;i","if(begin==s.size()){","if(bo){","if(board.size()==0||board[0].size()==0)","if(cache[hash]==2){","if(cache[pos][number][per]!=","if(ch='0'){","if(ch=='","if(ch=='('){","if(ch==')'){","if(ch=='+')","if(ch==']'){","if(ch=='d'){","if(ch=='l'){","if(ch=='r'){","if(ch=='u'){","if(ch=='}'){","if(count1==0){","if(count1>nums.size()/3)","if(count2==0){","if(count2>nums.size()/3)","if(count==0){","if(count==1||count==3){","if(count==2||root==null)","if(count>=2){","if(cut[n]","if(digits.size()==0)","if(dividend==int_min&&divisor==","if(fast)","if(fast==1)","if(fast==null||fast","if(fast==slow)","if(first!=null&&pr","if(first==null&&pr","if(fr==null)","if(fr==pos){","if(haystack.size()==0){","if(head","if(head&&head","if(head==null)","if(head==null||head","if(height.size()==0)","if(high==low)","if(i","if(i!=0&&i!=numrow","if(i==candidate1)","if(i==candidate1){","if(i==candidate2)","if(i==candidate2){","if(i==j","if(i=board.size()||j>=board[0].size()||board[i][j]=='\\0'||word[pos]!=board[i][j])","if(i=board.size()||j>=board[0].size()||word[pos]!=board[i][j])","if(input[i]=='*'){","if(input[i]=='+'){","if(isbalan(root)==int_max)","if(isleaf(fr))","if(ispalindrome(s,j,i)){","if(j+step2","if(k","if(k==0)","if(k>prices.size()/2){","if(l1","if(l1==null)","if(l1==null){","if(l2==null)","if(l2==null){","if(le==null)","if(left","if(left){","if(left==0&&right==0){","if(left==null&&right==null)","if(left==null||right==null)","if(left==right){","if(left>=0&&left","if(left>right)","if(lefth==int_max||righth==int_max||abs(lefth","if(lefttoright){","if(len1next;","if(length>end","if(level>=left.size())","if(list)","if(lists.size()==0)","if(lr.empty()||lr.top()=='l'){","if(lr.empty()||lr.top()=='r'){","if(lval+l+r>res)","if(m.count(s))","if(ma.count(bucket_num)||","if(ma.find(start*size+end)!=ma.end()){","if(map[s[begin++]]++>=0)","if(matrix.size()==0||matrix[0].size()==0)","if(matrix[i][j]","if(matrix[i][j]=='0'){","if(mist.empty()||x","if(n","if(n==0)","if(n==1)","if(nc==0)","if(needle.size()==0)","if(next.empty())","if(nr==0)","if(num!=val)","if(num==res)","if(number+1==k){","if(number+1right;","if(numrows==0)","if(numrows==1)","if(nums.size()","if(nums.size()==0)","if(nums.size()>","if(nums.size()sum)","if(output.size()==0){","if(p&&q&&(p","if(p==null&&q==null)","if(pos==digits.size()){","if(pos==n)","if(pos==nums.size())","if(pos==tmp.size()){","if(pos==word.size())","if(posnums[po","if(pr","if(pre){","if(prelow==prehigh)","if(prev","if(q.empty())","if(q1.empty())","if(q2.empty())","if(ratings[i]>ratings[i+1])","if(res.size()==0){","if(res.size()val);","if(res[i","if(ri==null)","if(right){","if(root","if(root!=null)","if(root)","if(root==null)","if(root==null){","if(root==nullptr)","if(root==null||root==p||root==q)","if(s.count(v","if(s.size()==0)","if(s.size()>10||(s.size()==10&&s>\"2147483647\"))","if(s1.size()+s2.size()!=s3.size())","if(s[0]=='0')","if(s[i","if(se.count(num))","if(size==1)","if(slow","if(st.empty()){","if(st.empty()||st.top()!='(')","if(st.empty()||st.top()!='[')","if(st.empty()||st.top()!='{')","if(st2.empty()){","if(start>end){","if(strs.size()==0)","if(strs.size()==1)","if(sum)","if(sum==n){","if(sum==root","if(t","if(t){","if(t==null){","if(t==tmp){","if(tmp","if(tmp.size()==k){","if(tmp.size()==nums.size()","if(tmp.size()==nums.size()){","if(tmp==null)","if(tou1","if(tq==null){","if(tq==pos){","if(ud.empty()||ud.top()=='d'){","if(ud.empty()||ud.top()=='u'){","if(word==endword)","if(word==pos){","if(worddict.count(s)){","if(worddict.count(tmp)){","if(x","if(x\"2147483647\");","if(x=x/mid)","if:","ii","iii","imag","image!","image.","imagin","implement","imposs","impossible.","includ","inclus","inclusive,","inclusive.","indegree(numcourses);","index","index,","index.","index=(num","index=0;","indexed)","indexof().","indic","inent","ingl","inhigh){","initi","inlow,int","inord","inorder(root","inorder(root);","inorder(treenode*","inorder)","inorder,int","inordertraversal(treenode*","input","input)","input,output;","input.empty()&&output.empty();","input.push(x);","input:","inroot;","ins)","ins.end(),","insert","insert(str","insert(vector&","insertionsortlist(listnode*","inspir","instanc","instanti","instead","instead.","int","int.","int[count];","int_max;","int_max。保证不溢出。修改代码之后发现能通过。","int_min)/(tmp+1));","int_min)/(tmp+1);","integ","integer,","integer.","integers,","integers.","intent","interleav","intern","intersect","intersect).","intersect,","intersectv","interv","interval()","interval(int","interval.","intervals,","intervals.","interview.","introduc","invalid.","invert","inverttree(treenode*","ip","irrelevant.","is:","isbalan(treenode*","isbalanced(treenode*","ishappy(int","isinterleave(str","isisomorphic(str","island","islands.","isleaf(treenode*","ismatch(str","isn't","isomorph","isomorphic.","ispalindrome(int","ispalindrome(listnode*","ispalindrome(string&s,int","ispossible(vector&","ispoweroftwo(int","issametree(p","issametree(treenode*","isscramble(str","issymmetric(treenode*","isvalid(str","isvalidbst(treenode*","isvalidsudoku(vector>&","it,","it.","iter","iterates,","iteration,","iteratively.","iteratively?","ith","itself","itself).”","itself.","iv","i长度的s能匹配。遍历s,如果当前i开始的substring中，能和worddict匹配，并且当前dp[i]=true的话，那么substirng的index的是true,最后返回数组最后一位即可","j","j)","j){","j,","j,int","j;","j=","j=0,i=0;","j=0;","j=0;j","j=i*i;j","j]的匹配结果。每一个状态转移的时候，一定要分析全要考虑的前一个状态。这一题中就*号很特殊，他可以是一个也可以是零个也可以是多个。分析到*号的时候，需要考虑的前一个状态有点多。","java'","journey","judg","judgecircle(str","jump","jump(vector&","jumps.","k","k)","k,","k,int","k.","k;","k=0;k","k==35000.这是我看比我速度快很多但是和我算法一样的人，在前面加的。我也加了个试试，确实快很多。我猜测他肯定是知道一个测试样例，所以直接return了。","k=i;k","k=k%size;","k=min(k,int(prices.size()));","k=size","k])","k]);","key","key.","kmp只需要两次遍历字符串，时间复杂度o(n)","kmp最关键的是构建next数组，然后就很好匹配了。","kmp算法，求出next数组时间复杂度是o(n),匹配时间复杂度是o(m)，m>n。最后时间复杂度是o(m)","known","kth","kthsmallest","kthsmallest(treenode*","l","l,int","l0→l1→…→ln","l0→ln→l1→ln","l1","l1,","l1,listnode*","l1;","l1=new","l2","l2)","l2){","l2,int","l2;","l2=new","l:","l:left){","l;","l=maxtosum(root","l=mid+1;","label","ladder","ladder(beginword,endword,wordlists);","ladder(string&beginword,","ladderlength(str","land","language,","large,","larger","largest","largestnumber(vector&","largestrectanglearea(vector&","lass","last","last,","later,","lca","le:left){","le;","lead","leaf","leav","leetcode检测一个题的答案是一直调用这个函数，如果再函数里声明一个static变量，那么，就只会初始化一次。之后直接返回即可。用在这题最好不过","left","left(null),","left(size),right(size),res(size);","left);","left++;","left,","left,int","left,right;","left.","left.push_back(pos);","left;","left=0,right=","left=0,right=nums.size()","left=0,right=nums.size(),mid;","left=0,right=nums.size();","left=0,right=res.size()","left=0;","left=0;int","left==x/left?left:left","left=diffwaystocompute(input.substr(0,i));","left=genera(start,i","left=i;right=i+1;","left=mid+1;","left=pos[s[i]];","left=qu.front();","left[0]=nums[0];","left[level]+1,max(le,help(root","lefth=isbalan(root","leftmax=height[left];","leftmost","lefttoright=!lefttoright;","lefttoright=true;","left，left","legibility)","len","len1++;","len1=0,len2=0;","len2++;","length","length,","length.","length==int_max?\"\":s.substr(head,length);","length=end","lengthoflongestsubstring(str","less","let'","letter","letter.","lettercombinations(str","letters)","letters.","level","level).","level){","level,","level,vector&res){","levelorder(treenode*","levels.","lexicograph","lgn","librari","library'","like:","limit","line","line.","line:","linear","lines,","link","list","list'","list,","list.","list:","list:lists){","lista","listb","listnod","listnode(","listnode((l1","listnode(0);","listnode(add);","listnode(int","listnode*","listnode*a=heada,*b=headb;","listnode*tmp=head","lists)","lists.","lists:","liter","lm=0,rb=0,size=s.size();","lm=left;rb=right;","locat","log","long","long)(c","long)(g","longest","longestcommonprefix(vector&","longestconsecutive(vector&","longestpalindrome(str","longestvalidparentheses(str","look","loop","low)>>1);","low,int","lower_bound(int","lowercas","lowercase.","lowest","lowestcommonancestor(treenode*","lr.empty()&&ud.empty();","lr.pop();","lr.push(ch);","lr;","m","m)","m,","m,word2","m:ma){","m;","m=1;","m[s];","m[s]=res;","ma","ma(k);","ma.erase((static_cast(nums[i","ma;","ma=findmax(root","ma=left;","ma=max(ma,dp[i]);","ma=max(p","ma=nums[0];","ma[8]={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};","ma[input]=res;","ma[start*size+end];","ma[start*size+end]=res;","made","magnitud","major","majorityelement(vector&","make","mani","map","map(128,0);","map.first","map.second","map>","map[c]++;","mapping:","marco","mark","mark(nums.size(),false);","mark){","match","matrices.","matrix","matrix)","matrix,","matrix.","matrix:","matrix看algorithm","matter","matter.","max","max(a,e);","max(b,f);","max(lefth,righth)+1;","max(maxdepth(root","max(po","maxarea(vector&","maxdepth(treenode*","maxim","maximalrectangle(vector>&","maximalsquare(vector>&","maximum","maximumgap(vector&","maxpathsum(treenode*","maxproduct(vector&","maxprofit(int","maxprofit(vector&","maxrive=0;","maxslidingwindow(vector&","maxsubarray(vector&","maxtosum(root);","maxtosum(treenode*","ma{{'a',0},{'c',1},{'g',2},{'t',3}};","mean","memory.","memory?","memset(cache,","mention","merg","merge(head,tmp);","merge(listnode*","merge(sortlist(head),sortlist(fast));","merge(vector&","mergeklists(vector&","mergetwolists(listnode*","messag","method","mi)/min_gap;","mi=min(p","mi=nums[0];","mid","mid;","mid=head,*fast=head;","mid=low+((high","mid=mid","middl","mid这段就是有序的，最小值肯定不再中间，mid","min","min(c,g);","min(d,h);","mincut(str","mindepth(treenode*","mindistance(str","minim","minimum","minimumtotal(vector>&","minpathsum(vector>&","minstack","minstack()","minstack();","minstack*","minstack.getmin();","minstack.pop();","minstack.push(","minstack.push(0);","minstack.top();","minsubarraylen(int","minu","minwindow(str","miprice);","miprice=int_max;","miprice=min(miprice,price);","mirror","miss","mist;","mistake.","mod","mod=1000000000+7;","modif","modifi","modify_preorder(root","modify_preorder(root,1,res);","modify_preorder(treenode*","modul","modulo","molecule.","more","morris解法，大概路径和94.","move","move.","move=tmp","movement","moves)","moves,","moves.","moves[i]","move{{0,1},{1,0},{0,","much","multipl","multiplication,","mypow(doubl","myqueu","myqueue()","myqueue();","myqueue*","mysqrt(int","mystack","mystack()","mystack();","n","n!","n)","n),","n).","n){","n,","n,int","n,vector&tmp,int","n.","n/2","n/3","n:nums){","n=matrix.size();","n=ratings.size();","n>m?(rangebitwiseand((m>>1),(n>>1))","n?","n]","natively.","nc=matrix[0].size();","nearest","necessarili","necessary).","need","needl","needle)","neg","negative.","neighboring.","neighbors.","never","new","newhead","newhead=new","newinterv","newinterval)","next","next(null)","next(s.size(),","next)","next.pop();","next.push(pos);","next;","next=head","next=next","nextpermutation(vector&","nextword(next,beginword,wordlists);","nextword(next,word,wordlists);","nextword(queue&next,string&beginword,unordered_set&","nf(row*col+1);","node","node'","node.","nodes'","nodes,","nodes.","non","none)","not).","not.","not:","notat","notation.","note","note:","note:bonu","note:y","notes:","noth","now","now;","now=0;","now=head;","now=now","now=root,*pre=null;","nr=0;nc=","nr=matrix.size();","nstep{n,n","nstep{nc,nr","nth","nucleotid","null","null)","null.","null;","num","num*10","num,","num:nums)","num:nums){","num=0;","num=int(digits[pos]","number","number)","number,","number,int","number,ops;","number.","number.pop();ops.pop();","number.push(res);","number=count(root","numbers,","numbers.","number认定为是带圈的链表，最后就是找出圈就行。","number问题会有两种情况，一种就是能找到结果，结果为1，还有一种就是会一直循环，形成一个圈。","numcourses,","numdecodings(str","numdistinct(str","numislands(vector>&","numrow","numrows)","numrows);","numrows){","numrows,","nums)","nums,","nums,int","nums,vector>&","nums.end());","nums.size(),","nums1","nums1,","nums1[r","nums2","nums2,","nums2.","nums[0]","nums[1]","nums[i]","nums[i].","nums[i]=0){","nums[j]","nums[k","nums[k]","nums[k])","nums[l]);","nums[l].","nums[left];","nums[pos++]=num;","nums[q.back()]=k","nums[res++]=num;","numtrees(int","nx","nx,","ny","ny,","n}次。循环需要时间复杂度是o(n平方)，最后算法的时间复杂度是o(n平方)。","n×n","n个数排列有n!种情况，如果数字是1","n，最后时间复杂度o(m*n)","n，那么1开头的排列会有(n","o","o(1)","o(9^k),","o(c(9,k))","o(lgn*lgn)","o(log","o(n","o(n)","o(n).","o(n)，但是适用于数字比较少的情况。这里一共就3个数字，是比较适合的。","o),","obj","obj.empty();","obj.pop();","obj.push(x);","obj.top();","object","obstacl","obstaclegrid)","obtain","occur","occur,","occurr","off.","on","onc","once,","once.","one,","one.","only,","onto","open","oper","operand","operation.","operations)","operations:","operator()(const","operator.","operators,","operators.","ops.push(sign);","optim","order","order).","order,","order.","origin","origin,","other.","otherwis","otherwise,","out","output","output.pop();","output.push(input.top()),input.pop();","output.top();","output:","output[i]","overflows.","overlap","overlapping.","overlaps,","overwrit","p","p)","p);","p,","p1","p1;","p2","p2)","p:prices){","pair","pair:","pairs,","palindrom","palindrome.","param_2","param_3","param_4","parent","parenthes","parentheses,","parentheses.","part","partial","partial).","partit","partition(listnode*","partition(str","partitions.","pascal'","pass","pass.","pass?","pass解决问题，时间复杂度o(n).hashmap插入操作时间也是o(1)。","path","path'","path.","pathsum(treenode*","pattern","peek","peek()","peek/pop","pen","per(nums,res,0,nums.size());","per(nums,res,tmp,mark);","per(vector&","per,int","perform","permit","permut","permutation,","permutations.","permute(vector&","permuteunique(vector&","phone","pivot","place","place,","place.","placement,","places,","place。于是我将第一行和第一列定义为标志位，从2行2列开始遍历，如果为0，将为0的那行和列的第一位设置为0标志位。之后再次遍历一遍第一行和第一列，将有标志位的那一行或者一列置为零","plane.","pleas","plu","po","point","point.","pointers.","polish","pop","pop()","pop,","pop操作需要pop的数字。可以看到这里时间复杂度是o(n)，stack的pop操作，时间复杂度是o(1)","pop操作：首先得到当前的size，然后执行s","porblem","pos(256,","pos(256,0);","pos(s1.size()+1,vector","pos){","pos,int","pos,str","pos;","pos=\"","pos=0;","pos=new","pos[0][0]=1;","pos[s[i]]=i;","pos[s[last]]++;","pos_1=0,pos_2=0;","posit","position.","possibl","possible,","possible.","postord","postordertraversal(treenode*","pow(x,","power","pr=s.substr(0,i);","pre","pre=","pre=head;","pre=new","pre=newhead;","pre=now","pre=pr","pre=root;","preced","prefer","prefix","prefix,","prehigh,int","prelow,int","preorder","preorder,","preordertraversal(treenode*","prerequisit","prerequisites)","prerequisites,","prerequisites.","preserv","pretti","prev","prev=null;","prev=prev","prev=root","prev=wordbreak(pr,worddict);","previou","price","price.","price:prices){","prices)","prices.push_back(int_min);","prices[i","prime","print","priority_queue,cmp>","private:","pro.pop();","pro.push(list);","pro.push(tmp","pro;","problem","problem,","problem.","process","process:","produc","product","product.","productexceptself(vector&","profit","profit.","program","programmers,","properties:","public:","purpos","push","push(int","push(x)","push,","push进vector，访问到下一个时，当前interval就是下一个interv","puzzl","puzzle.","q","q)","q.pop();","q.pop_front();","q.push(pos);","q.push(root);","q.push(root);q.push(tmp);","q.push(t","q.push(tmp);","q.push(tq","q1,q2;","q1.pop();","q1.push(root);","q1.push(tmp","q2.pop();","q2.push(tmp","q;","qu.empty();","qu.pop();","qu.push(cache);","qu.push(fr","qu.push(left","qu.push(pos);","qu.push(right","qu.push(root","qu.push(root);","qu.push(t","qu.push(tmp);","qu.push(x);","qu;","queen","queens'","question","queue","queue),","queue).","queue.","queue.empty();","queue.peek();","queue.pop();","queue.push(1);","queue.push(2);","queues.","quotient","r","r);","r,int","r:right){","r;","r=maxtosum(root","r=mid;","r=t","rabb","rabbbit","rain","raining.","rais","random","rang","range.","range:","rangebitwiseand(int","range语句，得到nums所有的数字。然后和nums[po","rank=new","rank[father_i]++;","rate","ratings)","re","re+=res[i];","re;","reach","read","readme.md","rearrang","reassigning,","recov","recovertree(treenode*","rectangl","rectilinear","recurs","recursion(nums,","recursion(vector","recursively.","red,","reduc","refer","reference,","reference.","region","region.","regular","rel","remain","remain.","remov","removeduplicates(nums);","removeduplicates(vector&","removeelement(nums,","removeelement(vector&","removenthfromend(listnode*","reorder","reorder(listnode*","reorderlist(listnode*","repeat","repetition,","repetition.","replac","repres","represent","represent.","represented.","requir","requirements:","res(10);","res(2,","res(n+1);","res(n,1);","res(n,vector(n,0));","res(nr*nc);","res(s.size()+1,false);","res);","res){","res*res;","res++;","res+=(a%10)*(a%10);","res+=(add*10+root","res+=(prices[i]","res+=root","res+=sign*num;","res+=str;","res,","res,int","res,str","res,vector","res,vector&tmp,int","res,vector&tmp,vector&","res.back();","res.erase(0,1);","res.insert(res.end(),prev.begin(),prev.end());","res.push_back(atoi(input.c_str()));","res.push_back(candidate1);","res.push_back(candidate2);","res.push_back(combination);","res.push_back(l","res.push_back(l*r);","res.push_back(l+r);","res.push_back(m.second);","res.push_back(now","res.push_back(num);","res.push_back(nums);","res.push_back(p","res.push_back(root","res.push_back(root);","res.push_back(s);","res.push_back(s.substr(i","res.push_back(s[j]);","res.push_back(tmp","res.push_back(tmp);","res.push_back(ve);","res.push_back(x%10);","res.push_back({nums[0]});","res:res;","res;","res=\"\";","res=0,num=0,sign=1;","res=0;","res=1;","res=2;","res==int_max?0:res;","res=cache;","res=int_max;","res=int_min;","res=max(res,dp[i][j]);","res=max(res,i","res=max(res,pric","res=max(res,tmp);","res=min(res,fast","res=new","res=num;","res=nums.size();","res=nums[0];","res=peek();","res=res*ops.top()+number.top();","res=right","res=root","res=string(max(al,bl)+1,'0');","res={{}};","res[0]=1;res[1]=1;","res[0]=true;","res[1]=1;res[2]=2;","res[i+1]='1';","res[i+1]=true;","res[i]=max(res[i],res[i+1]+1);","res[right]=x%10;","res^=num;","reset","respect","respectively.","restor","restoreipaddresses(str","result","retain","retriev","return","return:","return;","returned.","returns.","reus","revers","reverse(int","reverse(nums.begin()","reverse(res.begin(),res.end());","reverse(s.begin(),s.end());","reversebetween(listnode*","reversewords(str","rg","rgeat","rgtae","ri:right){","ri;","right","right(null)","right){","right++;","right++;left","right,","right.","right:","right=diffwaystocompute(input.substr(i+1));","right=genera(i+1,end,size);","right=height.size()","right=mid;","right=nums.size()","right=qu.front();","right[siz","righth)>1)","righth=isbalan(root","rightmax=height[right];","rightsideview(treenode*","ro","robot","robot'","roll","roll.","rollmax","rollmax)","rollmax.length","rollmax;","rollmax[i](1","rolls.","root","root(new","root)","root){","root,","root,int","root.","root;","root==null?","root=new","root=prev","root=root","root=st.top();","root=todo.top();todo.pop();","rors","rose","rotat","rotate(vector>&","rotateright(listnode*","rotation.","route,","routine?","row","row.","row=board.size();","row=false,col=false;","rows,","rows:","rpn","rs(s);","rules.","rules:","run","runtim","s","s(nums.begin(),nums.end());","s)","s,","s.","s1","s1+s2>s2+s1;});","s1,","s1,string","s1.","s1=max(s1,b1+p);","s2","s2)","s2){return","s2,","s2.","s2;","s2=max(s2,b2+p);","s3","s3)","s3,","s;","same","same.","sand","satisfi","schedul","scrambl","se(k);","se(nums.size());","se.erase(nums[i","se.insert(num);","se;","search","search(\".ad\")","search(\"b..\")","search(\"bad\")","search(\"pad\")","search(board,","search(vector","search(vector&","search(word)","search.","searchinsert(vector&","searchmatrix(vector>&","searchrange(vector&","second","second=null;","second=root;","second=second","second=tmp;","section)","see","segment","segmentation.","self","sell","sentenc","sentences.","separ","sequenc","sequence).","sequence,","sequence.","sequenti","seri","set","set).","setzeroes(vector>&","seven","se{1","shade","share","shortest","shortestpalindrome(str","shortpro(prices);","shouldn’t","shown","side","sign","sign=","sign=1;","signature.","similarly,","simpl","simul","singl","singlenumber(vector&","singli","size","size){","size++;","size,","size=1;","size=needle.size()","size=nums.size();","size是n","ski","skipa","skipb","slant","slide","slow","slow+1);","slow=happy(slow);","slow=head,*fast=head;","slow=head;","slow=n;","slow=slow","smallest","softwar","solut","solution,","solution?","solv","solvable.","solvenqueens(int","sometim","sort","sort(ins.begin(),","sort(nums.begin(),nums.end());","sort(tmp.begin(),tmp.end(),[](str","sort.","sort:","sortcolors(vector&","sortedarraytobst(vector&","sortlist(listnode*","sort。将所有的字符串sort一下，排序之后相等的字符串，就可以认定为一个group。","space","space,","space.","space?","spaces.","specif","spiral","spiralorder(vector>&","splice","split","sqrt(int","sqrt(x)","squar","st.empty();","st.pop();","st.push(ch);","st.push(i);","st.push(root","st.push(root);","st.push(slow","st.push(t","st.push(tmp","st.push(x);","st1.pop();","st1.push(0);","st1.push(tmp);","st1;","st2.pop();","st2.push(ch);","st2;","st;","stack","stack).","stack.","stack.empty();","stack.pop();","stack.push(1);","stack.push(2);","stack.top();","stacks.","stack。如果需要peek或者pop，直接返回output","stack中。因为，只要反转一次，就不用再复原了，直接保持状态，之后就可以不用反转。","stack中所有元素push到output中。这里确实需要o(n)的时间，但是和平均o(1)不矛盾。","stack为空，就将input","stack和output","stack有普通stack的接口，能够处理正常stack的数据。所以肯定需要一个stack来充当正常的stack。","stack的元素。如果output","stair","stand","standard","start","start(0),","start(s),","start,int","start.","start;","start=0,total=0,tank=0;","start=1;","startpos=","static","static_cast(ch","station","station'","station.","stations.","stay),","std::sort(candidates.begin(),","std::vector","step","step2=step;","step=0;","step=numrows*2","steps.","stock","stock),","store","str(\"\")","str:tmp)","str;","straight","string","string&endword,","string&word,int","string).","string,","string.","string?","strings,","strings.","strs)","strs[0];","strstr()","strstr().","strstr(string","struct","structur","structure.","studi","sub","subarray","subarray.","subject","subsequ","subsequences.md","subset","subsets(vector&","subsets.","subsetswithdup(vector&","substr","substring,","substring.","subtl","subtre","success","such","such:","sudoku","sum","sum)","sum,","sum,int","sum,treenode*","sum.","sum;","sum=0;","sum=nums[0]+nums[1]+nums[2];","sumnumber(root","sumnumber(root);","sumnumber(treenode*","sumnumbers(treenode*","sum一个意思，只是这里需要得到路径上的所有值。这就只能使用回溯法解决问题了。","sum中第二个方法，左右指针法。现在回顾一下two","sum为基础来解决这题。这里要求3个数加起来为0，也就是两个数加起来为零减去另一个数，这样就成了two","sum了，首先sort一下数组，这样，之后two","sum双指针法，首先sort数组，然后左右向中间逼近。这里面也用到了一中额外条件，就是数组已经有序，如果和小于target，就将小的变大一点，也就是left++，反之大的减小。","sum和four","sum的基础，但是这里需要返回的是原来数组的下标值，而不是数字本身。所以这里用这种方法得不到答案","sum的时候能直接用左右指针逼近需求值。记得考虑如何识别一样的结果，这里题目要求不能有重复结果。","support","suppos","surround","swap","swap(nums[k],","swap(t","swappairs(listnode*","symbol","symmetr","symmetric:","t","t(1)","t(n)","t(n,'.');","t(n/2)","t(n/4)","t)","t,","t.","t.back(),so","t.insert(a);","t.root","t;","t=0;","t=board[i][j];","t=q.front();","t=qu.front();","t=st.top();","t=st.top();st.pop();","ta","table保存之前出现的值，如果出现重复的，就return。","tae","tail","tail=head;","tail=tail","take","take,","take.","tank","target","target)","target,","target.","tarversal但是leetcode可能是有bug，代码是正确的但是最后得不到合理的结果。","tc(k+1,make_pair(int_min,0));","telephon","temp","temp;","th","thank","that:","the\"","there.","there?","therefor","therefore,","think","third","this:","thoguht","those","thought","thought中已经分析了时间复杂度，这里就不多说了","three","threesum(vector&","threesumclosest(vector&","through","time","time.","time/space.","time?","times).","times){","times,","times.","times=qu.size();","tips：这里能用int表示，一是因为只有4个字符，二是长度只有10.如果有5个字符就需要3个bit，9个字符就需要4个bit。长度为10的话，int类型就不能表示所有的substr了，需要64位的longlong来辅助解题了。如果再长，就还是用字符串解题吧","tmp","tmp(1,1);","tmp){","tmp+=2;","tmp+=st1.top();","tmp,int","tmp,vector&","tmp.clear();","tmp.pop_back();","tmp.push_back(1);","tmp.push_back(i);","tmp.push_back(nums[i]);","tmp.push_back(nums[left]);","tmp.push_back(nums[right]);","tmp.push_back(root","tmp.push_back(to_string(num));","tmp.push_back(tq","tmp;","tmp=1;","tmp=di,","tmp=first","tmp=head","tmp=head;","tmp=new","tmp=pre","tmp=q1.top();","tmp=q2.top();","tmp=res;","tmp=root","tmp=s.substr(i);","tmp=st.top();","tmp=st1.top();","tmp=static_cast(t);","tmp=tmp","tmp[i]+=tmp[i","tmp{};","to.","to:","todo.push(root);","todo;","togeth","together.","tokens)","top","top()","top,","top.","top?","top操作：可以像上面一样，使用o(n)时间得到顶元素。但是也可以使用cache减少操作。时间复杂度降低到o(1)，在每次push的时候，将cache设置为push的元素。每次pop的时候，将cache重新设置为队列倒数第二个数。这样top操作直接返回cache即可","total","tou1","tou1=new","tou1=tou1","tou2","tou2=new","tou2=tou2","tou=tou2;","toward","tq=q.front();","trail","transact","transactions.","transform","transformation.","trap","trap(vector&","trapped.","travel","travers","travers(root","travers(root);","travers(treenode*","traversal很像，只是将输出值的地方改变了，在中序遍历中morris解法中，我们再进入右子树的时候将值打印，但是先序遍历的时候，我们在第一次访问到节点的时候就打印，morris具体过程可以去94题看思路","traversal，只需要o(1)的空间，时间复杂度还是控制在o(n)。极大的减少了空间。这里主要是利用了叶子节点大量的空指针。前面问题使用栈来辅助解决，是因为访问到后续节点的时候，不能够再回到根节点，这里用叶子节点的指针，指向后继节点，方便回到前面。","tree","tree).md)","tree,","tree.","tree:","treenod","treenode(","treenode(i);","treenode(int","treenode(int_min);","treenode(nums[left]);","treenode(nums[ma]);","treenode(preorder[prelow]);","treenode*","treenode*le=lowestcommonancestor(root","treenode*ri=lowestcommonancestor(root","trees)","trees,","trees.","tri","triangl","triangle)","triangle,","triangle.","trie","trie()","trienod","trienode()","trienode())","trienode();","triplet","triplets.","trivia:","trivial,","true","true,","true.","true;","truncat","truncated,","tweet","twice","twice.","two","two.","twosum(vector&","type","u","ud.pop();","ud.push(ch);","ud;","under","union_find","union_find(int","union_find{","uniqu","unique.","uniquepaths(int","uniquepathswithobstacles(vector>&","unit","unit.","unknown","unlimit","unordered_map","unordered_map>","unordered_set","unordered_set&","unordered_setwordlists(wordlist.begin(),wordlist.end());","unsort","until","up","up:","updat","update:更新图片的时候，发现discuss有更好的算法，我这里需要3次遍历链表，其实开始两次得到链表长度的目的就是让两个链表能同步开头，最后一起结束，还有一种办法能达到这个目的。两个链表一起移动，到达尾节点的时候，两个链表交换继续执行。也就是a到尾节点的时候，领tmpa=headb，b到尾节点的时候，令tmpb=heada。这样，也能消除两个链表之间的差距","uppper_bound(int","up中提到里，如果是c程序员，尝试使用o(1)空间解决。","up也提出，有o(n)和o(nlgn)的办法。","up明确静止这么做。为了在o(n)时间做完，还是得先保存一些结果。","up要求能不能不用string结题。于是又开始想如何不用string，其实在c++中string的结构和vector很像，动态数组vector也很适合存储数字中的所有位。","us","val","val(x),","val)","val))","val);","val,","val:nums)","val;","valid","valid,","valid.","valu","value.","values.","ve(1);","ve.clear();","ve.push_back(tmp","ve.resize(q.size());","ve;","ve[i]=t","ve[ve.size()","vector","vector&","vector(board[0].size(),","vector(p.size()+1,false);","vector>","vector>&","vectorres(s.size()+1);","vectorres;","vector{};","veri","version","vertic","vertically.","view","visit(board.size(),","visit,","visit[i][j]","void","want","want.","water","water.","way","way。","way就可以加上前两次的decod","way，如果当前的数字不等于0，就能加上前一个次的decod","well","well.","what.","whether","while(","while(!next.empty()){","while(!pro.empty()){","while(!q.empty()","while(!q.empty()){","while(!q1.empty()){","while(!q2.empty()){","while(!qu.empty()){","while(!st.empty()){","while(1){","while(a!=b){","while(a){","while(begin","while(count==0){","while(dd>=di){","while(end0)","while(fast","while(fast!=null&&fast","while(fast&&fast","while(fast=s){","while(head","while(head&&head","while(heada){","while(headb){","while(i","while(i&next,string&needle){","while(i&next,string&s){","while(i>=0&&j","while(i>=0&&jtarget)","while(index","while(input.size()){","while(j>=0){","while(k","while(l=x)","while(left","while(left=nums[left])","while(left=target)","while(left>=0&&rightres){","while(leftnums[mid]&&target=nums[left]&&target","while(leftsum)","while(lefttarget)","while(lx)","while(n","while(next&&next","while(now){","while(nstep[pos%2]){","while(nstep[step%2]){","while(pr","while(prev","while(res[0]=='0'&&res.size()>1){","while(root","while(root!=null){","while(root){","while(root||!st.empty()){","while(root||!todo.empty()){","while(s.count(y))","while(s[end]=='","while(s[i]=='","while(slow!=fast){","while(slow){","while(tail","while(tmp){","while(tmp0^divisor>0?","while(tou1","while(true){","while(x){","white","white,","whiteboard","why?","width","widthofbinarytree(treenode*","wikipedia:","wildcard","window","window,","window.","within","without","won't","word","word)","word,","word.","word1","word1,","word2","word2)","word2,","word2.","word:","word=next.front();","wordbreak(s,worddict);","wordbreak(str","wordbreak(string&s,","worddict","worddict)","worddict=unordered_set(worddict.begin(),worddict.end());","wordlist","wordlist)","wordlist,","wordlists)","wordlists){","words)","words,","words.","world!","write","written","wrote","x","x)","x).","x){","x,","x.","x/=10;","x中查找是否有满足mid*mid=x的情况","y","y)","y);","y++;","y=val+1;","yourself","z","z,","z.","zero","zero,","zero.","zigzag","zigzaglevelorder(treenode*","zigzag层次遍历，分析之后得知，可以用两个栈来辅助遍历。参差遍历本来是用一个队列就行。但是这个用两个栈，然后定义一个bool变量指定现在是左到右还是右到左，分别用一个栈辅助遍历。最后处理方式和层次遍历一样","{","{0,","{1,","{null};","{{","{}","{};","||","}","}//上面是递归基","};","}els","}else{","“the","→","−","≤","≥","⌊","⌋","。如果下一次碰到这个num，就查看index相差是否小于k，这是可行的，但是空间复杂度大了一点。","。如果为0，重新更换数字。因为次数肯定是一半以上，所以最后结果肯定是major","一个小朋友等级比旁边的高的话，他的糖果必须必旁边的多。旁边有两个，首先我们让所有小孩向左看时，满足条件，然后让所有小孩往右看时满足条件，最后就能有结果。","一个很有名的题目了，这是二分查找的二维形式。这里只要求每行每列的右边和下边都比他大，上面和左边都比他小。那么如果我们从左下角出发。每次都是往上或者右移动，这样就能保证要不就是往比他大的地方移动要不就是小的。","一个循环左右指针逼近，时间复杂度o(n)。","一个循环线性处理一个字符串，时间复杂度o(n)。","一个循环遍历数组，时间是o(n)，最开始拿到题目的时候直接类比成了括号匹配，就动手做了。其实括号匹配比这个多了一点位置上的限制，而这里只要统计数字即可。直接定义4个变量会更快，直接用4个寄存器存count，最后比较。","一次循环使用以为数组保存最后结果，复杂度时间o(n)","一次循环遍历数组，时间复杂度o(n)","一次遍历出结果，时间复杂度是o(n)","一次遍历处理数组，时间复杂度o(n),使用一维数组保存结果，空间复杂度o(n)","一次遍历就可以得到答案，时间复杂度o(n)","一次遍历数组，时间复杂度o(n)","一次遍历数组，时间复杂度o(n)。没有用额外空间存储数据，空间复杂度是o(1)。符合要求","一次遍历解决问题，使用栈来辅助解决。对于数组，如果碰到顺序递增，就将当前数字压入栈中，如果当前height小于栈顶值，就将栈顶值弹出，并计算以弹出值为高度的矩形面积大小。这里关键是如何去计算矩形的宽，根据我们之前的算法，可以知道，当前栈顶的值肯定代表的是当前访问过的，剩下的最大值，因为比他更大的值在之前肯定被弹出计算了，那么，可以用当前index减去当前栈顶代表的index，就能表示矩形的宽了。","一次遍历解决问题，时间复杂度o(n)","一次遍历解决问题，第一步能走到的地方就是nums[0]，每到一个地方，确定当前位置能走到的最大值。在一步走完之后，确定下一个最大能走到的范围。","一次遍历解决，时间复杂度o(n)","一次遍历，时间复杂度o(n)","一次遍历，时间复杂度o(n)，用了map和set保存映射关系，空间复杂度o(n)","一次遍历，时间复杂度是o(n)，使用栈辅助，空间复杂度也是o(n)","一般的做法是，一直弹出，直到最后一个数，返回，然后将栈复原。但是这里直接保存在output","上一题时间复杂度是o(lgn),这里加入了重复数组计算，如果所有数字都是重复的，那么处理重复数字的时间复杂度会达到o(n)，所以这里时间复杂度是o(n)","上一题的拓展版本，可以有重复数字，我们需要处理的也是重复数字。每次对于最左边的数字，如果和右边的数字重复，就将left++。之后的处理基本和上一题一样了","上面介绍的是回溯的情况，其实可以不需要回溯。因为肯定有4个地方需要我们放置数字，我们只需要3个循环，每个循环处理1","上面代码是9个月前写的。但是还不知道auto情有可原，毕竟是做到后面几题才慢慢用起来的。但是循环里的处理感觉太不简洁了，看着很难受。所以改成了现在的代码，虽然时间复杂度是一样的，但是代码更加易读，看着舒服","上面那个正方形代表了右侧边的最大值，左边正方形的长度代表了下侧边的最大值。左上正方形代表了左上角点的最大值。他们的最小值就是当前正方形的边长。这样就能用动态规划的方式，一次遍历二维数组得到结果","下午上课忽然想通了中午异或的问题，我中午出问题的代码是board[i][j]^=1.大家应该都知道，char是1个字节的，有8位，但是数字1是0000001，所以异或之后只有最后一位会改变。只改变最后一位的话，很容易导致异或之后和其他字符相同。","下面给出两种代码","不仅如此，还希望能在o(1)时间内返回最小值，这就希望我们保存最小值，如果只用一个值保存，肯定是不行的。因为如果这个最小值被弹出，找到下一个最小值的时间需要o(n)。这里用第二个栈来保存最小值，因为最得到栈中的最小值过程也需要有先进后出的特性。","不管是使用两个栈还是一个栈，时间复杂度都是o(n),但是一个栈的方法明显好很多。","不难看出，这里时间和空间都是复杂度o(1)","两个代码时间复杂度分析，可能大家都认为第一个算法更好。但是运行下来，反而是第二个代码更快，我认为是第一个代码修改了指针中的值，修改值可能比读取一个值消耗的时间多很多，导致用第二个代码传参数更好。","两个数异或时间复杂度o(1)，遍历一遍出结果，时间复杂度o(n)","两个算法都是需要将树遍历一遍才能得到答案，时间和空间复杂度都是o(n)。","两个间隔能合并，就是两个范围有重合。重合的话存在两种情况，第一种是左边重合，一种是右边重合。但是如果程序中同时考虑两个的话，情况会复杂很多。所以首先按照做范围排序，消除左边影响。然后一直看右边，如果当前interval与前一个interval重合，合并两个interval。然后继续看下一个，如果两个不重合，将当前interv","主要要实现的是top和pop操作。其他操作不需要改动。","之前也提到了，碰到链表题并且返回值是链表的情况下，可以首先考虑能否用递归解题。这题正好可以。和之前链表加法很相似，可能还简单一点","之前又题目做过合并两个有序链表的，这里是k个。可以借助归并排序的思路，每个两两合并，合并到最后就可以了。也可以用堆的来做。用最小堆，每次从堆中取出最小的链表，然后将这个链表的下一个值重新加入到堆中。在c++中，可以用stl自带的heap类算法做这题，也可以用直接用优先队列来做这题。","之前我一直搞不清这几个二分查找的本质区别和如何去写。这个我总结出了规律，对于lower_bound，要找到第一个target，在mid>=target的时候，将right=mid，最后一次查找的时候，right就会是第一个target。左开右闭表示法，最后当left和right差1的时候，mid肯定等于left，所以最后left会赋值给right+1。left和right会在第一个target处重合。","之前的值。处理一个数据的时候首先在hash表中对比以下，如果存在就返回。这种方法在之后很多能一次便利出结果的解答里都会出现，用一个hash表保存前面遍历的状态，之后拿到状态再来对比。","乍一看发现只要排好序，然后得到两两直接差值的最大值就行了。问题是这里要求我们使用线性时间解决问题，使用普通的比较排序，最快的就是快排，时间复杂度是o(lgn)。使用比较排序是不行的，这里需要使用线性时间排序算法，桶排序就很适合这里。桶排序原理是将数据按组分入桶中，对于桶里的数在进行线性时间排序。但是对于这题，巧妙的处理可以省去桶里数据排序这一步。","也是一次遍历数组，时间复杂度o(n)","二分查找，每次可以排除一半的数字。时间复杂度o(lgx)","二叉树先跟遍历，递归方法很好做，几行代码就能搞定。这里还是和中序遍历一样，有三种方法。除了简单的递归算法，难一点的就是迭代解法。","二叉树层次遍历，使用queue辅助解决，必须掌握的题目","二叉树的中序遍历问题。这种问题用递归的方法是很简单的。但是还是要知道迭代的写法。毕竟如果节点很多的话，那么多递归函数，栈开销会很大。","二叉树问题，判断是否不是平衡二叉树。平衡二叉树定义是左右子树高度差要小于等于1.于是这题变成了类似求二叉树高度的问题。之前也做过二叉树高度问题，直接递归解决。这里只需要在求出高度之后加入一个判断。如果不是平衡的如何处理。求高度的函数，返回值必须是int而不是bool，这就是我们面临的问题。一种解决方案是把求高度的照搬过来，加一个全局变量，如果不平衡，全局变量为false。我们这里用另一种方法，如果不平衡，返回int_max.由于题目中不存在这么大的二叉树，所以int_max和任何子树组合都是不平衡的，最后int_max会传递到调用函数，最后判断是否为int_max来觉得返回true还是fals","二维动态规划，遍历一个二维数组。最后时间复杂度o(n²)","于是开始找规律，发现除了第一行和最后一行。中间每行都是两个纵向字符中夹着一个。首先找纵向字符的规律，每一行两个纵向字符位置差是，numrows*2","于是我参考了下discuss，发现有人在进入下一层的时候，将index","以之前的two","以第一个字符串为基准，从第一个字符开始，对比所有字符串。出现不一样的就返回，都是一样的就加入到返回值后面。","但是第二中算法在遍历中每次操作的次数明显比第一种少，并且简洁。所以第二种算法更好","但是链表找第倒数第几个节点有个小技巧，就是前后指针。比如这里的倒数第n个节点，我们首先让前指针先走n步，然后后指针和前指针一起行动。当前指针到终点的时候，后指针这时候正好在倒数第n个节点。这样就能实现一边遍历就能删除节点。","使用hash表存放之前访问过的信息，可以保证每个位置只访问一次。这也类似一些一维数组题目，需要我们在o(n)时间复杂度内解决问题。这里需要保存数独规则下，当前位置对后面位置的影响。在数独中，行和列以及block中不能出现一样的数字。每次将访问的数字3个规则保存到hash表中，这种思路其实不难得出，难得出的是该如果在hash表中保存信息。如何保存可以看代码。","使用stack实现一个queue，这里需要两个栈。第一次做的时候，我实现的pop操作，时间复杂度为o(n)，并且认为应该没有地方能改了。但是这次抱着试一试的心态去看了discuss，发现确实有很厉害的算法，将所有操作的平均时间复杂度降低到了o(1)","使用一个input","使用一个数组表示给所有小朋友分配的糖果，开始所有的小朋友都是1个。","使用两个栈的方法肯定还有优化的地方，去看了discuss之后，发现可以直接使用一个队列来做。最后遍历的结果需保存在一个vector中，我们默认只能push_back但是其实可以先定义好vector，最后看情况从左右分别将结果放置进去。","使用异或的性质，两个同样的数，异或之后结果相同。所以将所有数异或就行","使用栈，一次遍历得到结果，时间复杂度o(n)","使用队列实现一个栈。队列和栈的性质是不同的，一个是fifo一个是filo。所以使用队列实现的栈，时间效率肯定很低。","假定有n个字符串，每个字符串平均长度是m，对每个字符排序时间复杂度是o(nlgn),两个字符串比较时间复杂度是o(n)，然后需要定义一个hashmap保存之前遍历的字符串的结果。最后时间复杂度是o(m*nlgn)","做多了题目之后会有感觉，这题用动态规划解决没问题。首先就用动态规划问题想。如果两个字符串已经匹配完毕，s串加入一个新字符，如果这个字符和t串最后一个字符不匹配。没有事情发生，总匹配数依然是没加入之前的结果。如果匹配，就是之前的s串和去掉最后一个字符的t串匹配的结果加上之前匹配结果。","做这题之前，我一直没有真正理解kmp。只是会用kmp，知道他是一种匹配算法。kmp中匹配字符串最后的index表明的是匹配字符串最前面一段和被匹配字符串最后一段的匹配情况。用在这里，恰恰合适。将字符串翻转之后，匹配出相同的前后缀，最后再将前缀加到原来字符串前面即可","其中：(horse,ro)代表增加一个，(hors,ros)代表减少一个，(hors,ro)代表替换操作，我们使用二维数组解决此题。但是这题可以优化到只用一维数组，这里只给出一维数组的解答。","其实上面这个方法是可行的，但是还需要考虑优化。如果一共只有n个价格，那么最多就进行n/2次交易。换句话说，如果k>n/2，那么就可以认为可以进行任意次交易。将时间复杂度降到o(n).如果不这么处理的话，时间复杂度降是o(kn)，空间复杂度也会达到o(k)。所以加一个短处理对时间复杂度影响挺大的","其实和之前动态规划问题得到数组中的值有的像，此位置的值等于上两个位置的值相加。可以用二维数组解决，但是这里是可以优化到只用一维数组。每次重复使用即可。","其实整个算法的逻辑是不需要判断size==1的，也就是第一行。但是如果不判断的话，就会在循环中一直判断并且调用push_back到res中，会及其耗时间。加上第一个判断之后，整个代码运行时会快很多的。","其实是一道典型的回溯法问题。首先第一个位置放一个字符，然后进如下一个函数，运行完回溯之后，放两个字符。然后是3个。中间判断非法情况，如果长度大于1并且第一个字符是'0',显然不行。如果转化为数字之后，数值大于255，显然也是不行的。如果所有情况都满足，最后将结果push到res中。","其实是二分查考的变种，一个有序数组，rotate之后数组一半还是顺序的。二分查找只要确定一半是否满足","其实这题本质上，就是将给定的数组，排个序。原始的排序算法，是将数字按照顺序排列，但是我们这里显然需要自己定义自己的顺序。这个顺序也很好定义，就是a+b>b+a。可以仔细理解一下，比较函数这么写的意义。","典型的动态规划问题，从底部出发向上遍历。每次选择两个子节点中最小的那一个，并且将它加到自己当前值上。重复操作，知道到根节点。","典型的动态规划问题，可以这么入手去思考状态转移，如果现在得到结果为res，新来一个数字，如果是正数，那么新的res变为res*newnum。但是如果来的是一个负数，就不好解决了，所以我们不仅要保存最大值（也就是结果），还要保存一个最小值，负数乘一个最小的负数也是有可能得到最大值的。","典型的动态规划问题，当前数字如果可以和前面数字组合成为一个合法的字符，当前decod","典型的动态规划问题，达到一个点的所有方案，是其上一个点和左边点的方案之和。因为我到这个点可以有两种情况走过来，一种是从上面往下走，一种是从左边往右走。","典型的回溯法，没有任何需要剪枝的地方，直接深度优先遍历所有的结果，并保存。","典型的计数排序，计数排序时间复杂度是","典型的递归解决二叉树问题","函数中进行的都是o(1)的操作，主要需要分析函数运行了多少次。分析了很久，得出时间变化满足很复杂，这里就不分析了","分析一次example4的二维数组是如何构造的","分析可以知道，价格走向只有上面两种，要不是一直递增，要不就是下降。这样就可以归纳成一般情况，写出代码.注意写成一般情况下时，要注意最后的状态，这里最后push一个int_min，就能处理所有情况","初始化是t.size())。如果size为0，就可以将当前状态加入到结果。并且移动头指针，逼近尾指针。","初次拿到这题想到的方法肯定是，首先判断正负，然后按位处理。每次取模得到个位，将得到的个位加到存储的结果中。这种想法是没有问题，但是我觉得用字符串翻转更加易懂，并且需要考虑的条件比较少。首先判断正负，然后将数字转化为字符串。之后调用翻转函数。最后将翻转过的字符串变回数字，这时候要注意的是，首先处理末尾的0，这时候会被翻转到首位，然后考虑如果现在字符串大于int_max,也就是2^31","删除倒数第n个链表中的节点。链表不像数组，不能直接按index访问。所有人第一次做这种题肯定是想先遍历一遍得出长度，然后在删除倒数第n个。","判断是否scramble，可以用递归的方式进行。如果一个字符串的左边和另一个字符串的左边是scramble，右边和右边是scramble。或者是，左右，右左是scramble字符串的话。那么这两个字符串就是scramble字符串。可以通过剪枝加快判断，首先判断两个字符串是否包含同样的字符，两个字符串中包含的字符不一样，就可以直接返回。虽然这里用了o(n)的时间，但是能剪去很多分支，是值得的。","判断是否有重复数组，o(n)的解法就是使用一个hash","利用二分查找解决问题，时间复杂度o(lgn)","利用动态规划来解决斐波拉契数列问题，时间复杂度o(n)，第二种方法相对于第一种方法减少了线性数组的开销，空间复杂度从o(n)减到了o(1)。","前序遍历和中序遍历转二叉树，首先利用前序遍历第一个值就是当前根节点的性质。找到根节点，只有去中序遍历中找到根节点对应的位置，位置左边就是左子树右边是右子树。然后对于左右子树，得到他们的大小，去前序遍历中找到他们对应的位置。然后对于左右子树，递归解决。","加入备忘录之后，能减少很多额外计算了","原始版本是二维数组版本，遍历二维数组即可，时间复杂度o(n²)。优化后的版本使用一维数组，空间复杂度降到了o(n),不仅如此，其时间也会降低","又是链表问题，并且直接返回一个链表。和之前做链表题一样直接用递归的形式解决","只能买一次商品，一次交易。那么我们从第一天开始买商品，第一天必须买，因为只有一次机会。到了第二天的时候，如果第二天比第一天贵，我们就得到利润。如果第二天比第一天便宜，那我们就第二天再买。这里转化成代码的意思就是，我们遍历数组的过程，每次都记录最小值，当做我们购买的价格，每次都用当前值减去最小值，就是我们的利润。","只需要一次遍历字符串，时间复杂度o(n)，使用栈保存结果，最坏情况下空间复杂度o(n)","可以借助之前只能买一次的思想，只是这里是能买很多次。只要有利润，我们都加上。","可以将状态转化关系列出来，发现one状态基本等于one^nums[i],除了当two为1的时候,one直接为0,得出one的转换关系为one=(one\\^nums[i])&~two","可以用动态规划解决，用一个数组保存结果，每一位表示0","可以看到其实就是将链表倒数第k个位置截断，然后拼接到前面。知道这个意思之后，就只需要考虑如果k大于size的问题了。如果k等于size，链表长度不变，这就很明显，我们可以令k=k%size。最后截断链表即可","可以知道，所有偶数肯定不是质数。直接从3开始计算，排除所有3的倍数。注意要从33开始，也就是9开始，而不是3或者是32=6开始。因为6已经在从2开始计算中计算过了。再比如计算5的倍数，不需要计算53=15，因为之前计算3的时候计算过35=15了。","可能讲述的还是不清晰，建议先做简单的动态规划解法字符串匹配问题。比如最长公共子序列等问题，再来做这题会清晰很多。","合并两个有序数组，这也是归并排序中必不可少的一步，如何做好这一步，速度快并且不溢出，还是有点难度的。我们归并排序的时候，一般是将前半部分数组复制，后半部分数组保存。但是这里是将后半部分数组赋值，前半部分保存下来。我们需要尽可能的利用前面保存的数据，能不改变就不改变。所以我们从后往前合并。如果nums2已经用完了，这时候，nums1前面的数据就能直接使用了，而不需要改变。","同样还有一种快慢指针，多用于求链表中点的。快慢指针都是从head点出发，一个每次走两步一个每次走一步，当快指针到tail节点的时候，慢指针正好在中点。","同理得到two的转化也基本都是异或，除了第一个状态的时候，0","后序遍历和中序遍历得到二叉树本质和上一题没区别。只是后序遍历的根节点出现在最后面。将前一题的算法修改下即可","和上一题一样，时间复杂度o(n),空间复杂度o(1)","和上一题一样，甚至比上一题简单，使用递归解决","和上一题一样，这里更简单的是，已经直接排好序了。所以，我们只需要找出中间可能有交叉的interval。然后合并。前后没有交叉的interval，就不变，直接插入。","和上一题很类似，但是这里是所有的数字都出现3次，除了一个数字出现一次。上一题还可以用异或的性质，这里就没这么好用了。我开始对这题也是一脸懵逼，看了答案还是觉得没那么清晰。这里需要一些数字逻辑的基础，使用状态图来理解题目。","和上一题时间复杂度应该是一样的——o(n!)。但是最后时间会比上一个算法慢很多，原因就在于这里函数参数num没用引用传递。每次参数传递的时候，会复制所有的数字，时间开销会很大。","和上一题没什么不同，动态规划换汤不换药。上一题是路线的数量，这里是找到最小值。","和上一题类似，这里就是多了k个数字的限制。我第一次做这个题的时候，用了一个map保存数据，映射关系是num","和上一题计算数量不同，这里需要列出结果。","和上题一个类型，简化了一点。上一题需要输出所有的结果，这里不需要结果，只需要数字。对于上一题，我们保存一棵树开始和结束的位置。来映射他的结果，但是这里不需要，因为只要树的size固定好，能生成的所有的tree的数量也就出来了。这里使用一个数组保存结果","和之前jump","和之前一个接水的题目异曲同工，使用左右指针结题。哪边短，动哪边，最后两指针重合退出循环。中间维护左右相应的最大值，存水量等于最大值减去当前值。","和之前层次遍历一样，最后得到结果的时候reverse一下","和之前旋转矩阵题类似解答，可以移步到spiral","和之前的path","和十进制加法没什么不同，都是定义一个进位标志位，两数相加再加上标志位。得到的结果就是这一位，改变标志位。最后注意开头的0需要删除","唯一可能的解释，排序算法比o(n)算法快的理由就是，n不大，lgn小于o(n)解法前面的系数。","回归题目本身，这里我们在0","回溯法世家复杂度是o(2^n),很慢，但是这里加入了剪枝策略，还是一定程度上加快了运行速度的。","回溯法时间复杂度是o(2^n)的时间复杂度，这里加入了map的方式，会快一点。","因为规定了major","因为重复计算的是判断回文字符的部分，其实这个和复制相比就很小。下一题我么不需要返回结果只需要返回个数，这时候用动态规划显然更好","在discuss中看到一个很聪明的办法，直接用改动的先根遍历找到结果，改动的地方就是，访问顺序变为，先根后右再左。每次访问时，判断层次和结果大小的关系。因为是先访问右再左，每一层第一个访问的，肯定是最右边的节点。第一个访问的就直接push到结果。","在一次交易的基础上，在第一次交易的结果上，我们减去当前价格，也就是减去第二次购买的成本。每次遍历都计算此值，得到最大值，也就是第二次购买的最便宜的时候。","在函数中，处理方式就是，找到每个操作符，对操作符左右分别进行递归处理。","在整个算法中，to_string时间复杂度是o(n),reverse函数时间复杂度是o(n)，最后atol函数函数的时间复杂度也是o(n).算法中其他部分时间复杂度是o(1)。所以最后时间复杂度是o(n)。其实感觉直接用数学方法，每位处理可能比这个快一点，但是用字符串操作数字翻转问题还是很舒服的。","基本计算器，只有加减法，之前数据结构学习栈的时候，提到了可以直接用两个栈解决。这学期学习编译原理课，也学到了栈式计算机，也是提供简单的栈指令可以实现计算器。","复杂度时间和之前求三角形问题一样，都是o(n²)","如何证明这里不会将超过1/3的candidate排除呢？","如果first","如果下一天的价格比今天高，我们直接把利润加上。但是如果之后价格持续走高，我们先不加利润，一直往后看，直到最高的价格，我们用最高的价格减去最低的价格，这是利润增益。","如果不加记忆模式，时间复杂度就跟回溯法是一样的，但是加了记忆模式，算法快了很多，时间复杂度这里不好分析","如果两个字符不相等，则(horse,ros)=min((horse,ro),min((hors,ros),(hors,ro)))+1;","如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。","如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。","如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。","如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。","如果用深度优先搜索做这个题目，最后时间复杂度会是o(n)，因为会遍历所有节点，最后得到最浅的叶子节点。但是用广度优先搜索，只要找到第一个叶子节点就会返回，所以时间复杂度是降低很多的，不过应该也是o(n)","如果这题是求出最左的节点，按照上面的方法，直接用先根遍历就可以得出结果。","字典树的时空分析可以看前面几个文章介绍了","字符串处理操作。之前也总结了字符串题目的几种方法。动态规划，字符串匹配的一些算法，字典树等等。如果看到题目找不到思路，没有做过类似的，就使用这几种方法试试。","字符串比较中如果两个字符串大小差不多可能需要时间复杂度为o(n),如果字符串平均长度为m，数组平均长度为n，那么时间复杂度为o(nlgn*m)","字符串问题，这题其实和最长公共子串问题很像，使用二维数组保存结果，动态规划解决问题。","学习一门课程之前要学习先学课程，如果有两门课程是互相满足的，那就学不完。如果把这种关系构成一个图，第一个能学的课程一定是入度为0的。然后将第一个课程在图中删除，第二个能学的肯定也是入度为0的。这种处理就是拓扑排序。可以利用拓扑排序解决这题","定义一个left和一个right数组。保存从最左边和最右边开始，连续数的乘积。将所有的乘积都保存之后，再次遍历数组，就能在o(1)时间算出每个位置应该填的值了。","定义了一个二维数组，如果s的长度为m，p的长度为n。二维数组就是一个m*n的矩形。算法需要遍历这个二维数组，循环中时间复杂度为o(1)，最后时间复杂度是o(mn)","对二维矩阵操作，双重循环。最后时间复杂度是o(n²)","对于o(n)的算法，开始定义set的时候，要给他分配n的空间。因为stl里的alloc是动态递增空间的。如果空间不够，会重新开辟空间。所以提前分配好n的空间，能减少算法运行的时间和空间。","对于up_bound同理，只要将mid>=target改为mid>target即可。这样就会在刚好大于target的地方重合。我理解这两个二分查找也是用了很久时间，看文字肯定会有很多疑惑，可以反复看看代码，自习推敲。","对于一个二叉树来说，最好使用递归解决问题。这里返回值是一系列的二叉树。对于一个range，我们可以首先定好一个中间节点当做二叉树的根节点，然后比这个值小的当做左子树，大的当右子树。这里我们就可以将代码简化很多了。但是单就这样做还是不行，会有大量的重复计算，比如1","对于二维数组，每个节点最多访问两次，所以总的最多访问的次数是2*n².最后时间复杂度o(n²)","对于第一个算法，时间复杂度是o(kn)。对于第二个加了快速处理的方法，在leetcode上运行时间能降到4ms，复杂度分析应该要用均摊分析。也不太了解，就不多分析了。","对于第一个算法：回溯法时间复杂度是o(2^n)，但是这里应该不用那么久，遍历到后期，很多数中的数组都已经被加入，只需要直接continue；所以，这个算法还是不慢的","对于第二个算法：得出所有的排列，类似枚举法，一共需要执行n!次。每次时间复杂度是o(1)。最后时间复杂度就是o(n!).","对于这题来说最简单的方法就是，用双重循环遍历数组，得到从每一个地点开始的消耗量，要是能顺时针走完就返回index，这样也能ac，但是时间复杂度o(n²)。","对所有的节点遍历一遍得出结果，时间复杂度o(n)","对每个数操作一次，时间复杂度o(m+n)","对链表进行一次遍历，转置，循环中操作都是o(1)，最后时间复杂度o(n)","将所有质数加起来。描述的应该不是很清楚，可以仔细看看代码","将计算正方形的面积首先转化为计算正方形的边长，边长求出来了，面积自然不在话下。这里用二维数组中一个点代表一个正方形，二维数组的值代表边长。这个点是正方形的右下角。","就可以排除另一半。我们找到有序的一半之后，判断target是否期中，如果是就进入这一半查找否则进入另一半。这样每次排除一半，时间复杂度就是o(nlgn)","就想thought中说的那样，时间复杂度肯定是o(nlgn)，对于归并排序时间复杂度的详细分析，可以看看主定理。但是空间复杂度还是没到常数，空间复杂度也是o(nlgn)","就改了上一题一个条件，不能重复使用。在回溯进入下一个的函数的时候，将pos加一。而不是上一题那样不变","已知bst中有两个数字是错的，那么我们就找到两个错的位置就行。还是中序遍历，找到不是顺序增长的两个位置。记录下来，最后交换两个的值","帕斯卡三角形，三角形面积是o(n²)的，每个点都要计算，最后时间复杂度o(n²)","建图的过程时间复杂度和空间复杂度都是o(n²)，找到一个入度为0的节点，平均时间复杂度为o(n)。删除一个节点，时间复杂度o(n)。第二个循环平均进行n次，循环总的时间复杂度为o(n²)。最后时间复杂度o(n²)","开始将vector数据复制到unordered_set中，时间复杂度o(n).注意一定要使用这种办法而不是一个个插入的方法，如果一个个插入很可能耗时更多。然后遍历数组时间复杂度o(n),在循环中会再次遍历一遍顺序的数字，这里需要执行n次。","开始拿到这个题的时候，想法是直接构造一个二维数组，按照zigzag顺序把字符串存入其中。但是这种方法太慢了，也太占用空间了，很多地方都没有存数据。","开始状态00,然后依次是10,01,00","开始算法得到链表的size，时间复杂度o(n)。然后找到倒数第k个节点，最后","归并排序有两部分，一部分是对两半个链表排序，然后就排好序的链表合并，链表合并问题，我们之前的问题也讨论过了","很简单的题，时间复杂度o(n)","得到合法的bst，bst有个性质就是中序遍历结果是一个有序数组。所以我们直接中序遍历，每次保存前一个值，如果前一个值大于等于当前遍历的值，那么就不是一个合法的bst，否则就是合法的bst","得到子集问题，和之前的第一题相比，多了重复数字，在计算子集的时候，需要处理重复情况。这里可以用和第一题类似的回溯法。也可以一次次将新数字push_back到之前得到的结果中，得到新的子集。","得到所有排列问题，也是我们算法课将回溯法的一个例题。直接每次交换两个数字，将所有情况都交换一遍，就是所有排列。其实也可以用递归的思想解释问题。首先将一个数字交换到index","得到所有排列，和之前组合数相加得到target很像。这里直接使用回溯法，加上一个位置数组，区分是否已经加入新组合。","得到所有的子集问题，回溯法时间复杂度o(2^n)。每个数字可以出现一个也可以不出现，每个数字都会进行两次计算，两个分支。最后得到2^n","得到最小公共祖先，对于bst来说不是很难，毕竟bst是有自己的“顺序”的，如果当前节点的值在给定的两个节点之间，直接可以返回当前节点。因为小的那个肯定在左子树，大的肯定在右子树","得到最浅的叶子节点的深度，直接用广度优先搜索即可，广度优先搜索有找的极值的性质","得到第k个数，这里其实可以利用之前得到数组中k大的数的解法。只是之前那个是要用o(n)时间将第k个数归位，这里是用o(n)时间得到当前root是第几大的数。对于bst来说，只要得到左子节点位置即可","得到第一个缺失的正数，由于不需要考虑负数，这里可以很好地用数组下标对应相应的数。一次遍历将相应的数填入对应的下标当中。最后再次遍历数组，找到第一个缺失的数。","快指针每次走两步，如果有环，不用n时间两个节点就能碰到。时间复杂度o(n)","思路很简单，都类似一种暴力搜索法，直接从每个节点都开始搜索，如果是当前节点是对的，就从这个节点的4个方向继续搜索。使用dfs搜索，每一层都有4个分量。唯一需要注意的就是不能搜索到重复的值，也就是我这里搜索完，我去我右边的节点，我右边的节点不能再搜索这个原来的节点了。","我们只需要判断，如果两个字符串当前index上两个字符相等，则(horse,ros)=(hors,ro)","我们只需要将之前的先序遍历算法，从","我们通过枚举法是可以直接枚举出所有排列的，但是这样太慢，并且排列直接明显有自己的规律。查询维基百科可以知道下一个排列的定义","我对这个题其实一点都不陌生。大一第一个学习，算法设计课，就有这个题目。说实话，就用死方法肯定能做出来，只是很多冗余代码，很多条件判断。我记得我当时用4个bool变量确定行动方向。最后4个int定义行动的长度。我第一次做这个题好像也是这么做的。但是我第三次做题我觉得我不可能还用这中办法。于是我看了discuss，发现确实有很好地办法。用一个step定义当前行动的次数，step模4就能得出行动的当前方向。step模2就能得到是左右移动还是上下移动。左右移动一次，下一次左右移动就要减一。再定义一个移动的次数，保存能够左右移动和上下移动的次数。这种算法就省去了很多的条件判断","我寻思cpp程序员应该也行。这里可以利用数组之前的空间，由于这个算法运行之后，字符串大小肯定是小于等于原始字符串大小的。所以，我们们可以在原始字符串上操作，而不需要新开一个字符串。","我描述肯定不是很好懂，可以看看这个网站的例子:https://subetter.com/algorithm/kmp","我是如何做leetcod","我第一次做这个题的时候，认为这是一个动态规划问题。定义了一个三维数组，保存之前的结果，用类似做最长增长子序列的方法解这个题。感觉时间复杂度应该是控制的还不错了。但是这种方法需要的","我第一遍做leetcode的时候，做了一些简单题，觉得就算做不出也能看懂别人的思路，就开始看不起简单题。慢慢的，后面只做hard级别的题目，但是hard级别确实很难，需要很久时间。做了很多题目之后，发现自己前面做的已经忘了。","我第一遍做的算法：","我这里是用优先队列来做的","我首先自己写了一个双栈的代码，一个记录之前匹配好的括号的值，一个是记录左右括号括号的。但是后面看了discuss发现其实用一个栈就行，每次直接一次匹配完当前合法的，也就是右括号没多的情况。如果右括号多了，就改变一下start","所以想通之后，直接将代码改为board[i][j]^=255就稳稳的过了。（255=11111111）","所以，所有的结果可以看成是下面6项相加","所有操作时间复杂度都是o(1)的","找出有相同字符，顺序不一样的所有字符串，然后返回他们的集合。这里有一种最简单的办法确定","找到每一层最右边的节点，简单办法是直接用层次遍历，遍历每一层。跳到下一层的时候，将每一层最后的一个节点push到结果中。","找到第一个target和最后一个target，需要时间复杂度是o(lgn)。其实就是二分查找，但是不是单纯的二分查找。需要找到第一个和最后一个。这其实很像stl函数中的lower_bound和up_bound。但是upper_bound是找到一个不是target的值。我们只需要将upper_bound最后的索引减一就行了。","把结果能得到1的，认定为是没有圈的链表，而会一直循环的happi","括号匹配问题在上数据结构课上也是会讲的。没学过数据结构之前可能很难相出用栈来做这题，学完之后就很显然了。其实栈的用处很大，在之后很多地方也会用到。线性处理一组数据的时候，如果需要满足某些条件，可以考虑一下能否用栈解决。这题就是线性处理一个字符串，并且需要满足一些条件。最近的一个括会肯定要和最近出现的一个括首匹配。用一个栈保存最近出现的括首即可","括号匹配问题就是用栈解决，这里其实也存在括号匹配，所以首先考虑用栈解决。这题比括号匹配需要多考虑的一个点就是如果右括号多了的话，需要重新开始记录，因为后面的肯定和前面的括号不能连在一起了。所以这里需要特殊考虑。","括号生成，首先需要知道合法的括号序列是哪样的。一个右括号前必须有一个左括号。由于题目中都是小括号号，所以这里还不用考虑其他问题。这种题显然是回溯法解决，也可以说是递归。但是不是单纯的生成所有组合，而是有条件的生成。在生成了一个左括号的情况下，才能生成一个右括号。","排序需要o(nlgn)时间复杂度，算法中有两个循环，外层循环执行n次，内层循环执行(n","插入排序时间复杂度是o(n²)，两个循环，每个执行n次，循环中操作是o(1)的。","改为","时间复杂度o(n),对于所有节点，最多访问节点两次，访问总次数是2n，所以最后时间复杂度o(n)","时间复杂度o(n),对于每个节点都只访问一次。","时间复杂度o(n),就是遍历问题，遍历所有节点之后会得到结果","时间复杂度o(n),空间复杂度o(n)。其实后序遍历也是有morris算法的，但是我觉得有点麻烦，可能这种reverse的方法更好。","时间复杂度o(n),遍历的时间，空间复杂度o(n)，使用一个栈保存数据。其实可以用之前的morri","时间复杂度o(n)的，递归肯定是比迭代方法慢一点的，但是两种方法时间复杂度是一样的。之后有时间来实现以下迭代版本的把。","时间复杂度o(n)，只需要3次遍历数组。空间复杂度o(n)，用了两个vector来保存数据。","时间复杂度o(n)，空间复杂度o(1)","时间复杂度o(n)，这里最重要的是优化空间复杂度，空间复杂度到o(1)是个很大的优化","时间复杂度o(n)，重要的是，空间复杂度只有o(1)。如果用一个hashtable保存之前出现的数字，也是能找到重复的，但是这样就需要o(n)的时间复杂度了。","时间复杂度o(n²)","时间复杂度前两个算法其实都是一样的，都是o(n)。但是字符串的算法更快。我认为是由于每次vector调用push_back后扩容导致。于是想了一下能否提前知道vector的size。防止在运行时分配内存，想到input都是int类型，int_max只有10位，所以定义一个大小为10的数组足够了。改进了一下，发现效果不是很明显，因为大小为10的话，其实内存分配所消耗的资源也不是很多。但是之后很多题目，如果能减少vector或者unordered_map的内存加倍操作，也就是提前resize好大小，很多题目会快很多。","时间复杂度和上两题一样,o(n²)","时间复杂度就是o(3^n)","时间复杂度就是o(n),遍历一遍树。","时间复杂度应该是(n*2^n),这也是回溯法找到找到所有集合的普遍时间复杂度","时间复杂度应该是o(n)遍历到所有节点，最后生成一个树","时间复杂度是o(2^n),对于每一个数，都能选择是放入或者不放入最后数组","时间应该可以认为是o(n)，遍历一个链表。","暴力法两个循环，heystack字符串长m，needle字符串长n，时间复杂度是o(nm)","最后一位肯定是0。b>=a+1,range(a,b)中所有数相与，最后一位肯定为0.","最后将结果保存在map中即可","最后执行3n次，时间复杂度o(n)","最后这里需要仔细想清楚这里的思想以及代码里是如何进行的。不然很难理解，我个人也是第三次做这个题了，也都需要仔细回味","最坏情况下时间复杂度还是需要o(n)时间。","最坏情况下，所有字符都是一样的，每次都会进入子循环，时间复杂度是o(n平方)","最坏情况下，时间复杂度是o(n).最佳情况下，时间复杂度是o(1)","最多走到对角线，需要花费n+m步，时间复杂度是o(n+m)","最大连续子数组和，典型的动态规划问题。如果现在给出大小为3的数字，分别为1，2，3。他们的结果是6这时候，如果数组最后加入一个数字4，结果会变为10。这个例子说明，可以用之前的结果来简化求解现在结果的过程。这也是动态规划的思想。这里还有一种情况，就是如果当前和为负值的情况，这时候不能用前面的负值，应该使用当前值直接表示。","最好情况下，所有字符都不一样，每次不会进入子循环，时间复杂度是o(n)","最开始拿到这题，发现，这不是跟第7题很类似吗。直接int2string，使用string来判断就是个很简单的题了。不到一分钟写完之后，发现description里的follow","最开始，我想的是，还是和前一题一样处理，只不过判断是是否存在的时候，使用一个for循环判断这个范围内的值。但是这个题目的测试样例很bug，有个测试样例是int_max，直接超时。","最简单的一种方法是，两次遍历出结果，第一次遍历得到所有数的count，第二次遍历对数组赋值。","最简单的方法肯定是定义一个矩阵，然后将这个矩阵转置之后赋值给这个矩阵。但是这样需要o(n²)空间题目也明显要求了我们空间复杂度维持在o(1)内。我们必须在本来的数组上操作。如果只能这么操作的话，肯定就是使用swap函数，交换值。我们可以对称的改变矩阵，对于旋转90度，我们只需要首先按照竖直中线对称，再按照对角线对称就能得到结果。","有一个大循环，循环中进行3次遍历。相当于对二维数组进行遍历，时间复杂度o(n²)","有一种方法就是用标志，显示这里已经被搜索了，每次搜索完之后将当前字符设置为0。那么之后肯的和他匹配不了了。","本来是二分查找的变体，时间复杂度应该是o(lgn)，但是这里有个对left和right的预处理，最坏情况下，时间复杂度会到o(n)。","本来这题最简单的解决办法就是将所有的乘起来，然后每次除一个数，就能得到结果。但是follow","本质是树的层次遍历，判断每一层是否是对称的。层次遍历需要用到队列来辅助解决。得到每一层所有的值。最后遍历判断是否对称。但是对于这题，还有个技巧。对于左右子树，采取不同的策略。对于左子树，每次访问完之后，先push左及节点再push右节点。右子树，先push右再左。这样，每次从队列中拿两个节点出来，这两个节点就刚好都是对称节点。我们判断它们是否一样就行，然后继续运行。","机器人从原点出发，最后判断能否到达原点，一共4个操作，将所有的操作统计起来，最后比较上下是否一样，左右是否一样即可","树遍历算法时间复杂度都是o(n)，关键是空间复杂度，递归和使用栈辅助迭代的算法空间复杂度都是o(n).但是morris算法空间复杂度是o(1)，使用了大量的空闲null节点。","树问题，递归解决，这里需要到叶子节点才能知道最后的值是多少。需要将父节点的信息传入子节点。这里有两种方法传递一种是直接改变节点的值，父节点改将自己的值加到子节点。还有一种方法是用参数传递。","树问题，递归解决，首先判断当前节点问题，然后对左右子树分别进行同样的计算。","根","桶排序只需要线性时间，时间复杂度o(n)，空间复杂度o(n).","桶的大小是关键，这里我们首先遍历一遍数组，得到数组的最大值和最小值。最大值减去最小值就可以得到最大的gap。然后除以siz","正则表达式问题，两个字符串匹配。碰到字符串问题，一般都是动态规划问题，或者是字符串匹配的一些专门的算法，比如kmp这种。还有就是很多字符串，如果想要找到前缀重合之类的问题，就是trie字典树。正则表达式问题就是典型的动态规划解决的题目。使用一个二维数组保存每一个状态，横纵坐标ij表示s[0","步骤是：","每个函数正常情况下都能分出4个分支，每个分支中时间复杂度是线性的。最后时间复杂度不好定义。但是整个运行时间复杂度还是挺高的","每个数字代表3","每次在中序遍历中找到根节点的位置，一般情况下需要o(n)时间。那总时间可以表达为t(n)=2t(n/2)+o(n)，这个表达式用主定理分析可知为t(n)=o(nlgn)","每次将次数降低一半，时间复杂度o(lgn)","每次进行dfs的时候，将res+1.","求2的100次方，如果直接乘100次，其实没有必要。完全可以求4的50次方，然后16的25次方。这样每次能减少一半的计算量。这里的问题就是还有负数。如果是负数的话，首先将x化为1/x。然后将n转化为正数。最后，一种最特殊的情况就是如果数字是int_min,最后直接将n","求出两个矩形的覆盖面积，实质是求出他们的公共面积，然后用两个矩形的总面积减去公共面积即可。","求出矩阵中的最大矩形，可以利用动态规划的思路求解。首先定义一个left数组，保存节点高度可以最左到哪个节点，再定义一个right数组，保存节点高度最右可以到哪个节点。然后还有height数组，保存当前节点的高度。最后我们从以为矩阵开始，慢慢加高维度。起始时，left数组初始化为0，right数组初始化为s","波兰表达式，直接使用一个栈解决，碰到数字压入，碰到符号就计算，并且将计算结果压入栈中","注意会有一种情况超过int_max,那就是int_min/","注意这里为啥第二个状态是10,因为最后还有一个数字只出现一次,one状态为1,最后直接返回one状态即可.","注意这里是在一个二维矩阵中查找数据，那么使用一个二维bool数组保存节点是否被访问过是有必要的。","滑动窗口时间复杂度o(n),只需要一次遍历数组，最后产生结果。","滑动窗口问题，做了很多题目之后，碰到最后需要求连续序列满足一种情况的时候，一般都能用滑动窗口，也就是一前一后指针代表窗口。","然后去看了一下discuss，真的是发现每次看都会发现很意想不到的算法。比如中序遍历，这里就可以用morri","然后在上面得到第二次最低成本的情况下，得到第二次的最高利润，每遍历到一个数都记录。","然后就是遍历数组，将数字放入桶内，保存桶的最大最小值。最后再遍历一次桶，得到最后的max_gap","然后开始第二遍，这次我每个题目都会去做。很多easy的题，做到第一档速度其实也不是很容易。但是很多题当你把你的算法从o(n平方)优化到o(n)时，你会感觉到自己的进步。并且很多easy的题目是很多难题的基础。这一遍，我做了300多题，题数到了600多，每次碰到好题也会做做笔记，这样之后感觉自己做题能力提升很快。","然后是o(n)的解法，这里还是使用快慢指针，快的先加，如果超过了s，慢指针再往前，慢指针只需要减，直到小于s。直到快指针超过数组长度即可结束，中间每次比较得到最小值","然后用dfs或者是bfs遍历数，将最右的值减去最左的值即可。但是如果就这样，不加处理，会在最后两个case失败。因为我们用int类型表达index，这样树最多只能有32层。如果用long类型，树也只能有64层，这两种类型都不能通过测试。","然而我看我第二次做的记录，发现第二次的方法更好(大概律是看discuss的)，每次不是记录出现的次数，而是记录字符的位置，每次碰到重复的可以直接跳转到相应的位置，而不是一次次慢慢走。","状态转移方程得出：对于aabcc和dbbca匹配aadbbcbcac问题。我们只需要找到","现在已经做了300多道题了，之前一直在本地用word记录心得，现在在这里用gitbook记录。正好也借着这个机会第三次从头开始再做一遍，就当是复习了。","现在是第三遍，做第三遍的原因一是做了300多题了，该回头复习一下了。二是找到了gitbook这个很好的平台可以记录自己的","现在，另一个重要的问题就是，根据上面提出的需求，选取合适的数据结构来解题。在上面的需求中，我们既要操作尾端（剔除最后一个数），也要操作首端（加入新数的时候，剔除比他小的数）。这两个操作都是线性时间的数据结构有链表和双端队列。这里我们用双端队列实现","用gas[i]减去cost[i]是能得到每次经过一个位置消耗的汽油量的。","用两个点定义矩形，左下角和右上角。只需要得到a和e以及b和f中的最大值，将得到的两个值作为公共面积的左下角。同理对于右上角两个点，采用取最小值的办法。就能得到公共矩形，之前还需要判断公共矩形是否合法","用递归的思想去解题的话，首先想好每一个递归节点是如何设计的，然后设计好递归基处理结束清况。其实很类似数学归纳法。对于链表相加问题，将每个函数看成累加器的中的一个寄存器就行。每个节点的输入是两个数，还有前一个节点的进位。相加得到当前节点的值，将进位传给下一个函数。","由于前一次查找到的最大值过程中，很多信息对后一次来说肯定也是能用上的。所以需要想个办法利用之前的信息。","由于这个算法，对于每个数字只需要一次入栈操作，和一次转移栈操作以及一次出栈操作。这几个操作是o(n)的，所以对于每个数字而言，平均时间复杂度是o(1)","直接代码实现","直接求一个数是不是质数需要o(lgn)时间，遍历查看是否有两数相乘能得到n。这里是求n数中所有的质数，可以从反方向来考虑。得到一个质数之后，直接排除所有他的倍数。排除一个数只要一次计算，但是之后再来计算这个数是不是质数却需要o(lgn)时间。","直接用map建立起两个字符串中每个字符之间的映射关系就很好解决","直接用遍历找回文串就行。遍历一次字符串，对每个字符串，将它当作一个回文串的中间，向两边扩散。比较得到最大值","直接递归解决，每次进入子节点的时候，将sum值减去当前节点的值，最后判断如果是叶子节点并且当前值为0，就返回true，否则返回fals","相当于对树进行了一次遍历，时间复杂度o(n)","相比于search","相比于上题加入了一些处理，但是时间复杂度还是o(n²)","看了discuss之后明白了很多，求回文数最快的方法还是从中间往两边扩展好些而不是两边向中间扩展。看到这里的朋友可以仔细体会一下两种的区别。","看了discuss，发现有人用桶的方法解这题，我感觉很巧妙。和之前桶排序一样。首先定下桶的大小，这里设为t+1。从int_min开始，每个桶只能放一个数。如果出现相同的桶，那么就可以直接返回true，因为同一个桶中，最大的差值就是t。然后还需要在这个桶的前一个和后一个桶中找数，判断差值是否小于t。如果存在，返回true。通过这种办法，将数字换成桶，再重复利用上题的算法，这里时间复杂度可以到o(n)","看似简单的链表插入排序，但是实现起来确实需要注意很多细节问题。提一个代码中最重要的点就是，尾指针下一个如果比他大，就不需要插入，这时候尾指针需要后移一位。但是如果比他小，就不需要移动，因为下一位插入到前面去了，新的下一位就接在尾指针后面","看懂意思之后发现直接使用low_bound即可","确定好了最后一位了，前面的可以递归解决，让ab都右移一位，递归判断，直到最后，a","碰到括号，将当前结果和操作符保存。括号就相当于一次递归调用函数，括号里面就是一次计算，需要保存之前的结果。","碰到括回，弹出上次保存的结果，将其与括号里的相加。","碰到操作符，因为这里没有优先级，可以直接计算上一个操作的结果，然后将sign改为这次操作对应操作符","碰到数字，将当前保存的数字乘10，加上这次数字","碰到树以及链表的题，首先观察返回值，如果返回值是一个treenode*,也就是一个根节点。那基本上可以用递归解决。这里首先用递归的思想去想是否可行，首先便利数组找到最大值作为根节点。根节点左边的数组变成左子树，右边为右子树。对于左右子树，使用一样的解法就能得到答案。递归思想一相同，之后就问题不大了","程序只需要线性时间遍历数组即可，时间复杂度o(n)","空间复杂度:","空间太多，并且每次得到结果都需要复制一遍所有的数字，太慢了。所以后面看到discuss使用回溯法做这个题。发现其实回溯法也不会太慢。确实，回溯法在这里会有重复计算是否是回文数的情况，但是相比动态规划的复制一整个数组，整个速度还是提高了。","第一个方法时间复杂度o(n²)，毋庸置疑是最慢的，第二种和第三种方法时间复杂度都是o(n).","第一个算法最后运行实际是480ms,而第二个算法运行实际是8ms。提升速度可以说是很大了。","第一次做这个题的时候，我也不是很清楚如何去计算一个数开根号。之后看了discuss了解到可以用二分查找。（感觉很多题都可以用二分查找，在一个大范围中找一个数，然后可以找到排除一半数的条件，条件很难找，需要仔细体会）。我记得我前几周做了一个contest也是用二分查找，当时做出来之后很惊讶。","第一次做这个题的时候，直接暴力解题，得到最大的正方形。感觉多了很多重复计算。后来知道这里可以用动态规划。","第一次做这个题的时候，直接没考虑这是个完全二叉树，直接写了个计算二叉树节点数量的函数，直接提交，对了就没管了。","第一次做这个题目的时候，我首先在行上做二分查找，然后再找到的列上在来一次二分查找。这样时间复杂度是o(lgn)，也不是很慢。但是其实这个题目就是需要一种二维的二分查找。二分查找的核心是，通过一次比较，能排除一部分数字。","第一次想这题，没看清是连续的数字。导致分析了很久也没结果。知道是连续的数字之后，就很好办了。可以直接用hashmap保存数字出现的次数，以及保存3个以上链表的末尾节点，每次访问到数字，首先查看链表后面末尾节点是否有值，有的话直接加一。如果没有，就将这个数字后面两个数字和这个组合起来，然后加入到将这个链表末尾节点加入hashmap，如果不能进行上面两个操作，说明这里有问题","第一种方法有两个循环每个循环运行n次，时间复杂度o(n平方)","第一题用的类似投票的方法，由于肯定有一个数超过一半以上。如果当前当选元素和当前遍历到的元素一样，当选元素得票数加一。否则减一。如果为0，则换当选元素。由于有一半以上保证了为一个数，这个算法能选出一个主元素。","第三次做的时候，发现第二次的解答有可以优化的地方。在外层循环遍历到大于0的数的时候，就可以直接返回结果了。时间从96ms提升到了88ms。","第三次做题真的就很有经验了，看到链表题并且返回的是一个链表直接递归解决。这题不递归肯定也能做，也不是很难，但是递归能省好多事","第三次参加比赛了，当时又止步在第三题。第三题当时其实想到用记忆化保存的方法解决问题，但是最后没有想通状态转移的过程。于是之后参考了discuss里大神的逻辑，然后自己写出代码","第三种方法使用hash表解答。code中用的是unordered_map。一定要注意在c++中unordered_map和map之间的区别，前一个底层是hash表，后一个底层是红黑树。如果需要o(1)的插入，查找。需要使用unordered_map。","第三种方法是利用hash表一遍遍历得到解答，使用hash表保存target","第三遍做这个题了，首先看到题目就觉得应该用快慢指针做。定义一个快指针，每次让快指针先走，快指针每走一步记录走过的字符。如果出现快指针走过的字符之前出现过一次，就让慢指针走。慢指针每走一步，擦除一个记录，如果擦出的刚好是快指针当前的字符，慢指针停止，又轮到快指针走。快指针每走一步计算一次快慢指针之差，最后返回最大的差值就行。","第二种方法就是先排序，然后使用左右指针逼近，求得结果。这种方法也是之后three","第二种方法这里没有给出代码，根据算法思想，首先排序之后再左右指针。排序最快的时间复杂度是o(nlgn)，左右指针便利时间复杂度是o(n)，最后时间复杂度是o(nlgn)","第二遍做的算法：","等等数字明显都是偶数，可以直接不计算。于是修改计算倍数的代码，9直接加上23，43。","简单暴力的办法就是用一个map保存所有的切割的字符串，遍历字符串，每次substr","算法一次遍历数组即可得出结果，时间复杂度o(n)","算法一次遍历链表，时间复杂度o(n)","算法两次遍历数组,最后时间复杂度o(n).","算法中有两个for循环，循环中进行的操作是o(1)的，最后时间复杂度是o(n²)","算法中有两个循环，执行n²次，每次执行时间复杂度o(n)，最后时间复杂度o(n²)","算法遍历一次数组，时间复杂度o(n)。","类似一个安放数字问题，也很像回溯法构建一个排列的问题。只是回溯法需要列举出所有的情况，但是这里只需要返回最后的数字。所以就可以不用回溯的过程。这里需要多考虑的一点是，存在一个限制数组，rollmax。这里就需要记录当前数字之前出现了多少次，如果超过了限制，那么这次安放就不安放这个数字。这里的算法中，会出现很多重复计算的过程，很多前面的数字最后会汇聚到一个节点，如果不用记忆化方法保存之前的数据，肯定会tim","类似上一题得到组合，只不过这里需要得到所有大小的组合。只需要改变回溯法中，将中间结果push到res的位置，在进入下一个函数的时候就push，而不是在递归基的时候，这样就能到达遍历的效果。","类似遍历问题，时间复杂度o(n)","线性处理两个字符串，最后时间复杂度o(n)","组合数相加最后和为target，基本需要遍历所有集合。使用回溯法得到所有的集合，判断和是否为target。由于数字相加如果已经大于target，就没必要继续遍历了。所以加入了剪枝策略，首先sort数组，为了先遍历小数字后遍历大数字。然后在进入下一个函数之前判断是否满足剪枝策略，如果满足，就不进入函数。","组合问题需要放置k个值，每个值只能比后面的小，不能重复。时间复杂度不是太好分析，有很多种情况。但是回溯法时间复杂度一般都是o(2^n)","组合问题，典型的回溯法例题，使用回溯法解决","组合问题，直接用回溯法解决，中间加入剪枝，如果sum已经大于n了，就可以不用继续往下求解了","经典的n皇后问题。使用回溯法解决问题，每次放之前首先判断这个位置是否合法，如果合法，放入这位置。如果不合法判断下个能放的位置。最后如果没有能放的位置的时候，就回溯。","经典的滑动窗口问题。如果最暴力的方法就是每移动一步，循环判断所有的数字，找到最大值。但是这样做的话，时间复杂度就是o(nk)，还是需要挺久时间的。","综合来看还是第二种方法更好","能否一次遍历出结果呢？是可以的，使用两个标志位标志0，1的结尾。遍历数组，如果为0，swap交换到0的末尾，如果为1，swap交换到1的末尾","至于代码中为啥开始有个","虽然函数中是双重循环，但是子循环的步数很大。整个算法只需要遍历一遍字符串即可，时间复杂度是o(n)","虽然差算法和好算法，时间复杂度都需要o(n²)。但是这次的算法省去了很多多余中间变量，和条件判断，能够提升程序运行的时间。","虽然循环中间处理比二分查找多很多步骤，但是时间复杂度还是o(1)的。每次排除一半，最后时间复杂度是o(nlgn)","虽然有4个循环，但是时间复杂度不会很大，因为每个循环就进行3次，循环中的操作时间复杂度可以近似看做o(1)。","虽然有个循环，但是每次tmp都是乘2扩展，所以时间复杂度是o(1).","虽然看起来循环挺多的，但是本质只是遍历了一遍字符串，然后翻转一此，如果长度为n，进行的次数应该是3n，时间复杂度o(n)","虽然递归函数会在调用栈上消耗很多时间，相比于迭代解题会慢一点。但是递归函数比迭代更容易写，需要考虑的情况会少很多，并且大多数情况下其实慢不了太多。所以链表题和树题建议先考虑递归解法","要得到匹配horse，ros的最小次数。如果我们知道(horse,ro),(hors,ros),(hors,ro)三个字符串的匹配结果。","观察知道，最后所有节点全部在右边展平，我们可以每次将左子树插入到右子树，原来的右子树接在左子树最后面，重复这个操作，直到所有的右子树都展平即可","观察知道，题目需要返回一个相加之后的链表。碰到链表题以及树类题目，尤其是返回一个链表或者树的时候，大概律用递归做会简单很多。","计算3的倍数，首先是9，然后是12，然后是15以此类推，都不是质数，可以排除。但是，这里好像还是有重复计算，12","计算结果需要用到回溯法，但是单纯的回溯在这里太慢了，这里可以加入一种备忘录的方法，类似dp。可以减少我们再回溯中的重复计算，举个例子，如果一个字符串是由很多个一样的子串拼接在一起的，对于回溯法，对于每个子串都是一样的计算，但是加入备忘录之后，对于同样的子串，只需要计算一次就能得到结果。","记录位置的方法:只有一个循环，不管什么清况都是运行n次，时间复杂度是o(n)。","记得csapp专门有一门实验就跟这个题目很类似。比如不用哪些符号实现其他的符号啥的。这里就是不用乘除取余数，实现除法。能用的还有加法和减法，除法其实就是看被除数中能减去几个除数。想到这一步就很清晰了，直接诶一直减去除数就行。但是这样有的慢，可以减去除数的倍数，这样会快一点。直接移位最好，就能很快生成2的倍数","设s长度为m,worddict长度为n,每个word平均长度是k,最后时间复杂度是o(mnk)","设word1","设是s1长m，s2长n，会遍历一个m*n的二维数组,最后时间复杂度o(m*n)","说是爬楼梯，其实就是斐波拉契数列。当前值等于前两个的值相加。可以用动态规划解决，用一个一维数组保存所有结果。也可以直接用两个变量保存之前的两个数的值，而不保存所有的结果。","还是典型的树问题，使用递归解决。","还是那句话，碰到字符串问题，要不就是动态规划，还不就是匹配（kmp，trie），再就是少数的回溯。","还有一种思路利用异或的特性。异或两次回到原值，那么我们经历一个节点之后只需要将这个节点异或一下，之后回来的时候再异或一下，就能恢复。这种好处是可以不用中间变量来保存中间值，但是坏处就是异或之后的值可能会对之后的程序产生影响，我当时就是用这种思路，结果到倒数第二个样例的时候，失败了。最后换了第一种方法","还有一种方法是我做完o(n)解法之后，发现有人用o(nlgn)的排序解法做出来的，竟然还快一点。首先排序数组，然后判断连续的index是否有重复的数字。","还有个做题的技巧就是，多做点赞数高的题，要是差评比点赞高，我基本都不会做。这种题不是测试用例恶心，就是题目没有意义。所以有时候我会跳过一两个题目。","这一题有点不同，需要得到占1/3元素以上的数字。这里只保证肯定有答案。所以这里有两种情况，只有一个数和两个数。","这个代码很简单，时间复杂度是o(n)","这个时间复杂度不是很好分析，但是在leetcode中运行时间也很快了，贴个图。","这个时间复杂度是o(lgn*lgn)，具体时间复杂度分析如下","这个算法不好分析，现在假设有k个链表，每个链表大小都是n，并且都是一样的链表。首先建堆需要o(k)时间复杂度(我这题不是交换建堆，是一个个插入的)，每次拿出是o(lgk)，再插入是o(lgk)，进行n*k次最后时间是o(n)+o(lgk)*n*k,所以时间复杂度是o(nklgk).当然这只是大致分析。","这个算法中所有的操作都是o(1)的，总的时间复杂度是o(1)","这个算法最多执行32次，时间复杂度o(1)","这个算法空间复杂度只有o(k)时间复杂度o(n)，还是很不错的","这个算法遍历二维数组，遍历过程中每次操作时间复杂度是o(1)，最后时间复杂度o(n²)","这个题目不是很难，但是leetcode限制了我们，希望我们使用o(1)的空间复杂度，然后do","这个题目意思简单装换过来就是，如果一块圆区域如果连接到外面的话，那么这块圆就不变成x，否则都变为x。","这也是二分查找的思路。要不就是往比mid大的值移动，要不就是小的值。","这是这个系列的第三题，第二题加入了k表示只看前面k个数。第三题加入了t，代表数字的范围可以再t以内波动。","这是这系列的第四题，第一题是只能一次交易，第二题是可以任意次交易，第三题是可以两次交易，这三题都能o(n)时间内完成。这题是可以k次交易，其实在第三题（可以完成两次交易）已经可以从两次交易推出任意次交易的情况了。只是每次遍历到一个商品，就要进行k次交易，时间复杂度太高了，一共211个test","这有点意思","这样如果当前点为1，那么当前点代表的正方形边长就取决于他上面左边和左上正方形的边长了。","这次做的时候，觉得肯定有更好的办法，因为完全二叉树和普通二叉树相比，多了太多信息。","这次做这题的时候，我想了下，如果k很小，比如为3，我们就不需要关注之前的数字，甚至不需要保存。每次往前看3个就行。但是如果k很大，这个效率就没有保存数字高了。不过我们可以换个角度想，每次把超出k的那个数字删除。","这类题目，无论你算法多么巧妙，时间复杂度都会是o(n²)，但是这里空间复杂度被限制到了o(1)，有很大提升。","这里一样可以用二分查找解决，首先我们判断数组首是否小于尾，如果小于那就是有序的，直接返回数组首值。否则，找到mid，判断mid和首元素的关系，如果是顺序的，那么我们下一个找的应该是右数组，如果不是有序的，那么就在左数组中找到那个rotate点","这里不需要排序，时间复杂度o(n)","这里两个字符串，使用动态规划处理。一个二维数组实现。首先说一下动态规划的状态转移方程如何理解。","这里主要是找到链表的中点，将链表分成两半，然后匹配是否是回文串。找到中点用快慢指针。使用一个stack来辅助，就只需要一次遍历可的结果","这里使用一个sign符号代表当前的操作符。","这里使用递归和迭代都能做。思想就是先将左右子树翻转了，然后交换左右子树即可","这里可以用dfs做，从最外围的圆开始往中间遍历，碰到的圆都不变，其他的都变。","这里和上题不同的地方在于，这里需要将树都遍历一遍。时间复杂度o(n)","这里如果使用一个hashmap保存所有节点，很简单就能得到答案，但是空间复杂度是o(n)，这里要求使用o(1)的空间复杂度解题，首先我们遍历两个链表，得到两个链表的长度，如果有一个长一个短，首先让长的链表头节点先移动两链表的差值，这时候两个链表一样长了，只需要一起移动，并且每次都判断是否为同一个节点即可。","这里就和前一题重点不同了，这里主要的时间消耗就是判断是否回文的消耗了。","这里我们还是用递归解决。首先解决第一个index上数字的摆放，然后对于后面所有的数字，递归调用函数处理，直到最后一个数字。这里我们如何找到重复的情况呢？我们给第一个index摆放之后，进行第一个index替换的时候，判断，如果这时候，替换的数字和当前数字一样，就不替换，查看下一个数字。这样就能解决一个位置，两次为一个数字的问题了。注意这里不需要回溯，这是和上一题区别最大的地方。","这里我开始直接用暴力匹配的方法解决，发送时间和空间复杂度被拉满了。过不了最后一个测试样例。后来看discuss，发现可以使用kmp算法解这题。","这里我还是用的链表题通用解法，使用递归解决，但是这里用递归确实不是太好，时间复杂度会有o(n²),可以用一个vector先保存所有节点，再处理","这里时间复杂度不一定比两个二分查找更快，二分查找时间复杂度是o(lgn+lgm),这里时间复杂度最坏情况应该是o(m+n)；","这里时间复杂度不太好分析,对于不加入备忘录的算法，时间复杂度是o(2^n)，需要遍历出每一种组合。","这里是一种递归方法，时间复杂度还不会分析。使用动态规划解决之后时间还是不会太慢的","这里是得出其中两个。其实可以从第一题类似的方法衍生出来。","这里最差情况下，时间复杂度是o(lgn),最坏情况就是在最底层的叶子节点才找到最小公共祖先。","这里最简答的方法就是回溯法，因为可以随意加括号，有很多不确定性。使用回溯法，在每个能加括号的地方，进行回溯。但是回溯法时间复杂度太高，往往可以用备忘录的方式，消除重复的回溯。所以这里用一个map来保存每次运行后的结果。进入函数的时候，首先检查是否在map中已经保存了，如果保存了，就直接返回。","这里有种解法是一直除二，但是还可以利用leetcode的漏洞。","这里求出连续子数组之和大于s的最小值。有两种方法，题目中follow","这里涉及到很多复杂的操作，找到nextword，需要进行26*n次，很多情况下，n是小于26的，所以这里几乎时间复杂度是o(n²)了。然后遍历一次数据集，设wordlist长度是m，最后时间复杂度是o(mn²)","这里状态不多，不需要使用switch语句，构建dfa。直接使用if","这里用递归来做，从根节点开始，首先在它的左子树进行一次寻找，如果找到p或者找到q，就会有个返回值，如果都没找到，返回null。在右子树进行同理查找方式。最后两个查找结束之后，返回到根节点检查。如果两个返回都不是null，说明两个节点分别出现在两个子树，这时候根节点是公共节点，返回根。如果只有一个子树返回了，说明两个节点都在那个子树中，这里直接返回那个值即可。如果两个都是null节点，返回null。","这里用递归结题，我们知道，计算一个完美二叉树（忘了具体是啥名字了，就是最后一层都是null，其他节点都不为null）的节点数量很简单，如果有h层，结果就是2^h","这里的时间复杂度我也不是太清楚，查了资料，网上有两种说法，我觉得o(n^n)和o(n!)都有道理。","这里的算法算是很慢的了，时间复杂度达到了o(n²)，不是很建议使用，只是我比较喜欢用递归解链表题，所以这里才用递归解决","这里直接用著名的floyd判圈算法就行，定义一个快指针一个慢指针，快指针每次走两步，慢指针每次走一步。如果有环两个指针肯定能碰到，如果快指针走到null节点，那就没有环","这里空间复杂度是o(n)，时间复杂度我也不是很会分析，看题目的hint里，分析的时间复杂度是o(n","这里至少有一个candidate超过1/3，所以还剩2/3，就算剩下部分全都不同，也只会有1/3次投票的时候，会将两个候选者的票数减去。还有1/3的情况时第二个候选者票数为0，被替代。所以这里肯定会有一个结果，可能有两个。最后的时候，要确认一下，是否两个candidate的票数超过1/3","这里要求需要使用o(n)时间求解，我们必须引入一个新的数据结果来使访问一个数据的时间控制到o(1)时间。那肯定是unordered_set类型，这个数据结构是基于hashmap实现的，插入和查询时间是o(1)。首先我们将所有数据存入set，然后顺序遍历原来的数组，如果数字的前一个在set中存在，continue，否则，表示这个数字是这段数字的开始，于是从这里开始顺序加一，每次结果在set中查询，知道不存在这个数字。最后求最长的解","这里还可以用并查集做，由于想回顾并查集，所以这里我用这种方法解题。并查集是能快速找到一组组数据的数据结构，我们将外围区域定义一个节点，其他节点就是每个点自身。开始所有的节点的父节点都是自己。然后遍历数组，如果是最外层的圆，就将它和外围区域节点相连，如果是内部的圆，将它和它旁边的圆相连。最后再次遍历数组，如果圆连接到了外围节点，则保持不变，否则变为x","这里遍历一次数组得到结果，时间复杂度o(n)","这里需要理解的是，如果数组有序，直接返回left，否组数组肯定是两段有序，mid肯定在两段中的一段。mid和left相比，如果mid","这里需要生成一个平衡bst。平衡bst有很多种表示方法，但是我们只需要生成一种就行，那当然是生成最简单的bst。每次到一个节点时，找到中点，将一个有序数组对分。直到叶节点。这样就能保证最后得到的是平衡二叉树","这里需要用一种搜索方法找到找到最短路径，对于这种需求，有一种遍历方式能完美的契合。那就是广度优先搜索。找到第一个叶子节点，也就是第一个到达endword的路径就是最短路径。我们从beginword开始，每次将beginword能到的下一个单词加入队列中，然后将他们从wordlist中删除，重复操作，直到到endword或者没有结果。","这里需要用平均情况去分析。对于每一个数，都只进行了一个入队和出队操作，所以，平均时间复杂度是o(n)","这里需要进行转换3次，也就是有4个状态，首尾一样的话也有3个状态了，用一位是表示不了的。这里用两个状态表示。one表示第一个状态，two表示第二个状态,这里用两位表示，第一位是one状态，第二位是two状态","这里面只有pop操作时间复杂度是o(n)的，其他操作都是o(1)","这里题目有点描述不清楚，这里只有根节点可以连接两个子树，也就是加上子树上计算的结果。但是如果是中间节点，那就只能连接一个子树，选择左子树或者右子树。这里当然是选择最大的一个子树。","这里首先定义一个vector，存储所有字符出现的次数。然后定义一前一后两个指针，后指针走过一个字符的时候，将vector中字符保存的次数减一，如果减一是有效的（能在t字符串中体现），那就将之前保存的size减一(s","这题不是很难，直接遍历所有，对每个为1的点，进行dfs遍历。没遍历到一个1的节点就赋值为0.","这题也是用trie解决，这几个用字典树解决的问题一起出现，还是很有意思。这里可以总结一下，如果给你很多词，让你保存在一个数据结构中，然后提供快速的查找接口。","这题其实可以用o(n)时间解决，开始随机选一个位置，然后判断当前汽油量是正还是负，如果是负就将开始位置向挪动一位，看能否增加汽油量，否则就可以向后移动一位。知道两位置重合，这时候判断总的汽油量是否为正，如果是正就代表能走完。这也是用类似twosum的两指针逼近法，目标值就是最后汽油量需要大于0。","这题其实就是链表判圈问题的建模版本，happi","这题其实暴力发就能解决，就是单纯的字符串匹配。但是太慢了，历史上也有几位大佬觉得这种方法很慢。并且确实有可以优化的地方，如果是一个人来匹配字符串，当一个成功了很多次之后最后一个字符匹配失败了，他不会前进一位重新来。而是跳过已知的不匹配的情况。","这题可以从递归的角度思考问题。如果a>b,那么range(a,b)中的所有数字相与，最后一位bit肯定是0。这个很好证明，a&a+1","这题可以很快相出回溯解法，匹配到一个进入下一个函数即可，但是这样会有很多重复的计算。","这题可以用3种解法。如果是刚接触算法的，最开始想到的方法肯定是两个循环便利求解。","这题和15题算法基本一模一样","这题和15题算法基本一模一样，就是判断相等改成的找到最相近的，","这题和上一题唯一的区别就是有重复数字。但是这个区别对算法会产生很大的影响。两个一样的数，如果还是用上题的做法，会导致最后的结果多一倍。这里的问题就在于，如果找到重复的情况，然后规避这种情况。","这题和上一题唯一的区别就是，这里在机器人的行动路上放了一些障碍。其实和上题做法没什么区别，当当前走到障碍的时候，直接把这个位置的结果赋值0。这样的好处是，既可以代表这里没有一种方案可以走到，也可以在他右边和下面得到总线路时，加上的是0。","这题和上一题很像，用一样的算法就能解决，利用数学证明可以得知，当两个快慢指针相交时，他们到连接点的长度就是起始点到连接点的长度。这时候，一个指针从起始点出发，一个从相交点出发，两个指针相交之后就能知道连接点是哪个","这题和之前find","这题很之前的正则表达式很像，其实还简单一点。使用二维数组保存中间结果，动态规划解决问题。可以借鉴前面动态规划题目的解答。这里的?其实和之前的.一样。这里的*比之前的*更加加单","这题思路是，从左上角或者右下角开始。可以思考一下，为什么从这里出发。然后一步步和target比较，并且逼近target","这题我们也定义左右指针，每次都计算容量，最后取最大值。关键是左右指针如何移动。哪边的柱子更小我就移动哪个，因为移动必定导致宽度减小，只有靠高度增高，才有可能提高总容量，所以这样移动不会漏掉最大值","这题是上题的简化版本，最后返回数量即可","这题是上题的进阶，这里的树不再是bst，不是bst的话，treenode里的val节点就对我们没啥用了。这里也必须遍历所有节点才能找到最小公共祖先。","这题是求每一层的宽度。如果要求宽度，关键是要得到最左和最右节点的位置，然后将两个位置相减就行。关键是如何安排每个节点的值。这里可以用类似heap的表示法。","这题是这个系列的第二题，第一题是求出一个占一半以上元素的主元素。","这题目其实很简单，怎么样都能做得出。只是有些人做的简单有些人做的复杂。首先用for","这题直接用字典树解决即可，接口和这题都差不多。208.","迭代解法使用栈辅助，首先需要理解先序遍历的顺序。先序遍历首先访问根节点，然后左子节点，再右子节点。画图可以知道，先序遍历首先会访问左边所有节点，然后由底向上对之前节点的右子树再进行前序遍历。所以直接一个递归得到所有的左边的值，并将右子节点压栈即可。","递归写法很简单，按顺序访问就行，对于迭代写法，我们首先要明白我们访问的顺序，先左，后中再右。我们使用一个栈保存中间节点，没碰到一个root节点，顺序将左子树一直push进栈，到叶子节点的时候，弹出顶上的节点，这时候就能访问了，然后对于这个节点的右子树，把它当做一个root，继续运行一遍","递归方法就不说了，对于迭代方法，这里只用一个栈还是不好理解，需要但是换种思路，后序遍历的逆序，其实就是先序遍历的先遍历右节点版本。","通过分析和leetcode最后的结果来说，上面3中方法从上到下应该是越来越好的。迭代对于递归来说，减少了函数栈开销，最后空间用的少一点。morris对于上面两中来说，只用了o(1)的空间复杂度，最后空间是用的最少的。","遍历一棵树，时间复杂度o(n)","遍历一遍树，时间复杂度o(n)","遍历了很多次链表，时间复杂度是o(n)，没有用额外的空间，空间复杂度o(1)","遍历求解3个数的组合，时间复杂度","遍历问题时间复杂度还是一样的，都是o(n)","遍历问题，时间复杂度o(n)","那么这个数据结构最好是使用字典树。这题也不例外，首先要将给你的words中的单词全部插入到字典树中。然后再查找","都是二分查找时间复杂度是o(lgn)，stl中的二分查找也是直接用low_bound实现的，low_bound在二分查找中只有两个判断分支，会比传统的3个判断分支更加平衡以及快速","重复以上1、2直到当前节点为空。","链表找环问题可以看前面的题解。","长度为10的字符串，然后与之前记录的字符串比较。如果有重复就加入res。但是对字符串操作是麻烦的，比较也需要一位位比。这里限制的条件是字符串中只有4个字符，如果用bit表示的话，4个字符只需要两位，一共10个字符，所以20位bit就可以表示所有substr的情况了。int类型是32位的，所以使用int就可以表示每个substr，用int来比较和保存也比字符串快多了。","需要使用nlgn时间复杂度排序链表，显然，这里用归并排序会很好。还需要常数空间复杂度。既然是常数时间，那就不能使用递归解决，但是我还是觉得递归解决舒服很多，并且很快很清晰，所以我是使用递归解决的。","需要填满n*n个格子，每次填格子移动时间o(1)，最后时间复杂度o(n²)","题目很简单，判断相等赋值即可，只是看着自己之前写的代码实在太难受，想优化一下。","首先min","首先分析如果想装更多的水，我们需要两个柱子隔得越远越好，并且两个柱子中较矮的那根柱子也会决定装水的量。直接暴力法应该是很多人第一次就想到的方法，两个循环，遍历每一种组合。但是这题还有个条件，就是两个隔得越远，更大容量的概率会大很多。其实这里也用到了之前two","首先分析快慢指针，快慢指针最坏情况是所有字符一样，最好情况是所有字符都不同。在输入为n的情况下，最坏情况需要运行2n次，最好情况需要运行n次。最好最坏都是o(n)的时间复杂度。","首先初始化两个头，然后将两个partition，分别加到两个头上，最后将两个partition合并","首先对于下一天价格比今天低的情况，这时候我们肯定要下一天买而不是这一天高价买。也就是把买进的价格改成下一天的。","首先将空格啥的都去掉，得到精简的单词，将单词翻转，最后将得到的字符串翻转","首先我们来看如果利用第一题类似的投票机制。这里维护两个candidate，如果当前元素和其中一个candidate相等，就投一票。如果两个都不想等，两个候选者都减一票。","首先我们还是用上一题一样的回文数求法，但是时间太慢了","首先找到待旋转的节点，然后就是一个旋转链表问题了","首先排序，时间复杂度o(nlgn)。然后一个遍历数组，时间复杂度o(n)。最后时间复杂度o(nlgn)。这样看来，排序成了我们的瓶颈，但是也不能这么说，如果没有排序，时间复杂度至少是o(n²)","首先构造并查集，在并查集有路径压缩时，插入和查找的时间都是o(1),最后时间复杂度o(n²)。然后遍历数组，时间复杂度o(n²),最后时间复杂度o(n²)","首先知道这里是最多允许买两次，意思是如果一次可以，那就买一个。就像exampl","首先考虑一般情况，如果两个字符相等了，只需要查看左上角的bool值即可，如果匹配当前也是匹配的。如果是一个点，那也好说，直接按照相等来匹配。关键就是如何匹配*。我们来回顾一下*的定义，首先可以是0个，0个的话，直接查看靠左两个方格的bool值即可，比如c*和空字符比较，也就是第一排前三个。两个空字符肯定是匹配的，值为1，c和空字符肯定不匹配，格子值为0，c*是和空字符匹配的，因为可以是0个c，所以，直接观察左边两个格子的值即可。然后考虑1个的情况，现在可以换一种思想，如果当前行列匹配需要1个字符，那么上一行和当前列匹配肯定是只需要0个字符，如果上一行成功匹配，那么这一行肯定也成功。同理可得1个或者多个匹配的话，只需要看上一个格子是否满足条件即可。","首先说下o(nlgn)，这种形式的时间复杂度一般是分治法，类似的有归并排序。对于这题，连续数组要不就是包含中间那个值，或者是在左半数组中或者是在右半数组中。所以首先处理连续数组在中间的情况，从中间开始左右扩展，然后左边右边递归处理即可。最后得到最大的","首先需要知道的一点是，如果当前来了个很大的值，那么还在窗口中的，之前的比这个值小的值就已经失去作用了。之后肯定不会被放入结果。那么我们就在每次加入新数的时候，将之前比它小的数剔除，然后将当前值插入。这样就能保证当前最后一个数就是最大值了。还需要注意的一个点是，当窗口中的数大于k的时候，需要剔除最后一个数。","首先需要知道的一点是，虽然int是32bits，但是这里只需要对一个bit进行考虑即可，其他位的bit运行的规律是一样的。","，"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"README.md","keywords":"","body":"README.md\ngitbook地址：https://kongchengzhuge.gitbook.io/leetcode/\n 现在已经做了300多道题了，之前一直在本地用word记录心得，现在在这里用gitbook记录。正好也借着这个机会第三次从头开始再做一遍，就当是复习了。\n我是如何做leetcode\n我第一遍做leetcode的时候，做了一些简单题，觉得就算做不出也能看懂别人的思路，就开始看不起简单题。慢慢的，后面只做hard级别的题目，但是hard级别确实很难，需要很久时间。做了很多题目之后，发现自己前面做的已经忘了。\n然后开始第二遍，这次我每个题目都会去做。很多easy的题，做到第一档速度其实也不是很容易。但是很多题当你把你的算法从O(n平方)优化到O(n)时，你会感觉到自己的进步。并且很多easy的题目是很多难题的基础。这一遍，我做了300多题，题数到了600多，每次碰到好题也会做做笔记，这样之后感觉自己做题能力提升很快。\n现在是第三遍，做第三遍的原因一是做了300多题了，该回头复习一下了。二是找到了gitbook这个很好的平台可以记录自己的\n还有个做题的技巧就是，多做点赞数高的题，要是差评比点赞高，我基本都不会做。这种题不是测试用例恶心，就是题目没有意义。所以有时候我会跳过一两个题目。\n"},"1.-two-sum.html":{"url":"1.-two-sum.html","title":"1. Two Sum","keywords":"","body":"1. Two Sum\nproblem description\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nExample\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\nalgorithm thought\n这题可以用3种解法。如果是刚接触算法的，最开始想到的方法肯定是两个循环便利求解。\n第二种方法就是先排序，然后使用左右指针逼近，求得结果。这种方法也是之后three sum和four sum的基础，但是这里需要返回的是原来数组的下标值，而不是数字本身。所以这里用这种方法得不到答案\n第三种方法是利用hash表一遍遍历得到解答，使用hash表保存target-之前的值。处理一个数据的时候首先在hash表中对比以下，如果存在就返回。这种方法在之后很多能一次便利出结果的解答里都会出现，用一个hash表保存前面遍历的状态，之后拿到状态再来对比。\ncode\n//first\nclass Solution {\npublic:\n    vector twoSum(vector& nums, int target) {\n        for(int i=0;i twoSum(vector& nums, int target) {\n        unordered_map ma;   //the value represented by map.first is target-nums[i]\n                                     //the value represented by map.second is index\n        for(int i=0;i\nalgorithm analysis\n第一种方法有两个循环每个循环运行n次，时间复杂度O(n平方)\n第二种方法这里没有给出代码，根据算法思想，首先排序之后再左右指针。排序最快的时间复杂度是O(nlgn)，左右指针便利时间复杂度是O(n)，最后时间复杂度是O(nlgn)\n第三种方法使用hash表解答。code中用的是unordered_map。一定要注意在c++中unordered_map和map之间的区别，前一个底层是hash表，后一个底层是红黑树。如果需要O(1)的插入，查找。需要使用unordered_map。\ncode中有一个循环，循环中进行的操作只有查找和插入hash，时间都是O(1)，所以最后时间复杂度是O(n)\n"},"2.-add-two-numbers.html":{"url":"2.-add-two-numbers.html","title":"2. Add Two Numbers","keywords":"","body":"2. Add Two Numbers\nproblem description\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nexample\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n\nalgorithm thought\n观察知道，题目需要返回一个相加之后的链表。碰到链表题以及树类题目，尤其是返回一个链表或者树的时候，大概律用递归做会简单很多。\n用递归的思想去解题的话，首先想好每一个递归节点是如何设计的，然后设计好递归基处理结束清况。其实很类似数学归纳法。对于链表相加问题，将每个函数看成累加器的中的一个寄存器就行。每个节点的输入是两个数，还有前一个节点的进位。相加得到当前节点的值，将进位传给下一个函数。\ncode\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2,int add=0) {\n        if(l1==NULL){\n            if(add==0)\n                return l2;\n            l1=new ListNode(add);\n            return addTwoNumbers(l1,l2,0);\n        }else if(l2==NULL){\n            if(add==0)\n                return l1;\n            l2=new ListNode(add);\n            return addTwoNumbers(l1,l2,0);\n        }//上面是递归基\n        ListNode* res=new ListNode((l1->val+l2->val+add)%10);\n        res->next=addTwoNumbers(l1->next,l2->next,(l1->val+l2->val+add)/10);\n        return res;\n    }\n};\n\nalgorthm analysis\n时间应该可以认为是O(n)，遍历一个链表。\n虽然递归函数会在调用栈上消耗很多时间，相比于迭代解题会慢一点。但是递归函数比迭代更容易写，需要考虑的情况会少很多，并且大多数情况下其实慢不了太多。所以链表题和树题建议先考虑递归解法\n"},"3.-longest-substring-without-repeating-characters.html":{"url":"3.-longest-substring-without-repeating-characters.html","title":"3. Longest Substring Without Repeating Characters","keywords":"","body":"3. Longest Substring Without Repeating Characters\nproblem description\nGiven a string, find the length of the longest substring without repeating characters.\nexample\nExample 1:\n\nInput: \"abcabcbb\"\nOutput: 3 \nExplanation: The answer is \"abc\", with the length of 3. \n\nExample 2:\n\nInput: \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\nExample 3:\n\nInput: \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3. \n             Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\nalgorithm thought\n第三遍做这个题了，首先看到题目就觉得应该用快慢指针做。定义一个快指针，每次让快指针先走，快指针每走一步记录走过的字符。如果出现快指针走过的字符之前出现过一次，就让慢指针走。慢指针每走一步，擦除一个记录，如果擦出的刚好是快指针当前的字符，慢指针停止，又轮到快指针走。快指针每走一步计算一次快慢指针之差，最后返回最大的差值就行。\n然而我看我第二次做的记录，发现第二次的方法更好(大概律是看discuss的)，每次不是记录出现的次数，而是记录字符的位置，每次碰到重复的可以直接跳转到相应的位置，而不是一次次慢慢走。\ncode\n//快慢指针\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        if(s.size()==0)\n            return 0;\n        int head=1,last=0,res=1;\n        vector pos(256,0);\n        pos[s[last]]++;\n        while(head pos(256,-1);\n        int res=0;\n        for(int i=0;ileft){\n                left=pos[s[i]];\n            }\n            pos[s[i]]=i;\n            res=max(res,i-left);\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n首先分析快慢指针，快慢指针最坏情况是所有字符一样，最好情况是所有字符都不同。在输入为n的情况下，最坏情况需要运行2n次，最好情况需要运行n次。最好最坏都是O(n)的时间复杂度。\n记录位置的方法:只有一个循环，不管什么清况都是运行n次，时间复杂度是O(n)。\n综合来看还是第二种方法更好\n"},"5.-longest-palindromic-substring.html":{"url":"5.-longest-palindromic-substring.html","title":"5. Longest Palindromic Substring","keywords":"","body":"5. Longest Palindromic Substring\nproblem description\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\nexample\nExample 1:\n\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: \"cbbd\"\nOutput: \"bb\"\n\nalgorithm thought\n直接用遍历找回文串就行。遍历一次字符串，对每个字符串，将它当作一个回文串的中间，向两边扩散。比较得到最大值\ncode\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        if(s.size()==0)\n            return \"\";\n        int res=0;\n        int lm=0,rb=0,size=s.size();\n        for(int i=0;i=0&&rightres){\n                    lm=left;rb=right;\n                    res=right-left;\n                }\n                right++;left--;\n            }\n            left=i;right=i+1;\n            while(left>=0&&rightres){\n                    lm=left;rb=right;\n                    res=right-left;\n                }\n                right++;left--;\n            }\n        }\n        //cout\nalgorithm analysis\n最坏情况下，所有字符都是一样的，每次都会进入子循环，时间复杂度是O(n平方)\n最好情况下，所有字符都不一样，每次不会进入子循环，时间复杂度是O(n)\n"},"6.-zigzag-conversion.html":{"url":"6.-zigzag-conversion.html","title":"6. ZigZag Conversion","keywords":"","body":"6. ZigZag Conversion\nproblem description\nThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);\n\nexample\nExample 1:\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\n\nExample 2:\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\n\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\nalgorithm thought\n开始拿到这个题的时候，想法是直接构造一个二维数组，按照zigzag顺序把字符串存入其中。但是这种方法太慢了，也太占用空间了，很多地方都没有存数据。\n于是开始找规律，发现除了第一行和最后一行。中间每行都是两个纵向字符中夹着一个。首先找纵向字符的规律，每一行两个纵向字符位置差是，numRows*2-2。然后再找到中间夹着的字符是如何分布的。\ncode\nclass Solution {\npublic:\n    string convert(string s, int numRows) {\n        if(numRows==1)\n            return s;\n        string res=\"\";\n        int step=numRows*2-2;\n        int step2=step;\n        for(int i=0;i=s.size())\n                return res;\n            res.push_back(s[j]);\n            while(true){\n                if(i!=0&&i!=numRows-1){\n                    if(j+step2\nalgorithm analysis\n虽然函数中是双重循环，但是子循环的步数很大。整个算法只需要遍历一遍字符串即可，时间复杂度是O(n)\n"},"7.-reverse-integer.html":{"url":"7.-reverse-integer.html","title":"7. Reverse Integer","keywords":"","body":"7. Reverse Integer\nproblem description\nGiven a 32-bit signed integer, reverse digits of an integer.\nExample 1:\nInput: 123\nOutput: 321\n\nExample 2:\nInput: -123\nOutput: -321\n\nExample 3:\nInput: 120\nOutput: 21\n\nNote:\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\nalgorithm thought\n初次拿到这题想到的方法肯定是，首先判断正负，然后按位处理。每次取模得到个位，将得到的个位加到存储的结果中。这种想法是没有问题，但是我觉得用字符串翻转更加易懂，并且需要考虑的条件比较少。首先判断正负，然后将数字转化为字符串。之后调用翻转函数。最后将翻转过的字符串变回数字，这时候要注意的是，首先处理末尾的0，这时候会被翻转到首位，然后考虑如果现在字符串大于INT_MAX,也就是2^31-1，就直接返回0。\ncode\nclass Solution {\npublic:\n    int reverse(int x) {\n        bool bo=true;\n        if(x\"2147483647\");\n        if(s.size()>10||(s.size()==10&&s>\"2147483647\"))\n            return 0;\n        i=atol(s.c_str());\n        return bo?i:-i;\n    }\n};\n\nalgorithm analysis\n在整个算法中，to_string时间复杂度是O(n),reverse函数时间复杂度是O(n)，最后atol函数函数的时间复杂度也是O(n).算法中其他部分时间复杂度是O(1)。所以最后时间复杂度是O(n)。其实感觉直接用数学方法，每位处理可能比这个快一点，但是用字符串操作数字翻转问题还是很舒服的。\n"},"9.-palindrome-number.html":{"url":"9.-palindrome-number.html","title":"9. Palindrome Number","keywords":"","body":"9. Palindrome Number\nproblem description\nDetermine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\nExample 1:\nInput: 121\nOutput: true\n\nExample 2:\nInput: -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\nExample 3:\nInput: 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\nFollow up:\nCoud you solve it without converting the integer to a string?\nalgorithm thought\n最开始拿到这题，发现，这不是跟第7题很类似吗。直接int2string，使用string来判断就是个很简单的题了。不到一分钟写完之后，发现description里的follow up要求能不能不用string结题。于是又开始想如何不用string，其实在c++中string的结构和vector很像，动态数组vector也很适合存储数字中的所有位。\ncode\n//convert to string\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n        if(x res;\n        while(x){\n            res.push_back(x%10);\n            x/=10;\n        }\n        int left=0,right=res.size()-1;\n        while(left res(10);\n        int left=0,right=-1;\n        while(x){\n            right++;\n            res[right]=x%10;\n            x/=10;\n        }\n        while(left\nalgorithm analysis\n时间复杂度前两个算法其实都是一样的，都是O(n)。但是字符串的算法更快。我认为是由于每次vector调用push_back后扩容导致。于是想了一下能否提前知道vector的size。防止在运行时分配内存，想到input都是int类型，INT_MAX只有10位，所以定义一个大小为10的数组足够了。改进了一下，发现效果不是很明显，因为大小为10的话，其实内存分配所消耗的资源也不是很多。但是之后很多题目，如果能减少vector或者unordered_map的内存加倍操作，也就是提前resize好大小，很多题目会快很多。\n"},"10.-regular-expression-matchinghard.html":{"url":"10.-regular-expression-matchinghard.html","title":"10. Regular Expression Matching","keywords":"","body":"10. Regular Expression Matching\nproblem description\nGiven an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\nNote:\n\ns could be empty and contains only lowercase letters a-z.\np could be empty and contains only lowercase letters a-z, and characters like . or *.\n\nExample 1:\nInput:\ns = \"aa\"\np = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\nInput:\ns = \"aa\"\np = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\nExample 3:\nInput:\ns = \"ab\"\np = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\nExample 4:\nInput:\ns = \"aab\"\np = \"c*a*b\"\nOutput: true\nExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches \"aab\".\n\nExample 5:\nInput:\ns = \"mississippi\"\np = \"mis*is*p*.\"\nOutput: false\n\nalgorithm thought\n正则表达式问题，两个字符串匹配。碰到字符串问题，一般都是动态规划问题，或者是字符串匹配的一些专门的算法，比如kmp这种。还有就是很多字符串，如果想要找到前缀重合之类的问题，就是trie字典树。正则表达式问题就是典型的动态规划解决的题目。使用一个二维数组保存每一个状态，横纵坐标ij表示s[0-i]和p[0-j]的匹配结果。每一个状态转移的时候，一定要分析全要考虑的前一个状态。这一题中就*号很特殊，他可以是一个也可以是零个也可以是多个。分析到*号的时候，需要考虑的前一个状态有点多。\n分析一次example4的二维数组是如何构造的\n   '' c  *  a  *  b\n'' 1  0  1  0  1  0\na  0  0  0  1  1  0\na  0  0  0  0  1  0\nb  0  0  0  0  0  1\n\n首先考虑一般情况，如果两个字符相等了，只需要查看左上角的bool值即可，如果匹配当前也是匹配的。如果是一个点，那也好说，直接按照相等来匹配。关键就是如何匹配*。我们来回顾一下*的定义，首先可以是0个，0个的话，直接查看靠左两个方格的bool值即可，比如c*和空字符比较，也就是第一排前三个。两个空字符肯定是匹配的，值为1，c和空字符肯定不匹配，格子值为0，c*是和空字符匹配的，因为可以是0个c，所以，直接观察左边两个格子的值即可。然后考虑1个的情况，现在可以换一种思想，如果当前行列匹配需要1个字符，那么上一行和当前列匹配肯定是只需要0个字符，如果上一行成功匹配，那么这一行肯定也成功。同理可得1个或者多个匹配的话，只需要看上一个格子是否满足条件即可。\n可能讲述的还是不清晰，建议先做简单的动态规划解法字符串匹配问题。比如最长公共子序列等问题，再来做这题会清晰很多。\ncode\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        vector> dp(s.size()+1,vector(p.size()+1,false));\n        dp[0][0]=true;\n\n        for(int i=1;i\nalgorithm analysis\n定义了一个二维数组，如果s的长度为m，p的长度为n。二维数组就是一个m*n的矩形。算法需要遍历这个二维数组，循环中时间复杂度为O(1)，最后时间复杂度是O(mn)\n"},"11.-container-with-most-water.html":{"url":"11.-container-with-most-water.html","title":"11. Container With Most Water","keywords":"","body":"11. Container With Most Water\nproblem description\nGiven n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\nNote: You may not slant the container and n is at least 2.\n\nExample:\nInput: [1,8,6,2,5,4,8,3,7]\nOutput: 49\n\nalgorithm thought\n首先分析如果想装更多的水，我们需要两个柱子隔得越远越好，并且两个柱子中较矮的那根柱子也会决定装水的量。直接暴力法应该是很多人第一次就想到的方法，两个循环，遍历每一种组合。但是这题还有个条件，就是两个隔得越远，更大容量的概率会大很多。其实这里也用到了之前two sum中第二个方法，左右指针法。现在回顾一下two sum双指针法，首先sort数组，然后左右向中间逼近。这里面也用到了一中额外条件，就是数组已经有序，如果和小于target，就将小的变大一点，也就是left++，反之大的减小。\n这题我们也定义左右指针，每次都计算容量，最后取最大值。关键是左右指针如何移动。哪边的柱子更小我就移动哪个，因为移动必定导致宽度减小，只有靠高度增高，才有可能提高总容量，所以这样移动不会漏掉最大值\ncode\nclass Solution {\npublic:\n    int maxArea(vector& height) {\n        int i=0,j=height.size()-1;\n        int res=0;\n        while(i\nalgorithm analysis\n这个代码很简单，时间复杂度是O(n)\n"},"14.-longest-common-prefix.html":{"url":"14.-longest-common-prefix.html","title":"14. Longest Common Prefix","keywords":"","body":"14. Longest Common Prefix\nWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\nExample 1:\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\nExample 2:\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\nNote:\nAll given inputs are in lowercase letters a-z\nalgorithm thought\n以第一个字符串为基准，从第一个字符开始，对比所有字符串。出现不一样的就返回，都是一样的就加入到返回值后面。\ncode\nclass Solution {\npublic:\n    string longestCommonPrefix(vector& strs) {\n        if(strs.size()==1)\n            return strs[0];\n        if(strs.size()==0)\n            return \"\";\n        string res=\"\";\n        for(int i=0;i\nalgorithm analysis\n其实整个算法的逻辑是不需要判断size==1的，也就是第一行。但是如果不判断的话，就会在循环中一直判断并且调用push_back到res中，会及其耗时间。加上第一个判断之后，整个代码运行时会快很多的。\n"},"15.-3sum.html":{"url":"15.-3sum.html","title":"15. 3Sum","keywords":"","body":"15. 3Sum\nproblem description\nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNote:\nThe solution set must not contain duplicate triplets.\nExample:\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n\nalgorithm thought\n以之前的two sum为基础来解决这题。这里要求3个数加起来为0，也就是两个数加起来为零减去另一个数，这样就成了two sum了，首先sort一下数组，这样，之后two sum的时候能直接用左右指针逼近需求值。记得考虑如何识别一样的结果，这里题目要求不能有重复结果。\n第三次做的时候，发现第二次的解答有可以优化的地方。在外层循环遍历到大于0的数的时候，就可以直接返回结果了。时间从96ms提升到了88ms。\ncode\nclass Solution {\npublic:\n    vector> threeSum(vector& nums) {\n        sort(nums.begin(),nums.end());\n        vector> res;\n        for(int i=0;i tmp;\n                        tmp.push_back(nums[left]);\n                        tmp.push_back(nums[right]);\n                        tmp.push_back(nums[i]);\n                        res.push_back(tmp);\n                        while(leftsum)\n                        right--;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n排序需要O(nlgn)时间复杂度，算法中有两个循环，外层循环执行n次，内层循环执行(n-i){i为0-n}次。循环需要时间复杂度是O(n平方)，最后算法的时间复杂度是O(n平方)。\n"},"16.3sum-closest.html":{"url":"16.3sum-closest.html","title":"16.3Sum Closest","keywords":"","body":"16.3Sum Closest\n这题和15题算法基本一模一样，就是判断相等改成的找到最相近的，\ncode\nclass Solution {\npublic:\n    int threeSumClosest(vector& nums, int target) {\n        sort(nums.begin(),nums.end());\n        int sum=nums[0]+nums[1]+nums[2];\n        for(int i=0;i0?left++:right--;\n                }\n            }\n        }\n\n        return sum;\n    }\n};\n\n"},"17.-letter-combinations-of-a-phone-number.html":{"url":"17.-letter-combinations-of-a-phone-number.html","title":"17. Letter Combinations of a Phone Number","keywords":"","body":"17. Letter Combinations of a Phone Number\nproblem description\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\nExample:\nInput: \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\nNote:\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\nalgorithm thought\n典型的回溯法，没有任何需要剪枝的地方，直接深度优先遍历所有的结果，并保存。\ncode\nclass Solution {\npublic:\n    string ma[8]={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\n    vector letterCombinations(string digits) {\n        vector res;\n        if(digits.size()==0)\n            return res;\n        conbin(res,digits,0,\"\");\n        return res;\n\n    }\n    void conbin(vector& res,string digits,int pos,string tmp){\n        if(pos==digits.size()){\n            res.push_back(tmp);\n            return;\n        }\n        int num=int(digits[pos]-'0')-2;\n        for(int i=0;i\nalgorithm analysis\n每个数字代表3-4个字符，如果都是代表3个字符。那么每次遍历的通量就是3个，如果输入digits size是n\n时间复杂度就是O(3^n)\n"},"18.-4sum.html":{"url":"18.-4sum.html","title":"18. 4Sum","keywords":"","body":"18. 4Sum\n这题和15题算法基本一模一样\ncode\nclass Solution {\npublic:\n    vector> fourSum(vector& nums, int target) {\n        sort(nums.begin(),nums.end());\n        vector> res;\n        if(nums.size()sum)\n                        right--;\n                    else\n                        left++;\n                    //cout\n"},"19.-remove-nth-node-from-end-of-list.html":{"url":"19.-remove-nth-node-from-end-of-list.html","title":"19. Remove Nth Node From End of List","keywords":"","body":"19. Remove Nth Node From End of List\nproblem description\nGiven a linked list, remove the n-th node from the end of list and return its head.\nExample:\nGiven linked list: 1->2->3->4->5, and n = 2.\n\nAfter removing the second node from the end, the linked list becomes 1->2->3->5.\n\nNote:\nGiven n will always be valid.\nFollow up:\nCould you do this in one pass?\nalgorithm thought\n删除倒数第n个链表中的节点。链表不像数组，不能直接按index访问。所有人第一次做这种题肯定是想先遍历一遍得出长度，然后在删除倒数第n个。\n但是链表找第倒数第几个节点有个小技巧，就是前后指针。比如这里的倒数第n个节点，我们首先让前指针先走n步，然后后指针和前指针一起行动。当前指针到终点的时候，后指针这时候正好在倒数第n个节点。这样就能实现一边遍历就能删除节点。\n同样还有一种快慢指针，多用于求链表中点的。快慢指针都是从head点出发，一个每次走两步一个每次走一步，当快指针到tail节点的时候，慢指针正好在中点。\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    public:\n    ListNode* removeNthFromEnd(ListNode* head, int n)\n    {\n        ListNode* tmp=new ListNode(-1);\n        tmp->next=head;\n        ListNode* second=tmp;\n        while(--n){\n            head=head->next;\n        }\n        while(head->next){\n            head=head->next;\n            second=second->next;\n        }\n        second->next=second->next->next;\n        return tmp->next;\n    }\n};\n\nalgorithm analysis\n一次遍历，时间复杂度O(n)\n"},"20.-valid-parentheses.html":{"url":"20.-valid-parentheses.html","title":"20. Valid Parentheses","keywords":"","body":"20. Valid Parentheses\nproblem description\nGiven a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\n\nNote that an empty string is also considered valid.\nExample 1:\nInput: \"()\"\nOutput: true\n\nExample 2:\nInput: \"()[]{}\"\nOutput: true\n\nExample 3:\nInput: \"(]\"\nOutput: false\n\nExample 4:\nInput: \"([)]\"\nOutput: false\n\nExample 5:\nInput: \"{[]}\"\nOutput: true\n\nalgorithm thought\n括号匹配问题在上数据结构课上也是会讲的。没学过数据结构之前可能很难相出用栈来做这题，学完之后就很显然了。其实栈的用处很大，在之后很多地方也会用到。线性处理一组数据的时候，如果需要满足某些条件，可以考虑一下能否用栈解决。这题就是线性处理一个字符串，并且需要满足一些条件。最近的一个括会肯定要和最近出现的一个括首匹配。用一个栈保存最近出现的括首即可\ncode\nclass Solution {\npublic:\n    bool isValid(string s) {\n        stack st;\n        for(auto ch:s){\n            if(ch==']'){\n                if(st.empty()||st.top()!='[')\n                    return false;\n                st.pop();\n            }else if(ch==')'){\n                if(st.empty()||st.top()!='(')\n                    return false;\n                st.pop();\n            }else if(ch=='}'){\n                if(st.empty()||st.top()!='{')\n                    return false;\n                st.pop();\n            }else\n                st.push(ch);\n        }\n        return st.empty();\n    }\n};\n\nalgorithm analysis\n一个循环线性处理一个字符串，时间复杂度O(n)。\n"},"21.-merge-two-sorted-lists.html":{"url":"21.-merge-two-sorted-lists.html","title":"21. Merge Two Sorted Lists","keywords":"","body":"21. Merge Two Sorted Lists\nproblem description\nMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\nExample:\nInput: 1->2->4, 1->3->4\nOutput: 1->1->2->3->4->4\n\nalgorithm thought\n之前也提到了，碰到链表题并且返回值是链表的情况下，可以首先考虑能否用递归解题。这题正好可以。和之前链表加法很相似，可能还简单一点\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if(l1==NULL)\n            return l2;\n        else if(l2==NULL)\n            return l1;\n        if(l1->valval){\n            l1->next=mergeTwoLists(l1->next,l2);\n            return l1;\n        }else{\n            l2->next=mergeTwoLists(l1,l2->next);\n            return l2;\n        }\n        return NULL;\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n)的，递归肯定是比迭代方法慢一点的，但是两种方法时间复杂度是一样的。之后有时间来实现以下迭代版本的把。\n"},"22.-generate-parentheses.html":{"url":"22.-generate-parentheses.html","title":"22. Generate Parentheses","keywords":"","body":"22. Generate Parentheses\nproblem description\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nFor example, given n = 3, a solution set is:\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n\nalgorithm thought\n括号生成，首先需要知道合法的括号序列是哪样的。一个右括号前必须有一个左括号。由于题目中都是小括号号，所以这里还不用考虑其他问题。这种题显然是回溯法解决，也可以说是递归。但是不是单纯的生成所有组合，而是有条件的生成。在生成了一个左括号的情况下，才能生成一个右括号。\ncode\nclass Solution {\npublic:\n    vector generateParenthesis(int n) {\n        if(n==0)\n            return {};\n        vector res;\n        help(res,\"\",n,0);\n        return res;\n    }\n    void help(vector&res,string tmp,int left,int right){\n        if(left==0&&right==0){\n            res.push_back(tmp);\n            return;\n        }\n        if(left){\n            help(res,tmp+'(',left-1,right+1);\n        }\n        if(right){\n            help(res,tmp+')',left,right-1);\n        }\n    }\n};\n\nalgorithm analysis\n函数中进行的都是O(1)的操作，主要需要分析函数运行了多少次。分析了很久，得出时间变化满足很复杂，这里就不分析了\n"},"23.-merge-k-sorted-lists.html":{"url":"23.-merge-k-sorted-lists.html","title":"23. Merge k Sorted Lists","keywords":"","body":"23. Merge k Sorted Lists\nproblem description\nMerge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\nExample:\nInput:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nOutput: 1->1->2->3->4->4->5->6\n\nalgorithm thought\n之前又题目做过合并两个有序链表的，这里是k个。可以借助归并排序的思路，每个两两合并，合并到最后就可以了。也可以用堆的来做。用最小堆，每次从堆中取出最小的链表，然后将这个链表的下一个值重新加入到堆中。在c++中，可以用stl自带的heap类算法做这题，也可以用直接用优先队列来做这题。\n我这里是用优先队列来做的\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    struct cmp{\n        bool operator()(const ListNode* l1,ListNode* l2){\n            return l1->val>l2->val;\n        }\n    };\n    ListNode* mergeKLists(vector& lists) {\n        if(lists.size()==0)\n            return NULL;\n        priority_queue,cmp> pro;\n        for(auto list:lists){\n            if(list)\n                pro.push(list);\n        }\n        ListNode* res=new ListNode(-1);\n        ListNode* tmp=res;\n        while(!pro.empty()){\n            tmp->next=pro.top();\n            pro.pop();\n            tmp=tmp->next;\n            if(tmp->next)\n                pro.push(tmp->next);\n        }\n        return res->next;\n    }\n};\n\nalgorithm analysis\n这个算法不好分析，现在假设有k个链表，每个链表大小都是n，并且都是一样的链表。首先建堆需要O(k)时间复杂度(我这题不是交换建堆，是一个个插入的)，每次拿出是O(lgk)，再插入是O(lgk)，进行n*k次最后时间是O(n)+O(lgk)*n*k,所以时间复杂度是O(nklgk).当然这只是大致分析。\n"},"24.-swap-nodes-in-pairs.html":{"url":"24.-swap-nodes-in-pairs.html","title":"24. Swap Nodes in Pairs","keywords":"","body":"24. Swap Nodes in Pairs\nproblem description\nGiven a linked list, swap every two adjacent nodes and return its head.\nYou may not modify the values in the list's nodes, only nodes itself may be changed.\nExample:\nGiven 1->2->3->4, you should return the list as 2->1->4->3.\n\nalgorithm thought\n第三次做题真的就很有经验了，看到链表题并且返回的是一个链表直接递归解决。这题不递归肯定也能做，也不是很难，但是递归能省好多事\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if(head==NULL||head->next==NULL)\n            return head;\n        ListNode*tmp=head->next;\n        head->next=swapPairs(tmp->next);\n        tmp->next=head;\n        return tmp;\n    }\n};\n\nalgorithm analysis\n很简单的题，时间复杂度O(n)\n"},"27.-remove-element.html":{"url":"27.-remove-element.html","title":"27. Remove Element","keywords":"","body":"27. Remove Element\nproblem description\nGiven an array nums and a value val, remove all instances of that value in-place and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\nExample 1:\nGiven nums = [3,2,2,3], val = 3,\n\nYour function should return length = 2, with the first two elements of nums being 2.\n\nIt doesn't matter what you leave beyond the returned length.\n\nExample 2:\nGiven nums = [0,1,2,2,3,0,4,2], val = 2,\n\nYour function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\n\nNote that the order of those five elements can be arbitrary.\n\nIt doesn't matter what values are set beyond the returned length.\n\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeElement(nums, val);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i \nalgorithm thought\n题目很简单，判断相等赋值即可，只是看着自己之前写的代码实在太难受，想优化一下。\ncode\n//之前的代码\nclass Solution {\npublic:\n    int removeElement(vector& nums, int val) {\n        int res=nums.size();\n        int pos=0;\n        for(int i=0;i& nums, int val) {\n        int res=0;\n        for(auto num:nums){\n            if(num!=val)\n                nums[res++]=num;\n        }\n        return res;\n    }\n};\n\nalgorihtm analysis\n上面代码是9个月前写的。但是还不知道auto情有可原，毕竟是做到后面几题才慢慢用起来的。但是循环里的处理感觉太不简洁了，看着很难受。所以改成了现在的代码，虽然时间复杂度是一样的，但是代码更加易读，看着舒服\n"},"28.-implement-strstrkmp-suan-fa.html":{"url":"28.-implement-strstrkmp-suan-fa.html","title":"28. Implement strStr()","summary":"KMP算法","keywords":"","body":"28. Implement strStr()\nproblem description\nImplement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nExample 1:\nInput: haystack = \"hello\", needle = \"ll\"\nOutput: 2\n\nExample 2:\nInput: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1\n\nClarification:\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().\nalgorithm thought\n这题其实暴力发就能解决，就是单纯的字符串匹配。但是太慢了，历史上也有几位大佬觉得这种方法很慢。并且确实有可以优化的地方，如果是一个人来匹配字符串，当一个成功了很多次之后最后一个字符匹配失败了，他不会前进一位重新来。而是跳过已知的不匹配的情况。\n我描述肯定不是很好懂，可以看看这个网站的例子:https://subetter.com/algorithm/kmp-algorithm.html\nkmp最关键的是构建next数组，然后就很好匹配了。\ncode\n//最原始的暴力法\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        if(needle.size()==0)\n            return 0;\n        if(haystack.size()==0){\n                return -1;\n        }\n        for(int i=0;inext(needle.size(),-1);    \n        getnext(next,needle);\n        int i=0;\n        int j=0;\n        while(i&next,string&needle){\n        int size=needle.size()-1;\n        int i=0;\n        int j=-1;\n        //next[0]=-1;\n        while(i\nalgorithm analysis\n暴力法两个循环，heystack字符串长m，needle字符串长n，时间复杂度是O(nm)\nkmp算法，求出next数组时间复杂度是O(n),匹配时间复杂度是O(m)，m>n。最后时间复杂度是O(m)\n"},"29.-divide-two-integers.html":{"url":"29.-divide-two-integers.html","title":"29. Divide Two Integers","keywords":"","body":"29. Divide Two Integers\nproblem description\nGiven two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.\nReturn the quotient after dividing dividend by divisor.\nThe integer division should truncate toward zero.\nExample 1:\nInput: dividend = 10, divisor = 3\nOutput: 3\n\nExample 2:\nInput: dividend = 7, divisor = -3\nOutput: -2\n\nalgorithm thought\n记得csapp专门有一门实验就跟这个题目很类似。比如不用哪些符号实现其他的符号啥的。这里就是不用乘除取余数，实现除法。能用的还有加法和减法，除法其实就是看被除数中能减去几个除数。想到这一步就很清晰了，直接诶一直减去除数就行。但是这样有的慢，可以减去除数的倍数，这样会快一点。直接移位最好，就能很快生成2的倍数\n注意会有一种情况超过INT_MAX,那就是INT_MIN/-1的时候，这种情况要单独考虑下\ncode\nclass Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        if(dividend==INT_MIN&&divisor==-1)\n            return INT_MAX;\n        long dd=labs(dividend);\n        long di=labs(divisor);\n        long res=0;\n        while(dd>=di){\n            long tmp=di, m=1;\n            while(tmp0^divisor>0?-res:res;\n    }\n};\n\nalgorithm analysis\n虽然有个循环，但是每次tmp都是乘2扩展，所以时间复杂度是O(1).\n"},"31.-next-permutation.html":{"url":"31.-next-permutation.html","title":"31. Next Permutation","keywords":"","body":"31. Next Permutation\nproblem description\nImplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\nThe replacement must be in-place and use only constant extra memory.\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n1,2,3 → 1,3,23,2,1 → 1,2,31,1,5 → 1,5,1\nalgorithm thought\n我们通过枚举法是可以直接枚举出所有排列的，但是这样太慢，并且排列直接明显有自己的规律。查询维基百科可以知道下一个排列的定义\n\nFind the largest index k such that nums[k] . If no such index exists, just reverse nums and done.\nFind the largest index l > k such that nums[k] .\nSwap nums[k] and nums[l].\nReverse the sub-array nums[k + 1:].\n\n直接代码实现\ncode\nclass Solution {\npublic:\n    void nextPermutation(vector& nums) {\n        int n = nums.size(), k, l;\n        for (k = n - 2; k >= 0; k--) {\n            if (nums[k]  k; l--) {\n                if (nums[l] > nums[k]) {\n                    break;\n                }\n            } \n            swap(nums[k], nums[l]);\n            reverse(nums.begin() + k + 1, nums.end());\n        }\n    }\n};\n\nalgorithm analysis\n最坏情况下，时间复杂度是O(n).最佳情况下，时间复杂度是O(1)\n"},"32.-longest-valid-parentheses.html":{"url":"32.-longest-valid-parentheses.html","title":"32. Longest Valid Parentheses","keywords":"","body":"32. Longest Valid Parentheses\nproblem description\nGiven a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\nExample 1:\nInput: \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\"\n\nExample 2:\nInput: \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\"\n\nalgorithm thought\n括号匹配问题就是用栈解决，这里其实也存在括号匹配，所以首先考虑用栈解决。这题比括号匹配需要多考虑的一个点就是如果右括号多了的话，需要重新开始记录，因为后面的肯定和前面的括号不能连在一起了。所以这里需要特殊考虑。\n我首先自己写了一个双栈的代码，一个记录之前匹配好的括号的值，一个是记录左右括号括号的。但是后面看了discuss发现其实用一个栈就行，每次直接一次匹配完当前合法的，也就是右括号没多的情况。如果右括号多了，就改变一下start pos\ncode\n//use two stack\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        stack st1;\n        st1.push(0);\n        stack st2;\n        int res=0;\n        for(auto ch:s){\n            if(ch=='('){\n                st1.push(0);\n                st2.push(ch);\n            }else{\n                if(st2.empty()){\n                    st1.push(0);\n                }else{\n                    st2.pop();\n                    int tmp=st1.top();\n                    st1.pop();\n                    tmp+=2;\n                    tmp+=st1.top();\n                    st1.pop();\n                    res=max(res,tmp);\n                    st1.push(tmp);\n                }\n            }\n        }\n        return res;\n    }\n};\n\n//use one stack\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        stack st;\n        int startpos=-1;\n        int res=0;\n        for(int i=0;i\nalgorithm analysis\n不管是使用两个栈还是一个栈，时间复杂度都是O(n),但是一个栈的方法明显好很多。\n"},"33.-search-in-rotated-sorted-array.html":{"url":"33.-search-in-rotated-sorted-array.html","title":"33. Search in Rotated Sorted Array","keywords":"","body":"33. Search in Rotated Sorted Array\nproblem description\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\nYou may assume no duplicate exists in the array.\nYour algorithm's runtime complexity must be in the order of O(log n).\nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n\nalgorithm thought\n其实是二分查考的变种，一个有序数组，rotate之后数组一半还是顺序的。二分查找只要确定一半是否满足 就可以排除另一半。我们找到有序的一半之后，判断target是否期中，如果是就进入这一半查找否则进入另一半。这样每次排除一半，时间复杂度就是O(nlgn)\ncode\nclass Solution {\npublic:\n    int search(vector& nums, int target) {\n        int left=0;int right=nums.size()-1;\n        int mid;\n        while(leftnums[mid]&&target=nums[left]&&target\nalgorithm thought\n虽然循环中间处理比二分查找多很多步骤，但是时间复杂度还是O(1)的。每次排除一半，最后时间复杂度是O(nlgn)\n"},"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html":{"url":"34.-find-first-and-last-position-of-element-in-sorted-array-binary_search-and-and-low_bound-and-and.html","title":"34. Find First and Last Position of Element in Sorted Array","summary":"binary_search&&low_bound&&up_bound","keywords":"","body":"34. Find First and Last Position of Element in Sorted Array\nproblem description\nGiven an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\nYour algorithm's runtime complexity must be in the order of O(log n).\nIf the target is not found in the array, return [-1, -1].\nExample 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n\nalgorithm thought\n找到第一个target和最后一个target，需要时间复杂度是O(lgn)。其实就是二分查找，但是不是单纯的二分查找。需要找到第一个和最后一个。这其实很像stl函数中的lower_bound和up_bound。但是upper_bound是找到一个不是target的值。我们只需要将upper_bound最后的索引减一就行了。\n之前我一直搞不清这几个二分查找的本质区别和如何去写。这个我总结出了规律，对于lower_bound，要找到第一个target，在mid>=target的时候，将right=mid，最后一次查找的时候，right就会是第一个target。左开右闭表示法，最后当left和right差1的时候，mid肯定等于left，所以最后left会赋值给right+1。left和right会在第一个target处重合。\n对于up_bound同理，只要将mid>=target改为mid>target即可。这样就会在刚好大于target的地方重合。我理解这两个二分查找也是用了很久时间，看文字肯定会有很多疑惑，可以反复看看代码，自习推敲。\ncode\n//upper_bound\nvoid uppper_bound(int l,int r,int x){\n      while(lx) r=mid;\n        else  l=mid+1;\n    }\n}\n\n//low_bound\nvoid lower_bound(int l,int r,int x){\n      while(l=x) r=mid;\n        else  l=mid+1;\n    }\n}\n\n//此题代码\nclass Solution {\npublic:\n    vector searchRange(vector& nums, int target) {\n        vector res(2,-1);\n        if(nums.size()==0)\n            return res;\n        int left=0,right=nums.size();\n        while(lefttarget)\n                right=mid;\n            else\n                left=mid+1;\n        }\n        left--;\n        if(left>=0&&left\nalgorithm analysis\n都是二分查找时间复杂度是O(lgn)，stl中的二分查找也是直接用low_bound实现的，low_bound在二分查找中只有两个判断分支，会比传统的3个判断分支更加平衡以及快速\n"},"35.-search-insert-position.html":{"url":"35.-search-insert-position.html","title":"35. Search Insert Position","keywords":"","body":"35. Search Insert Position\n看懂意思之后发现直接使用low_bound即可\ncode\nclass Solution {\npublic:\n    int searchInsert(vector& nums, int target) {\n        int left=0,right=nums.size(),mid;\n        while(left=target)\n                right=mid;\n            else\n                left=mid+1;\n        }\n        return left;\n    }\n};\n\n"},"36.-valid-sudoku.html":{"url":"36.-valid-sudoku.html","title":"36. Valid Sudoku","keywords":"","body":"36. Valid Sudoku\nproblem description\nDetermine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\nA partially filled sudoku which is valid.\nThe Sudoku board could be partially filled, where empty cells are filled with the character '.'.\nExample 1:\nInput:\n[\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\nOutput: true\n\nExample 2:\nInput:\n[\n  [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being \n    modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n\nNote:\n\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\nOnly the filled cells need to be validated according to the mentioned rules.\nThe given board contain only digits 1-9 and the character '.'.\nThe given board size is always 9x9.\n\nalgorithm thought\n使用hash表存放之前访问过的信息，可以保证每个位置只访问一次。这也类似一些一维数组题目，需要我们在O(n)时间复杂度内解决问题。这里需要保存数独规则下，当前位置对后面位置的影响。在数独中，行和列以及block中不能出现一样的数字。每次将访问的数字3个规则保存到hash表中，这种思路其实不难得出，难得出的是该如果在hash表中保存信息。如何保存可以看代码。\ncode\nclass Solution {\npublic:\n    bool isValidSudoku(vector>& board) {\n        unordered_set st;\n        for(int i=0;i\nalgorithm analysis\n算法中有两个for循环，循环中进行的操作是O(1)的，最后时间复杂度是O(n²)\n"},"39.-combination-sum.html":{"url":"39.-combination-sum.html","title":"39. Combination Sum","keywords":"","body":"39. Combination Sum\nproblem description\nGiven a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\nThe same repeated number may be chosen from candidates unlimited number of times.\nNote:\n\nAll numbers (including target) will be positive integers.\nThe solution set must not contain duplicate combinations.\n\nExample 1:\nInput: candidates = [2,3,6,7], target = 7,\nA solution set is:\n[\n  [7],\n  [2,2,3]\n]\n\nExample 2:\nInput: candidates = [2,3,5], target = 8,\nA solution set is:\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n\nalgorithm thought\n组合数相加最后和为target，基本需要遍历所有集合。使用回溯法得到所有的集合，判断和是否为target。由于数字相加如果已经大于target，就没必要继续遍历了。所以加入了剪枝策略，首先sort数组，为了先遍历小数字后遍历大数字。然后在进入下一个函数之前判断是否满足剪枝策略，如果满足，就不进入函数。\ncode\nclass Solution {\npublic:\n    std::vector > combinationSum(std::vector &candidates, int target) {\n         std::sort(candidates.begin(), candidates.end());\n        std::vector > res;\n        std::vector combination;\n        combinationSum(candidates, target, res, combination, 0);\n        return res;\n    }\nprivate:\n    void combinationSum(std::vector &candidates, int target, std::vector > &res, std::vector &combination, int begin) {\n        if (!target) {\n            res.push_back(combination);\n            return;\n        }\n        for (int i = begin; i != candidates.size() && target >= candidates[i]; ++i)\n            if (i == begin || candidates[i] != candidates[i - 1]) {\n                combination.push_back(candidates[i]);\n                combinationSum(candidates, target - candidates[i], res, combination, i);\n                combination.pop_back();\n            }\n    }\n};\n\nalgorithm analysis\n回溯法世家复杂度是O(2^n),很慢，但是这里加入了剪枝策略，还是一定程度上加快了运行速度的。\n"},"40.-combination-sum-ii.html":{"url":"40.-combination-sum-ii.html","title":"40. Combination Sum II","keywords":"","body":"40. Combination Sum II\n就改了上一题一个条件，不能重复使用。在回溯进入下一个的函数的时候，将pos加一。而不是上一题那样不变\ncode\nclass Solution {\npublic:\n    std::vector > combinationSum2(std::vector &candidates, int target) {\n         std::sort(candidates.begin(), candidates.end());\n        std::vector > res;\n        std::vector combination;\n        combinationSum2(candidates, target, res, combination, 0);\n        return res;\n    }\nprivate:\n    void combinationSum2(std::vector &candidates, int target, std::vector > &res, std::vector &combination, int begin) {\n        if (!target) {\n            res.push_back(combination);\n            return;\n        }\n        for (int i = begin; i != candidates.size() && target >= candidates[i]; ++i)\n            if (i == begin || candidates[i] != candidates[i - 1]) {\n                combination.push_back(candidates[i]);\n                combinationSum2(candidates, target - candidates[i], res, combination, i+1);\n                combination.pop_back();\n            }\n    }\n};\n\n"},"41.-first-missing-positive.html":{"url":"41.-first-missing-positive.html","title":"41. First Missing Positive","keywords":"","body":"41. First Missing Positive\nproblem description\nGiven an unsorted integer array, find the smallest missing positive integer.\nExample 1:\nInput: [1,2,0]\nOutput: 3\n\nExample 2:\nInput: [3,4,-1,1]\nOutput: 2\n\nExample 3:\nInput: [7,8,9,11,12]\nOutput: 1\n\nNote:\nYour algorithm should run in O(n) time and uses constant extra space.\nalgorithm thought\n得到第一个缺失的正数，由于不需要考虑负数，这里可以很好地用数组下标对应相应的数。一次遍历将相应的数填入对应的下标当中。最后再次遍历数组，找到第一个缺失的数。\ncode\nclass Solution {\npublic:\n    int firstMissingPositive(vector& nums) {\n        int size=nums.size();\n        for(int i=0;i0&&nums[i]\nalgorithm analysis\n一次遍历数组，时间复杂度O(n)。没有用额外空间存储数据，空间复杂度是O(1)。符合要求\n"},"42.-trapping-rain-water.html":{"url":"42.-trapping-rain-water.html","title":"42. Trapping Rain Water","keywords":"","body":"42. Trapping Rain Water\nproblem description\nGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\nThe above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!\nExample:\nInput: [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\n\nalgorithm thought\n和之前一个接水的题目异曲同工，使用左右指针结题。哪边短，动哪边，最后两指针重合退出循环。中间维护左右相应的最大值，存水量等于最大值减去当前值。\ncode\nclass Solution {\npublic:\n    int trap(vector& height) {\n        if(height.size()==0)\n            return 0;\n        int left=0;\n        int right=height.size()-1;\n        int leftmax=height[left];\n        int rightmax=height[right];\n        int res=0;\n        while(left\nalgorithm thought\n一个循环左右指针逼近，时间复杂度O(n)。\n"},"44.-wildcard-matching.html":{"url":"44.-wildcard-matching.html","title":"44. Wildcard Matching","keywords":"","body":"44. Wildcard Matching\nproblem description\nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\nNote:\n\ns could be empty and contains only lowercase letters a-z.\np could be empty and contains only lowercase letters a-z, and characters like ? or *.\n\nExample 1:\nInput:\ns = \"aa\"\np = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\nInput:\ns = \"aa\"\np = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.\n\nExample 3:\nInput:\ns = \"cb\"\np = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\nExample 4:\nInput:\ns = \"adceb\"\np = \"*a*b\"\nOutput: true\nExplanation: The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".\n\nExample 5:\nInput:\ns = \"acdcb\"\np = \"a*c?b\"\nOutput: false\n\nalgorithm thought\n这题很之前的正则表达式很像，其实还简单一点。使用二维数组保存中间结果，动态规划解决问题。可以借鉴前面动态规划题目的解答。这里的?其实和之前的.一样。这里的*比之前的*更加加单\ncode\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        vector(p.size()+1,false);\n        for(int i=1;i\nalgorithm analysis\n时间复杂度O(n²)\n"},"45.-jump-game-ii.html":{"url":"45.-jump-game-ii.html","title":"45. Jump Game II","keywords":"","body":"45. Jump Game II\nproblem description\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nYour goal is to reach the last index in the minimum number of jumps.\nExample:\nInput: [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nNote:\nYou can assume that you can always reach the last index.\nalgorithm thought\n一次遍历解决问题，第一步能走到的地方就是nums[0]，每到一个地方，确定当前位置能走到的最大值。在一步走完之后，确定下一个最大能走到的范围。\ncode\nclass Solution {\npublic:\n    int jump(vector& nums) {\n        if(nums.size()\nalgorithm analysis\n一次遍历数组，时间复杂度O(n)\n"},"46.-permutations.html":{"url":"46.-permutations.html","title":"46. Permutations","keywords":"","body":"46. Permutations\nproblem description\nGiven a collection of distinct integers, return all possible permutations.\nExample:\nInput: [1,2,3]\nOutput:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n\nalgorithm thought\n我第一遍做的算法：\n得到所有排列，和之前组合数相加得到target很像。这里直接使用回溯法，加上一个位置数组，区分是否已经加入新组合。\n第二遍做的算法：\n得到所有排列问题，也是我们算法课将回溯法的一个例题。直接每次交换两个数字，将所有情况都交换一遍，就是所有排列。其实也可以用递归的思想解释问题。首先将一个数字交换到index 0位置，那么之后的所有位置又可以递归调用函数，得到后面位置的所有排列。第一位置补上，就是所有排列了\ncode\n//first time\nclass Solution {\npublic:\n    vector> permute(vector& nums) {\n        vector mark(nums.size(),false);\n        vector> res;\n        vector tmp;\n        per(nums,res,tmp,mark);\n        return res;\n    }\n    void per(vector& nums,vector>& res,vector tmp,vector& mark){\n        if(tmp.size()==nums.size()){\n            res.push_back(tmp);\n            return;\n        }\n        for(int i=0;i> permute(vector& nums) {\n        vector> res;\n        per(nums,res,0,nums.size());\n        return res;\n    }\n    void per(vector& nums,vector>& res,int i,int j){\n        if(i==j-1){\n            res.push_back(nums);\n            return ;\n        }\n        for(int k=i;k\nalgorithm thought\n对于第一个算法：回溯法时间复杂度是O(2^n)，但是这里应该不用那么久，遍历到后期，很多数中的数组都已经被加入，只需要直接continue；所以，这个算法还是不慢的\n对于第二个算法：得出所有的排列，类似枚举法，一共需要执行n!次。每次时间复杂度是O(1)。最后时间复杂度就是O(n!).\n"},"47.-permutations-ii.html":{"url":"47.-permutations-ii.html","title":"47. Permutations II","keywords":"","body":"47. Permutations II\nproblem desctiption\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\nExample:\nInput: [1,1,2]\nOutput:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n\nalgorithm thought\n这题和上一题唯一的区别就是有重复数字。但是这个区别对算法会产生很大的影响。两个一样的数，如果还是用上题的做法，会导致最后的结果多一倍。这里的问题就在于，如果找到重复的情况，然后规避这种情况。\n这里我们还是用递归解决。首先解决第一个index上数字的摆放，然后对于后面所有的数字，递归调用函数处理，直到最后一个数字。这里我们如何找到重复的情况呢？我们给第一个index摆放之后，进行第一个index替换的时候，判断，如果这时候，替换的数字和当前数字一样，就不替换，查看下一个数字。这样就能解决一个位置，两次为一个数字的问题了。注意这里不需要回溯，这是和上一题区别最大的地方。\ncode\nclass Solution {\npublic:\n    vector> permuteUnique(vector& nums) {\n        sort(nums.begin(),nums.end());\n        vector> res;\n        recursion(nums, 0, nums.size(), res);\n        return res;\n    }\n    void recursion(vector num, int i, int j, vector > &res) {\n        if (i == j-1) {\n            res.push_back(num);\n            return;\n        }\n        for (int k = i; k \nalgorithm analysis\n和上一题时间复杂度应该是一样的——O(n!)。但是最后时间会比上一个算法慢很多，原因就在于这里函数参数num没用引用传递。每次参数传递的时候，会复制所有的数字，时间开销会很大。\n"},"48.-rotate-image.html":{"url":"48.-rotate-image.html","title":"48. Rotate Image","keywords":"","body":"48. Rotate Image\nproblem description\nYou are given an n x n 2D matrix representing an image.\nRotate the image by 90 degrees (clockwise).\nNote:\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\nExample 1:\nGiven input matrix = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\nrotate the input matrix in-place such that it becomes:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n\nExample 2:\nGiven input matrix =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\nrotate the input matrix in-place such that it becomes:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n\nalgorithm thought\n最简单的方法肯定是定义一个矩阵，然后将这个矩阵转置之后赋值给这个矩阵。但是这样需要O(n²)空间题目也明显要求了我们空间复杂度维持在O(1)内。我们必须在本来的数组上操作。如果只能这么操作的话，肯定就是使用swap函数，交换值。我们可以对称的改变矩阵，对于旋转90度，我们只需要首先按照竖直中线对称，再按照对角线对称就能得到结果。\ncode\nclass Solution {\npublic:\n    void rotate(vector>& matrix) {\n        int n=matrix.size();\n        for(int i=0;i\nalgorithm analysis\n对二维矩阵操作，双重循环。最后时间复杂度是O(n²)\n"},"49.-group-anagrams.html":{"url":"49.-group-anagrams.html","title":"49. Group Anagrams","keywords":"","body":"49. Group Anagrams\nproblem description\nGiven an array of strings, group anagrams together.\nExample:\nInput: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\nOutput:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n\nNote:\n\nAll inputs will be in lowercase.\nThe order of your output does not matter.\n\nalgorithm thought\n找出有相同字符，顺序不一样的所有字符串，然后返回他们的集合。这里有一种最简单的办法确定-sort。将所有的字符串sort一下，排序之后相等的字符串，就可以认定为一个group。\ncode\nclass Solution {\npublic:\n    vector> groupAnagrams(vector& strs) {\n        unordered_map> ma;\n        for(int i=0;i({strs[i]});\n            }\n\n        }\n        vector> res;\n        for(auto& m:ma){\n            res.push_back(m.second);\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n假定有n个字符串，每个字符串平均长度是m，对每个字符排序时间复杂度是O(nlgn),两个字符串比较时间复杂度是O(n)，然后需要定义一个hashmap保存之前遍历的字符串的结果。最后时间复杂度是O(m*nlgn)\n"},"50.-pow-x-n.html":{"url":"50.-pow-x-n.html","title":"50. Pow(x, n)","keywords":"","body":"50. Pow(x, n)\nproblem description\nImplement pow(x, n), which calculates x raised to the power n (xn).\nExample 1:\nInput: 2.00000, 10\nOutput: 1024.00000\n\nExample 2:\nInput: 2.10000, 3\nOutput: 9.26100\n\nExample 3:\nInput: 2.00000, -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n\nNote:\n\n-100.0 x \nn is a 32-bit signed integer, within the range [−231, 231 − 1]\n\nalgorithm thought\n求2的100次方，如果直接乘100次，其实没有必要。完全可以求4的50次方，然后16的25次方。这样每次能减少一半的计算量。这里的问题就是还有负数。如果是负数的话，首先将x化为1/x。然后将n转化为正数。最后，一种最特殊的情况就是如果数字是INT_MIN,最后直接将n-1即可。这样INT_MIN就会变INT_MAX\ncode\nclass Solution {\npublic:\n    double myPow(double x, int n) {\n        if(n==0)\n            return 1;\n        if(n\nalgorithm analysis\n每次将次数降低一半，时间复杂度O(lgn)\n"},"51.-n-queens.html":{"url":"51.-n-queens.html","title":"51. N-Queens","keywords":"","body":"51. N-Queens\nproblem description\nThe n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.\n\nGiven an integer n, return all distinct solutions to the n-queens puzzle.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.\nExample:\nInput: 4\nOutput: [\n [\".Q..\",  // Solution 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // Solution 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above.\n\nalgorithm thought\n经典的n皇后问题。使用回溯法解决问题，每次放之前首先判断这个位置是否合法，如果合法，放入这位置。如果不合法判断下个能放的位置。最后如果没有能放的位置的时候，就回溯。\ncode\nclass Solution {\npublic:\n    vector> solveNQueens(int n) {\n        vector> res;\n        string t(n,'.');\n        vector tmp;\n        for(int i=0;i>& res,vector tmp,int pos){\n        if(pos==tmp.size()){\n            res.push_back(tmp);\n            return;\n        }\n        for(int i=0;i res){\n        for(int i=0;i=0&&j>=0){\n            if(res[i--][j--]=='Q')\n                return false;\n        }\n        i=x-1;j=y+1;\n        while(i>=0&&j\nalgorithm analysis\n这里的时间复杂度我也不是太清楚，查了资料，网上有两种说法，我觉得O(n^n)和O(n!)都有道理。\n"},"52.-n-queens-ii.html":{"url":"52.-n-queens-ii.html","title":"52. N-Queens II","keywords":"","body":"52. N-Queens II\n这题是上题的简化版本，最后返回数量即可\n"},"53.-maximum-subarray.html":{"url":"53.-maximum-subarray.html","title":"53. Maximum Subarray","keywords":"","body":"53. Maximum Subarray\nproblem description\nGiven an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nExample:\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle\nalgorithm analysis\n最大连续子数组和，典型的动态规划问题。如果现在给出大小为3的数字，分别为1，2，3。他们的结果是6这时候，如果数组最后加入一个数字4，结果会变为10。这个例子说明，可以用之前的结果来简化求解现在结果的过程。这也是动态规划的思想。这里还有一种情况，就是如果当前和为负值的情况，这时候不能用前面的负值，应该使用当前值直接表示。\ncode\nclass Solution {\npublic:\n    int maxSubArray(vector& nums) {\n        vector dp(nums.size(),0);\n        int ma=nums[0];\n        dp[0]=nums[0];\n        for(int i=1;i0?dp[i-1]:0);\n            ma=max(ma,dp[i]);\n        }\n        return ma;\n    }\n};\n\nalgorithm anlysis\n一次循环使用以为数组保存最后结果，复杂度时间O(n)\n"},"54.-spiral-matrix.html":{"url":"54.-spiral-matrix.html","title":"54. Spiral Matrix","keywords":"","body":"54. Spiral Matrix\nproblem description\nGiven a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\nExample 1:\nInput:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nOutput: [1,2,3,6,9,8,7,4,5]\n\nExample 2:\nInput:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\nalgorithm thought\n我对这个题其实一点都不陌生。大一第一个学习，算法设计课，就有这个题目。说实话，就用死方法肯定能做出来，只是很多冗余代码，很多条件判断。我记得我当时用4个bool变量确定行动方向。最后4个int定义行动的长度。我第一次做这个题好像也是这么做的。但是我第三次做题我觉得我不可能还用这中办法。于是我看了discuss，发现确实有很好地办法。用一个step定义当前行动的次数，step模4就能得出行动的当前方向。step模2就能得到是左右移动还是上下移动。左右移动一次，下一次左右移动就要减一。再定义一个移动的次数，保存能够左右移动和上下移动的次数。这种算法就省去了很多的条件判断\ncode\nclass Solution {\npublic:\n    vector spiralOrder(vector>& matrix) {\n        vector> move{{0,1},{1,0},{0,-1},{-1,0}};\n        int nr=matrix.size(); if(nr==0) return {};\n        int nc=matrix[0].size(); if(nc==0) return {};\n        vector res(nr*nc);\n        int pos=0;\n        vector nstep{nc,nr-1};\n        int step=0;\n        nr=0;nc=-1;\n        while(nstep[step%2]){\n            for(int i=0;i\nalgorithm thought\n虽然差算法和好算法，时间复杂度都需要O(n²)。但是这次的算法省去了很多多余中间变量，和条件判断，能够提升程序运行的时间。\n"},"55.-jump-game.html":{"url":"55.-jump-game.html","title":"55. Jump Game","keywords":"","body":"55. Jump Game\nproblem description\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nDetermine if you are able to reach the last index.\nExample 1:\nInput: [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nExample 2:\nInput: [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum\n             jump length is 0, which makes it impossible to reach the last index.\n\nalgorithm thought\n和之前jump game2类似。这里不限制你跳跃的次数，我们只需要每次记录能达到的最远距离即可。每次循环开始的时候更新最大值。如果更新之后的最大值和当前值是一样的话，说明只能跳到这里了，return false。如果所有的跳完，return true\ncode\nclass Solution {\npublic:\n    bool canJump(vector& nums) {\n        int maxrive=0;\n        for(int i=0;i\nalgorithm analysis\n算法遍历一次数组，时间复杂度O(n)。\n"},"56.-merge-intervals.html":{"url":"56.-merge-intervals.html","title":"56. Merge Intervals","keywords":"","body":"56. Merge Intervals\nproblem description\nGiven a collection of intervals, merge all overlapping intervals.\nExample 1:\nInput: [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n\nExample 2:\nInput: [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\nNOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.\nalgorithm thought\n两个间隔能合并，就是两个范围有重合。重合的话存在两种情况，第一种是左边重合，一种是右边重合。但是如果程序中同时考虑两个的话，情况会复杂很多。所以首先按照做范围排序，消除左边影响。然后一直看右边，如果当前interval与前一个interval重合，合并两个interval。然后继续看下一个，如果两个不重合，将当前interval push进vector，访问到下一个时，当前interval就是下一个interval\ncode\n/**\n * Definition for an interval.\n * struct Interval {\n *     int start;\n *     int end;\n *     Interval() : start(0), end(0) {}\n *     Interval(int s, int e) : start(s), end(e) {}\n * };\n */\nclass Solution {\npublic:\n    vector merge(vector& ins) {\n    if (ins.empty()) return vector{};\n    vector res;\n    sort(ins.begin(), ins.end(), [](Interval a, Interval b){return a.start \nalgorithm analysis\n首先排序，时间复杂度O(nlgn)。然后一个遍历数组，时间复杂度O(n)。最后时间复杂度O(nlgn)。这样看来，排序成了我们的瓶颈，但是也不能这么说，如果没有排序，时间复杂度至少是O(n²)\n"},"57.-insert-interval.html":{"url":"57.-insert-interval.html","title":"57. Insert Interval","keywords":"","body":"57. Insert Interval\nproblem description\nGiven a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\nYou may assume that the intervals were initially sorted according to their start times.\nExample 1:\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n\nExample 2:\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\nNOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.\nalgorithm thought\n和上一题一样，这里更简单的是，已经直接排好序了。所以，我们只需要找出中间可能有交叉的interval。然后合并。前后没有交叉的interval，就不变，直接插入。\ncode\n/**\n * Definition for an interval.\n * struct Interval {\n *     int start;\n *     int end;\n *     Interval() : start(0), end(0) {}\n *     Interval(int s, int e) : start(s), end(e) {}\n * };\n */\nclass Solution {\npublic:\n    vector insert(vector& intervals, Interval newInterval) {\n        vector res;\n        int index=0;\n        while(index\nalgorithm analysis\n这里不需要排序，时间复杂度O(n)\n"},"59.-spiral-matrix-ii.html":{"url":"59.-spiral-matrix-ii.html","title":"59. Spiral Matrix II","keywords":"","body":"59. Spiral Matrix II\nproblem description\nGiven a positive integer n, generate a square matrix filled with elements from 1 to _n_2 in spiral order.\nExample:\nInput: 3\nOutput:\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\n\nalgorithm thought\n和之前旋转矩阵题类似解答，可以移步到Spiral Matrix看algorithm thought\ncode\nclass Solution {\npublic:\n    vector> generateMatrix(int n) {\n        vector> res(n,vector(n,0));\n        vector nstep{n,n-1};\n        vector> move{{0,1},{1,0},{0,-1},{-1,0}};\n        int i=0,j=-1;\n        int pos=0;\n        int tmp=1;\n        while(nstep[pos%2]){\n            for(int k=0;k\nalgorithm analysis\n需要填满n*n个格子，每次填格子移动时间O(1)，最后时间复杂度O(n²)\n"},"60.-permutation-sequence.html":{"url":"60.-permutation-sequence.html","title":"60. Permutation Sequence","keywords":"","body":"60. Permutation Sequence\nproblem description\nThe set [1,2,3,...,n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\n\nGiven n and k, return the _k_th permutation sequence.\nNote:\n\nGiven n will be between 1 and 9 inclusive.\nGiven k will be between 1 and n! inclusive.\n\nExample 1:\nInput: n = 3, k = 3\nOutput: \"213\"\n\nExample 2:\nInput: n = 4, k = 9\nOutput: \"2314\"\n\nalgorithm thought\nn个数排列有n!种情况，如果数字是1-n，那么1开头的排列会有(n-1)!个。同理可以退出，如果需要找第k个排列，第一个字符我们是可以确定的。然后利用递归的思路，一直将数字推出。\ncode\n"},"61.-rotate-list.html":{"url":"61.-rotate-list.html","title":"61. Rotate List","keywords":"","body":"61. Rotate List\nproblem description\nGiven a linked list, rotate the list to the right by k places, where k is non-negative.\nExample 1:\nInput: 1->2->3->4->5->NULL, k = 2\nOutput: 4->5->1->2->3->NULL\nExplanation:\nrotate 1 steps to the right: 5->1->2->3->4->NULL\nrotate 2 steps to the right: 4->5->1->2->3->NULL\n\nExample 2:\nInput: 0->1->2->NULL, k = 4\nOutput: 2->0->1->NULL\nExplanation:\nrotate 1 steps to the right: 2->0->1->NULL\nrotate 2 steps to the right: 1->2->0->NULL\nrotate 3 steps to the right: 0->1->2->NULL\nrotate 4 steps to the right: 2->0->1->NULL\n\nalgorithm thought\n可以看到其实就是将链表倒数第k个位置截断，然后拼接到前面。知道这个意思之后，就只需要考虑如果k大于size的问题了。如果k等于size，链表长度不变，这就很明显，我们可以令k=k%size。最后截断链表即可\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if(head==NULL)\n            return head;\n        int size=1;\n        ListNode* tail=head;\n        while(tail->next){\n            size++;\n            tail=tail->next;\n        }\n        if(size==1)\n            return head;\n        k=k%size;\n        if(k==0)\n            return head;\n        k=size-k-1;\n        ListNode* pre=head;\n        ListNode* cur=head->next;\n        while(k--){\n            pre=pre->next;\n            cur=cur->next;\n        }\n        pre->next=NULL;\n        tail->next=head;\n        return cur;\n    }\n};\n\nalgorithm analysis\n开始算法得到链表的size，时间复杂度O(n)。然后找到倒数第k个节点，最后\n"},"62.-unique-paths.html":{"url":"62.-unique-paths.html","title":"62. Unique Paths","keywords":"","body":"62. Unique Paths\nproblem description\nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nHow many possible unique paths are there?\nAbove is a 7 x 3 grid. How many possible unique paths are there?\nNote: m and n will be at most 100.\nExample 1:\nInput: m = 3, n = 2\nOutput: 3\nExplanation:\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Right -> Down\n2. Right -> Down -> Right\n3. Down -> Right -> Right\n\nalgorithm thought\n典型的动态规划问题，达到一个点的所有方案，是其上一个点和左边点的方案之和。因为我到这个点可以有两种情况走过来，一种是从上面往下走，一种是从左边往右走。\ncode\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector dp(m,1);\n        for(int i=1;i\nalgorithm analysis\n二维动态规划，遍历一个二维数组。最后时间复杂度O(n²)\n"},"63.-unique-paths-ii.html":{"url":"63.-unique-paths-ii.html","title":"63. Unique Paths II","keywords":"","body":"63. Unique Paths II\nproblem description\nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\n\nAn obstacle and empty space is marked as 1 and 0 respectively in the grid.\nNote: m and n will be at most 100.\nExample 1:\nInput:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\nOutput: 2\nExplanation:\nThere is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n\nalgorithm thought\n这题和上一题唯一的区别就是，这里在机器人的行动路上放了一些障碍。其实和上题做法没什么区别，当当前走到障碍的时候，直接把这个位置的结果赋值0。这样的好处是，既可以代表这里没有一种方案可以走到，也可以在他右边和下面得到总线路时，加上的是0。\ncode\nclass Solution {\npublic:\n    int uniquePathsWithObstacles(vector>& obstacleGrid) {\n        for(int i=0;i\nalgorithm analysis\n相比于上题加入了一些处理，但是时间复杂度还是O(n²)\n"},"64.-minimum-path-sum.html":{"url":"64.-minimum-path-sum.html","title":"64. Minimum Path Sum","keywords":"","body":"64. Minimum Path Sum\nproblem description\nGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\nExample:\nInput:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\nOutput: 7\nExplanation: Because the path 1→3→1→1→1 minimizes the sum.\n\nalgorithm thought\n和上一题没什么不同，动态规划换汤不换药。上一题是路线的数量，这里是找到最小值。\ncode\nclass Solution {\npublic:\n    int minPathSum(vector>& grid) {\n        for(int i=1;i\nalgorithm analysis\n时间复杂度和上两题一样,O(n²)\n"},"67.-add-binary.html":{"url":"67.-add-binary.html","title":"67. Add Binary","keywords":"","body":"67. Add Binary\nproblem description\nGiven two binary strings, return their sum (also a binary string).\nThe input strings are both non-empty and contains only characters 1 or 0.\nExample 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\n\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n\nalgorithm thought\n和十进制加法没什么不同，都是定义一个进位标志位，两数相加再加上标志位。得到的结果就是这一位，改变标志位。最后注意开头的0需要删除\ncode\nclass Solution {\npublic:\n    string addBinary(string a, string b) {\n        int al=a.size(),bl=b.size();\n        string res=string(max(al,bl)+1,'0');\n        if(al=0;i--){\n            count=int(a[i]-'0')+int(b[i]-'0')+c;\n            if(count==1||count==3){\n                res[i+1]='1';\n            }\n            if(count>=2){\n              c=1;  \n            }\n            else\n                c=0;\n            //cout\nalgorithm analysis\n线性处理两个字符串，最后时间复杂度O(n)\n"},"69.-sqrt-x.html":{"url":"69.-sqrt-x.html","title":"69. Sqrt(x)","keywords":"","body":"69. Sqrt(x)\nproblem description\nImplement int sqrt(int x).\nCompute and return the square root of x, where x is guaranteed to be a non-negative integer.\nSince the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.\nExample 1:\nInput: 4\nOutput: 2\n\nExample 2:\nInput: 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since \n             the decimal part is truncated, 2 is returned.\n\nalgorithm thought\n第一次做这个题的时候，我也不是很清楚如何去计算一个数开根号。之后看了discuss了解到可以用二分查找。（感觉很多题都可以用二分查找，在一个大范围中找一个数，然后可以找到排除一半数的条件，条件很难找，需要仔细体会）。我记得我前几周做了一个contest也是用二分查找，当时做出来之后很惊讶。\n回归题目本身，这里我们在0-x中查找是否有满足mid*mid=x的情况\ncode\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x=x/mid)\n                right=mid;\n            else\n                left=mid+1;\n        }\n        return left==x/left?left:left-1;\n    }\n};\n\nalgorithm analysis\n二分查找，每次可以排除一半的数字。时间复杂度O(lgx)\n"},"70.-climbing-stairs.html":{"url":"70.-climbing-stairs.html","title":"70. Climbing Stairs","keywords":"","body":"70. Climbing Stairs\nproblem description\nYou are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nNote: Given n will be a positive integer.\nExample 1:\nInput: 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\nExample 2:\nInput: 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\nalgorithm thought\n说是爬楼梯，其实就是斐波拉契数列。当前值等于前两个的值相加。可以用动态规划解决，用一个一维数组保存所有结果。也可以直接用两个变量保存之前的两个数的值，而不保存所有的结果。\ncode\n//用一个数组保存\nclass Solution {\npublic:\n    int climbStairs(int n) {\n        if(n==1)\n            return 1;\n        vector res(n+1);\n        res[1]=1;res[2]=2;\n        for(int i=3;i\nalgorithm analysis\n利用动态规划来解决斐波拉契数列问题，时间复杂度O(n)，第二种方法相对于第一种方法减少了线性数组的开销，空间复杂度从O(n)减到了O(1)。\n"},"72.-edit-distance.html":{"url":"72.-edit-distance.html","title":"72. Edit Distance","keywords":"","body":"72. Edit Distance\nproblem description\nGiven two words word1 and word2, find the minimum number of operations required to convert word1 to word2.\nYou have the following 3 operations permitted on a word:\n\nInsert a character\nDelete a character\nReplace a character\n\nExample 1:\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\n\nExample 2:\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\n\nalgorithm thought\n字符串处理操作。之前也总结了字符串题目的几种方法。动态规划，字符串匹配的一些算法，字典树等等。如果看到题目找不到思路，没有做过类似的，就使用这几种方法试试。\n这里两个字符串，使用动态规划处理。一个二维数组实现。首先说一下动态规划的状态转移方程如何理解。  要得到匹配horse，ros的最小次数。如果我们知道(horse,ro),(hors,ros),(hors,ro)三个字符串的匹配结果。\n我们只需要判断，如果两个字符串当前index上两个字符相等，则(horse,ros)=(hors,ro)                                         如果两个字符不相等，则(horse,ros)=min((horse,ro),min((hors,ros),(hors,ro)))+1;                                                   其中：(horse,ro)代表增加一个，(hors,ros)代表减少一个，(hors,ro)代表替换操作，我们使用二维数组解决此题。但是这题可以优化到只用一维数组，这里只给出一维数组的解答。\ncode\nclass Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        vector dp(word2.size()+2);\n        for(int i=0;i\nalgorithm analysis\n设word1 size = m,word2 size = n，最后时间复杂度O(m*n)\n"},"73.-set-matrix-zeroes.html":{"url":"73.-set-matrix-zeroes.html","title":"73. Set Matrix Zeroes","keywords":"","body":"73. Set Matrix Zeroes\nproblem description\nGiven a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.\nExample 1:\nInput: \n[\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\nOutput: \n[\n  [1,0,1],\n  [0,0,0],\n  [1,0,1]\n]\n\nExample 2:\nInput: \n[\n  [0,1,2,0],\n  [3,4,5,2],\n  [1,3,1,5]\n]\nOutput: \n[\n  [0,0,0,0],\n  [0,4,5,0],\n  [0,3,1,0]\n]\n\nalgorithm thought\n这个题目不是很难，但是LeetCode限制了我们，希望我们使用O(1)的空间复杂度，然后DO IT IN-PLACE。于是我将第一行和第一列定义为标志位，从2行2列开始遍历，如果为0，将为0的那行和列的第一位设置为0标志位。之后再次遍历一遍第一行和第一列，将有标志位的那一行或者一列置为零\ncode\nclass Solution {\npublic:\n    void setZeroes(vector>& matrix) {\n        if(matrix.size()==0||matrix[0].size()==0)\n            return ;\n        bool row=false,col=false;\n        //判断第一列是否有0\n        for(int i=0;i\nalgorithm analysis\n这类题目，无论你算法多么巧妙，时间复杂度都会是O(n²)，但是这里空间复杂度被限制到了O(1)，有很大提升。\n"},"74.-search-a-2d-matrix.html":{"url":"74.-search-a-2d-matrix.html","title":"74. Search a 2D Matrix","keywords":"","body":"74. Search a 2D Matrix\nproblem description\nWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n\nIntegers in each row are sorted from left to right.\nThe first integer of each row is greater than the last integer of the previous row.\n\nExample 1:\nInput:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\nOutput: true\n\nExample 2:\nInput:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\nOutput: false\n\nalgorithm thought\n第一次做这个题目的时候，我首先在行上做二分查找，然后再找到的列上在来一次二分查找。这样时间复杂度是O(lgn)，也不是很慢。但是其实这个题目就是需要一种二维的二分查找。二分查找的核心是，通过一次比较，能排除一部分数字。\n这题思路是，从左上角或者右下角开始。可以思考一下，为什么从这里出发。然后一步步和target比较，并且逼近target\ncode\nclass Solution {\npublic:\n    bool searchMatrix(vector>& matrix, int target) {\n        if(matrix.size()==0||matrix[0].size()==0)\n            return false;\n        int i=matrix.size()-1;\n        int j=0;\n        while(i>=0&&jtarget)\n                i--;\n            else if(matrix[i][j]\nalgorithm analysis\n这里时间复杂度不一定比两个二分查找更快，二分查找时间复杂度是O(lgn+lgm),这里时间复杂度最坏情况应该是O(m+n)；\n"},"75.-sort-colors.html":{"url":"75.-sort-colors.html","title":"75. Sort Colors","keywords":"","body":"75. Sort Colors\nproblem description\nGiven an array with n objects colored red, white or blue, sort them in-place **so that objects of the same color are adjacent, with the colors in the order red, white and blue.\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\nNote: You are not suppose to use the library's sort function for this problem.\nExample:\nInput: [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\nFollow up:\n\nA rather straight forward solution is a two-pass algorithm using counting sort. First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.\nCould you come up with a one-pass algorithm using only constant space?\n\nalgorithm thought\n典型的计数排序，计数排序时间复杂度是 O(n)，但是适用于数字比较少的情况。这里一共就3个数字，是比较适合的。\n最简单的一种方法是，两次遍历出结果，第一次遍历得到所有数的count，第二次遍历对数组赋值。\n能否一次遍历出结果呢？是可以的，使用两个标志位标志0，1的结尾。遍历数组，如果为0，swap交换到0的末尾，如果为1，swap交换到1的末尾\ncode\nclass Solution {\npublic:\n    void sortColors(vector& nums) {\n        int pos_1=0,pos_2=0;\n        for(int i=0;i\nalgorithm analysis\n一次遍历数组，时间复杂度O(n)\n"},"76.-minimum-window-substring.html":{"url":"76.-minimum-window-substring.html","title":"76. Minimum Window Substring","keywords":"","body":"76. Minimum Window Substring\nproblem description\nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\nExample:\nInput: S = \"ADOBECODEBANC\", T = \"ABC\"\nOutput: \"BANC\"\n\nNote:\n\nIf there is no such window in S that covers all characters in T, return the empty string \"\".\nIf there is such window, you are guaranteed that there will always be only one unique minimum window in S.\n\nalgorithm thought\n滑动窗口问题，做了很多题目之后，碰到最后需要求连续序列满足一种情况的时候，一般都能用滑动窗口，也就是一前一后指针代表窗口。\n这里首先定义一个vector，存储所有字符出现的次数。然后定义一前一后两个指针，后指针走过一个字符的时候，将vector中字符保存的次数减一，如果减一是有效的（能在T字符串中体现），那就将之前保存的size减一(size 初始化是T.size())。如果size为0，就可以将当前状态加入到结果。并且移动头指针，逼近尾指针。\ncode\nclass Solution {\npublic:\n    string minWindow(string s, string t) {\n        vector map(128,0);\n        for(auto c:t)\n            map[c]++;\n        int  begin=0,end=0,head=0,length=INT_MAX;\n        int count=t.size();\n        while(end0) count--;\n            while(count==0){\n                if(length>end-begin) length=end-(head=begin);\n                if(map[s[begin++]]++>=0) count++; \n            }\n        }\n        return length==INT_MAX?\"\":s.substr(head,length);\n    }\n};\n\nalgorithm analysis\n滑动窗口时间复杂度O(n),只需要一次遍历数组，最后产生结果。\n"},"77.-combinations.html":{"url":"77.-combinations.html","title":"77. Combinations","keywords":"","body":"77. Combinations\nproblem description\nGiven two integers n and k, return all possible combinations of k numbers out of 1 ... n.\nExample:\nInput: n = 4, k = 2\nOutput:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n\nalgorithm thought\n组合问题，典型的回溯法例题，使用回溯法解决\ncode\nclass Solution {\npublic:\n    vector> combine(int n, int k) {\n        vector> res;\n        vector tmp;\n        helper(res,tmp,n,k,1);\n        return res;\n    }\n    void helper(vector>& res,vector&tmp,int n,int k,int pos){\n        if(tmp.size()==k){\n            res.push_back(tmp);\n            return;\n        }\n        for(int i=pos;i\nalgorithm analysis\n组合问题需要放置k个值，每个值只能比后面的小，不能重复。时间复杂度不是太好分析，有很多种情况。但是回溯法时间复杂度一般都是O(2^n)\n"},"78.-subsets.html":{"url":"78.-subsets.html","title":"78. Subsets","keywords":"","body":"78. Subsets\nproblem description\nGiven a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]\nOutput:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n\nalgorithm thought\n类似上一题得到组合，只不过这里需要得到所有大小的组合。只需要改变回溯法中，将中间结果push到res的位置，在进入下一个函数的时候就push，而不是在递归基的时候，这样就能到达遍历的效果。\ncode\nclass Solution {\npublic:\n    vector> subsets(vector& nums) {\n        vector> res;\n        vector tmp;\n        res.push_back(tmp);\n        res.push_back(nums);\n        help(res,tmp,nums,0);\n        return res;\n    }\n    void help(vector>& res,vector&tmp,vector& nums,int pos){\n        if(tmp.size()==nums.size()-1)\n            return;\n        for(int i=pos;i\nalgorithm analysis\n时间复杂度是O(2^n),对于每一个数，都能选择是放入或者不放入最后数组\n"},"79.-word-search.html":{"url":"79.-word-search.html","title":"79. Word Search","keywords":"","body":"79. Word Search\nproblem description\nGiven a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\nExample:\nboard =\n[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n\nGiven word = \"ABCCED\", return true.\nGiven word = \"SEE\", return true.\nGiven word = \"ABCB\", return false.\n\nalgorithm thought\n思路很简单，都类似一种暴力搜索法，直接从每个节点都开始搜索，如果是当前节点是对的，就从这个节点的4个方向继续搜索。使用DFS搜索，每一层都有4个分量。唯一需要注意的就是不能搜索到重复的值，也就是我这里搜索完，我去我右边的节点，我右边的节点不能再搜索这个原来的节点了。\n有一种方法就是用标志，显示这里已经被搜索了，每次搜索完之后将当前字符设置为0。那么之后肯的和他匹配不了了。\n还有一种思路利用异或的特性。异或两次回到原值，那么我们经历一个节点之后只需要将这个节点异或一下，之后回来的时候再异或一下，就能恢复。这种好处是可以不用中间变量来保存中间值，但是坏处就是异或之后的值可能会对之后的程序产生影响，我当时就是用这种思路，结果到倒数第二个样例的时候，失败了。最后换了第一种方法\nupdate 2019/10/16 :\n下午上课忽然想通了中午异或的问题，我中午出问题的代码是board[i][j]^=1.大家应该都知道，char是1个字节的，有8位，但是数字1是0000001，所以异或之后只有最后一位会改变。只改变最后一位的话，很容易导致异或之后和其他字符相同。\n所以想通之后，直接将代码改为board[i][j]^=255就稳稳的过了。（255=11111111）\ncode\nclass Solution {\npublic:\n    bool exist(vector>& board, string word) {\n        for(int i=0;i>&board, string&word,int i,int j,int pos){\n        if(pos==word.size())\n            return true;\n\n        if(i=board.size()||j>=board[0].size()||board[i][j]=='\\0'||word[pos]!=board[i][j])\n            return false;\n\n        char t=board[i][j];\n        board[i][j]='\\0';\n        if(\n        help(board,word,i+1,j,pos+1)||\n        help(board,word,i,j+1,pos+1)||\n        help(board,word,i-1,j,pos+1)||\n        help(board,word,i,j-1,pos+1)\n        ){\n            board[i][j]=t;\n            return true;\n        }\n        board[i][j]=t;\n        return false;\n    }\n};\n\n\nclass Solution {\npublic:\n    bool exist(vector>& board, string word) {\n        for(int i=0;i>&board, string&word,int i,int j,int pos){\n        if(pos==word.size())\n            return true;\n\n        if(i=board.size()||j>=board[0].size()||word[pos]!=board[i][j])\n            return false;\n\n        board[i][j]^=255;\n        //board[i][j]='\\0';\n        if(\n        help(board,word,i+1,j,pos+1)||\n        help(board,word,i,j+1,pos+1)||\n        help(board,word,i-1,j,pos+1)||\n        help(board,word,i,j-1,pos+1)\n        ){\n            board[i][j]^=255;\n            return true;\n        }\n        board[i][j]^=255;\n        return false;\n    }\n};\n\nalgorithm analysis\nDFS，每层有4个分量，时间复杂度还是挺高的，但是不好分析。我这里就不分析了\n"},"80.-remove-duplicates-from-sorted-array-ii.html":{"url":"80.-remove-duplicates-from-sorted-array-ii.html","title":"80. Remove Duplicates from Sorted Array II","keywords":"","body":"80. Remove Duplicates from Sorted Array II\nproblem description\nGiven a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nExample 1:\nGiven nums = [1,1,1,2,2,3],\n\nYour function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n\nIt doesn't matter what you leave beyond the returned length.\n\nExample 2:\nGiven nums = [0,0,1,1,1,1,2,3,3],\n\nYour function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.\n\nIt doesn't matter what values are set beyond the returned length.\n\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i \nalgorithm thought\n这题目其实很简单，怎么样都能做得出。只是有些人做的简单有些人做的复杂。首先用for range语句，得到nums所有的数字。然后和nums[pos-2]相比，如果大于的话，那么当前肯定要加，但是如果等于的话，那肯定就是前面已经放置了两个相同的数，就可以不用再写了。\ncode\nclass Solution {\npublic:\n    int removeDuplicates(vector& nums) {\n        int pos=0;\n        for(auto num:nums){\n            if(posnums[pos-2]){\n                nums[pos++]=num;\n            }\n        }\n        return pos;\n    }\n};\n\nalgorithm analysis\n一次遍历出结果，时间复杂度是O(n)\n"},"81.-search-in-rotated-sorted-array-ii.html":{"url":"81.-search-in-rotated-sorted-array-ii.html","title":"81. Search in Rotated Sorted Array II","keywords":"","body":"81. Search in Rotated Sorted Array II\nproblem description\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).\nYou are given a target value to search. If found in the array return true, otherwise return false.\nExample 1:\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n\nExample 2:\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n\nFollow up:\n\nThis is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.\nWould this affect the run-time complexity? How and why?\n\nalgorithm thought\n相比于Search in Rotated Sorted Array，这题在数组中加入了重复的数字，导致会出现一些问题。比如left和right是一样的数，甚至是，left和mid和right都是一样的数，这就不好区分两个区间。首先使用一个循环处理，如果left和right一样，将left++。这样就能去除所有边界一样的情况。除去之后，就和前面没有重复数组是一样的处理情况了\ncode\nclass Solution {\npublic:\n    bool search(vector& nums, int target) {\n        int left=0,right=nums.size()-1;\n        while(leftnums[mid]&&target=nums[left]&&target\nalgorithm analysis\n本来是二分查找的变体，时间复杂度应该是O(lgn)，但是这里有个对left和right的预处理，最坏情况下，时间复杂度会到O(n)。\n"},"82.-remove-duplicates-from-sorted-list-ii.html":{"url":"82.-remove-duplicates-from-sorted-list-ii.html","title":"82. Remove Duplicates from Sorted List II","keywords":"","body":"82. Remove Duplicates from Sorted List II\nproblem description\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\nExample 1:\nInput: 1->2->3->3->4->4->5\nOutput: 1->2->5\n\nExample 2:\nInput: 1->1->1->2->3\nOutput: 2->3\n\nalgorithm thought\n又是链表问题，并且直接返回一个链表。和之前做链表题一样直接用递归的形式解决\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if(head==NULL)\n            return NULL;\n        ListNode* now=head;\n        head=head->next;\n        if(head&&head->val==now->val){\n            while(head&&head->val==now->val)\n                head=head->next;\n            return deleteDuplicates(head);\n        }else{\n            now->next=deleteDuplicates(head);\n            return now;\n        }\n    }\n};\n\nalgorithm analysis\n一次遍历解决，时间复杂度O(n)\n"},"83.-remove-duplicates-from-sorted-list.html":{"url":"83.-remove-duplicates-from-sorted-list.html","title":"83. Remove Duplicates from Sorted List","keywords":"","body":"83. Remove Duplicates from Sorted List\nproblem description\nGiven a sorted linked list, delete all duplicates such that each element appear only once.\nExample 1:\nInput: 1->1->2\nOutput: 1->2\n\nExample 2:\nInput: 1->1->2->3->3\nOutput: 1->2->3\n\nalgorithm thought\n和上一题一样，甚至比上一题简单，使用递归解决\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if(head==NULL||head->next==NULL)\n            return head;\n        ListNode* next=head->next;\n        while(next&&next->val==head->val){\n            next=next->next;\n        }\n        head->next=deleteDuplicates(next);\n        return head;\n    }\n};\n\nalgorithm analysis\n一次遍历解决问题，时间复杂度O(n)\n"},"84.-largest-rectangle-in-histogram.html":{"url":"84.-largest-rectangle-in-histogram.html","title":"84. Largest Rectangle in Histogram","keywords":"","body":"84. Largest Rectangle in Histogram\nproblem description\nGiven n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\nAbove is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].\nThe largest rectangle is shown in the shaded area, which has area = 10 unit.\nExample:\nInput: [2,1,5,6,2,3]\nOutput: 10\n\nalgorithm thought\n一次遍历解决问题，使用栈来辅助解决。对于数组，如果碰到顺序递增，就将当前数字压入栈中，如果当前height小于栈顶值，就将栈顶值弹出，并计算以弹出值为高度的矩形面积大小。这里关键是如何去计算矩形的宽，根据我们之前的算法，可以知道，当前栈顶的值肯定代表的是当前访问过的，剩下的最大值，因为比他更大的值在之前肯定被弹出计算了，那么，可以用当前index减去当前栈顶代表的index，就能表示矩形的宽了。\ncode\nclass Solution {\npublic:\n    int largestRectangleArea(vector& heights) {\n        stack st;\n        heights.push_back(0);\n        int res=0;\n        for(int i=0;i=heights[st.top()]){\n                st.push(i);\n                ++i;\n            }else{\n                int t=st.top();st.pop();\n                if(st.empty()){\n                    //cout\nalgorithm analysis\n使用栈，一次遍历得到结果，时间复杂度O(n)\n"},"85.-maximal-rectangle.html":{"url":"85.-maximal-rectangle.html","title":"85. Maximal Rectangle","keywords":"","body":"85. Maximal Rectangle\nproblem description\nGiven a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\nExample:\nInput:\n[\n  [\"1\",\"0\",\"1\",\"0\",\"0\"],\n  [\"1\",\"0\",\"1\",\"1\",\"1\"],\n  [\"1\",\"1\",\"1\",\"1\",\"1\"],\n  [\"1\",\"0\",\"0\",\"1\",\"0\"]\n]\nOutput: 6\n\nalgorithm thought\n求出矩阵中的最大矩形，可以利用动态规划的思路求解。首先定义一个left数组，保存节点高度可以最左到哪个节点，再定义一个right数组，保存节点高度最右可以到哪个节点。然后还有height数组，保存当前节点的高度。最后我们从以为矩阵开始，慢慢加高维度。起始时，left数组初始化为0，right数组初始化为size-1。然后定义一个curleft和curright，每当当前节点为0的时候，就要改变curleft和currgiht，当节点为1的时候，改变right和left数组。具体行为可以看代码理解。\ncode\nclass Solution {\npublic:\n    int maximalRectangle(vector>& matrix) {\n        if(matrix.size()==0||matrix[0].size()==0)\n            return 0;\n        vector fromleft(matrix[0].size(),0);\n        vector fromright(matrix[0].size(),matrix[0].size());\n        vector height(matrix[0].size(),0);\n\n        int res=0;\n        for(int i=0;i=0;--j){\n                if(matrix[i][j]=='0'){\n                    curright=j-1;\n                    fromright[j]=matrix[0].size()-1;\n                }else{\n                    fromright[j]=min(fromright[j],curright);\n                }\n            }\n            for(int j=0;j\nalgorithm analysis\n有一个大循环，循环中进行3次遍历。相当于对二维数组进行遍历，时间复杂度O(n²)\n"},"86.-partition-list.html":{"url":"86.-partition-list.html","title":"86. Partition List","keywords":"","body":"86. Partition List\nproblem descripiton\nGiven a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.\nExample:\nInput: head = 1->4->3->2->5->2, x = 3\nOutput: 1->2->2->4->3->5\n\nalgorithm thought\n首先初始化两个头，然后将两个partition，分别加到两个头上，最后将两个partition合并\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n        ListNode* tou1=new ListNode(-1);\n        tou1->next=head;\n        ListNode* tou2=new ListNode(-1);\n        ListNode* tou=tou2;\n        head=tou1;\n        while(tou1->next){\n            if(tou1->next->val>=x){\n                tou2->next=tou1->next;\n                tou2=tou2->next;\n                tou1->next=tou1->next->next;\n                tou2->next=NULL;\n            }\n            else\n                tou1=tou1->next;\n        }\n        tou1->next=tou->next;\n        return head->next;\n    }\n};\n\nalgorithm analysis\n算法一次遍历链表，时间复杂度O(n)\n"},"87.-scramble-string.html":{"url":"87.-scramble-string.html","title":"87. Scramble String","keywords":"","body":"87. Scramble String\nproblem description\nGiven a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\nBelow is one possible representation of s1 = \"great\":\n    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n\nTo scramble the string, we may choose any non-leaf node and swap its two children.\nFor example, if we choose the node \"gr\" and swap its two children, it produces a scrambled string \"rgeat\".\n    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n\nWe say that \"rgeat\" is a scrambled string of \"great\".\nSimilarly, if we continue to swap the children of nodes \"eat\" and \"at\", it produces a scrambled string \"rgtae\".\n    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n\nWe say that \"rgtae\" is a scrambled string of \"great\".\nGiven two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.\nExample 1:\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\n\nExample 2:\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false\n\nalgorithm thought\n判断是否Scramble，可以用递归的方式进行。如果一个字符串的左边和另一个字符串的左边是scramble，右边和右边是scramble。或者是，左右，右左是scramble字符串的话。那么这两个字符串就是scramble字符串。可以通过剪枝加快判断，首先判断两个字符串是否包含同样的字符，两个字符串中包含的字符不一样，就可以直接返回。虽然这里用了O(n)的时间，但是能剪去很多分支，是值得的。\ncode\nclass Solution {\npublic:\n    bool isScramble(string s1, string s2) {\n      //  cout\nalgorithm analysis\n每个函数正常情况下都能分出4个分支，每个分支中时间复杂度是线性的。最后时间复杂度不好定义。但是整个运行时间复杂度还是挺高的\n"},"88.-merge-sorted-array.html":{"url":"88.-merge-sorted-array.html","title":"88. Merge Sorted Array","keywords":"","body":"88. Merge Sorted Array\nproblem description\nGiven two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\nNote:\n\nThe number of elements initialized in nums1 and nums2 are m and n respectively.\nYou may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.\n\nExample:\nInput:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\nOutput: [1,2,2,3,5,6]\n\nalgorithm thought\n合并两个有序数组，这也是归并排序中必不可少的一步，如何做好这一步，速度快并且不溢出，还是有点难度的。我们归并排序的时候，一般是将前半部分数组复制，后半部分数组保存。但是这里是将后半部分数组赋值，前半部分保存下来。我们需要尽可能的利用前面保存的数据，能不改变就不改变。所以我们从后往前合并。如果nums2已经用完了，这时候，nums1前面的数据就能直接使用了，而不需要改变。\ncode\nclass Solution {\npublic:\n    void merge(vector& nums1, int m, vector& nums2, int n) {\n        int i=m-1,j=n-1,res=m+n-1;\n        while(j>=0){\n            nums1[res--]= i>=0&&nums1[i]>nums2[j]?nums1[i--]:nums2[j--];\n        }\n    }\n};\n\nalgorithm analysis\n对每个数操作一次，时间复杂度O(m+n)\n"},"90.-subsets-ii.html":{"url":"90.-subsets-ii.html","title":"90. Subsets II","keywords":"","body":"90. Subsets II\nproblem description\nGiven a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: [1,2,2]\nOutput:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n\nalgorithm thought\n得到子集问题，和之前的第一题相比，多了重复数字，在计算子集的时候，需要处理重复情况。这里可以用和第一题类似的回溯法。也可以一次次将新数字push_back到之前得到的结果中，得到新的子集。\ncode\n//类似上一题，直接用回溯法解决问题\nclass Solution {\npublic:\n    vector> subsetsWithDup(vector& nums) {\n        vector> res;\n        vector tmp{};\n        res.push_back(tmp);\n        sort(nums.begin(),nums.end());\n        help(res,tmp,nums,0);\n        return res;\n    }\n    void help(vector>&res,vector&tmp,vector&nums,int pos){\n        if(pos==nums.size())\n            return;\n        for(int i=pos;i> subsetsWithDup(vector& nums) {\n        vector> res={{}};\n        sort(nums.begin(),nums.end());\n        int start=1;\n        res.push_back({nums[0]});\n        for(int i=1;itmp=res[start];\n                tmp.push_back(nums[i]);\n                res.push_back(tmp);\n            }\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n得到所有的子集问题，回溯法时间复杂度O(2^n)。每个数字可以出现一个也可以不出现，每个数字都会进行两次计算，两个分支。最后得到2^n\n"},"91.-decode-ways.html":{"url":"91.-decode-ways.html","title":"91. Decode Ways","keywords":"","body":"91. Decode Ways\nproblem desctiption\nA message containing letters from A-Z is being encoded to numbers using the following mapping:\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n\nGiven a non-empty string containing only digits, determine the total number of ways to decode it.\nExample 1:\nInput: \"12\"\nOutput: 2\nExplanation: It could be decoded as \"AB\" (1 2) or \"L\" (12).\n\nExample 2:\nInput: \"226\"\nOutput: 3\nExplanation: It could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n\nalgorithm thought\n典型的动态规划问题，当前数字如果可以和前面数字组合成为一个合法的字符，当前decode way就可以加上前两次的decode way，如果当前的数字不等于0，就能加上前一个次的decode way。\ncode\nclass Solution {\npublic:\n    int numDecodings(string s) {\n        if(s[0]=='0')\n            return 0;\n        vectorres(s.size()+1);\n        res[0]=1;res[1]=1;\n        for(int i=1;i\nalgorithm analysis\n一次遍历处理数组，时间复杂度O(n),使用一维数组保存结果，空间复杂度O(n)\n"},"92.-reverse-linked-list-ii.html":{"url":"92.-reverse-linked-list-ii.html","title":"92. Reverse Linked List II","keywords":"","body":"92. Reverse Linked List II\nproblem description\nReverse a linked list from position m to n. Do it in one-pass.\nNote: 1 ≤ m ≤ n ≤ length of list.\nExample:\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\nOutput: 1->4->3->2->5->NULL\n\nalgorithm thought\n首先找到待旋转的节点，然后就是一个旋转链表问题了\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int m, int n) {\n        ListNode* newhead=new ListNode(-1);\n        newhead->next=head;\n        ListNode* pre=newhead;\n        while(n--,--m)\n            pre=pre->next;\n        ListNode* tmp=pre->next;\n        while(n--){\n            ListNode* move=tmp->next;\n            tmp->next=move->next;\n            move->next=pre->next;\n            pre->next=move;\n        }\n        return newhead->next;\n    }\n};\n\nalgorithm analysis\n对链表进行一次遍历，转置，循环中操作都是O(1)，最后时间复杂度O(n)\n"},"93.-restore-ip-addresses.html":{"url":"93.-restore-ip-addresses.html","title":"93. Restore IP Addresses","keywords":"","body":"93. Restore IP Addresses\nproblem description\nGiven a string containing only digits, restore it by returning all possible valid IP address combinations.\nExample:\nInput: \"25525511135\"\nOutput: [\"255.255.11.135\", \"255.255.111.35\"]\n\nalgorithm thought\n其实是一道典型的回溯法问题。首先第一个位置放一个字符，然后进如下一个函数，运行完回溯之后，放两个字符。然后是3个。中间判断非法情况，如果长度大于1并且第一个字符是'0',显然不行。如果转化为数字之后，数值大于255，显然也是不行的。如果所有情况都满足，最后将结果push到res中。\n上面介绍的是回溯的情况，其实可以不需要回溯。因为肯定有4个地方需要我们放置数字，我们只需要3个循环，每个循环处理1-3个字符的情况。\ncode\nclass Solution {\npublic:\n    vector restoreIpAddresses(string s) {\n        vector res;\n        for(int a=1;a\nalgorithm analysis\n虽然有4个循环，但是时间复杂度不会很大，因为每个循环就进行3次，循环中的操作时间复杂度可以近似看做O(1)。\n"},"94.-binary-tree-inorder-traversal.html":{"url":"94.-binary-tree-inorder-traversal.html","title":"94. Binary Tree Inorder Traversal","keywords":"","body":"94. Binary Tree Inorder Traversal\nporblem description\nGiven a binary tree, return the inorder traversal of its nodes' values.\nExample:\nInput: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\nOutput: [1,3,2]\n\nFollow up: Recursive solution is trivial, could you do it iteratively?\nalgorithm thought\n二叉树的中序遍历问题。这种问题用递归的方法是很简单的。但是还是要知道迭代的写法。毕竟如果节点很多的话，那么多递归函数，栈开销会很大。\n递归写法很简单，按顺序访问就行，对于迭代写法，我们首先要明白我们访问的顺序，先左，后中再右。我们使用一个栈保存中间节点，没碰到一个root节点，顺序将左子树一直push进栈，到叶子节点的时候，弹出顶上的节点，这时候就能访问了，然后对于这个节点的右子树，把它当做一个root，继续运行一遍\n然后去看了一下discuss，真的是发现每次看都会发现很意想不到的算法。比如中序遍历，这里就可以用morris traversal，只需要O(1)的空间，时间复杂度还是控制在O(n)。极大的减少了空间。这里主要是利用了叶子节点大量的空指针。前面问题使用栈来辅助解决，是因为访问到后续节点的时候，不能够再回到根节点，这里用叶子节点的指针，指向后继节点，方便回到前面。\n步骤是：\n\n如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。\n\n如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。\na) 如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。\nb) 如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。\n\n重复以上1、2直到当前节点为空。\n\n\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n//递归写法\nclass Solution {\npublic:\n    vector res; \n    void inorder(TreeNode* root)\n    {\n        if(root==NULL)\n            return;\n        inorder(root->left);\n        res.push_back(root->val);\n        inorder(root->right);\n    }\n    vector inorderTraversal(TreeNode* root) {\n        inorder(root);\n        return res;\n    }\n};\n\n\n//迭代写法\nclass Solution {\npublic:\n    vector inorderTraversal(TreeNode* root) {\n        vector res;\n        stack st;\n        while(root||!st.empty()){\n            while(root){\n                st.push(root);\n                root=root->left;\n            }\n            root=st.top();\n            st.pop();\n            res.push_back(root->val);\n            root=root->right;\n        }\n        return res;\n    }\n};\n\n//morris \nlass Solution {\npublic:\n    vector inorderTraversal(TreeNode* root) {\n        vector res;       \n        TreeNode* prev=NULL;\n        while(root){\n            if(root->left==NULL){\n                res.push_back(root->val);\n                root=root->right;\n            }else{\n                prev=root->left;\n                while(prev->right&&prev->right!=root){\n                    prev=prev->right;\n                }\n                if(prev->right==NULL){\n                    prev->right=root;\n                    root=root->left;\n                }else{\n                    root=prev->right;\n                    prev->right=NULL;\n                    res.push_back(root->val);\n                    root=root->right;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nalgorigthm thought\n通过分析和LeetCode最后的结果来说，上面3中方法从上到下应该是越来越好的。迭代对于递归来说，减少了函数栈开销，最后空间用的少一点。Morris对于上面两中来说，只用了O(1)的空间复杂度，最后空间是用的最少的。\n"},"95.-unique-binary-search-trees-ii.html":{"url":"95.-unique-binary-search-trees-ii.html","title":"95. Unique Binary Search Trees II","keywords":"","body":"95. Unique Binary Search Trees II\nproblem description\nGiven an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.\nExample:\nInput: 3\nOutput:\n[\n  [1,null,3,2],\n  [3,2,null,1],\n  [3,1,null,null,2],\n  [2,1,3],\n  [1,null,2,null,3]\n]\nExplanation:\nThe above output corresponds to the 5 unique BST's shown below:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\nalgorithm thought\n对于一个二叉树来说，最好使用递归解决问题。这里返回值是一系列的二叉树。对于一个range，我们可以首先定好一个中间节点当做二叉树的根节点，然后比这个值小的当做左子树，大的当右子树。这里我们就可以将代码简化很多了。但是单就这样做还是不行，会有大量的重复计算，比如1-10生成BST。首先利用5当中间节点的时候，1-4要当左子树，然后用6当中间节点的时候，还是会碰到1-4当左子树的情况。我们可以用动态规划的方法来避免重复计算。\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    map> ma;\n    vector generateTrees(int n) {\n        if(n==0)\n            return {};\n        return genera(1,n,n);\n    }\n    vector genera(int start,int end,int size){\n        if(ma.find(start*size+end)!=ma.end()){\n            return ma[start*size+end];\n        }\n        vector res;\n        if(start>end){\n            return {NULL};\n            //res.push_back(NULL);\n        }\n\n        for(int i=start;i left=genera(start,i-1,size);\n            vector right=genera(i+1,end,size);\n\n            for(TreeNode* le:left){\n                for(TreeNode* ri:right){\n                    TreeNode* root=new TreeNode(i);\n                    root->left=le;\n                    root->right=ri;\n                    res.push_back(root);\n                }\n            }\n        }\n        ma[start*size+end]=res;\n        return res;\n    }\n};\n\nalgorithm analysis\n这里是一种递归方法，时间复杂度还不会分析。使用动态规划解决之后时间还是不会太慢的\n"},"96.-unique-binary-search-trees.html":{"url":"96.-unique-binary-search-trees.html","title":"96. Unique Binary Search Trees","keywords":"","body":"96. Unique Binary Search Trees\nproblem description\nGiven n, how many structurally unique BST's (binary search trees) that store values 1 ... n?\nExample:\nInput: 3\nOutput: 5\nExplanation:\nGiven n = 3, there are a total of 5 unique BST's:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\nalgorithm thought\n和上题一个类型，简化了一点。上一题需要输出所有的结果，这里不需要结果，只需要数字。对于上一题，我们保存一棵树开始和结束的位置。来映射他的结果，但是这里不需要，因为只要树的size固定好，能生成的所有的tree的数量也就出来了。这里使用一个数组保存结果\ncode\nclass Solution {\npublic:\n    int numTrees(int n) {\n        vector dp(n+1,0);\n        dp[0]=1;\n        dp[1]=1;\n        int left,right;\n        for(int i=2;i\nalgorithm analysis\n算法中有两个循环，执行n²次，每次执行时间复杂度O(n)，最后时间复杂度O(n²)\n"},"97.-interleaving-string.html":{"url":"97.-interleaving-string.html","title":"97. Interleaving String","keywords":"","body":"97. Interleaving String\nproblem description\nGiven s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.\nExample 1:\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\n\nExample 2:\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\n\nalgorithm thought\n字符串问题，这题其实和最长公共子串问题很像，使用二维数组保存结果，动态规划解决问题。\n状态转移方程得出：对于aabcc和dbbca匹配aadbbcbcac问题。我们只需要找到  c==c?以及aabc和dbbca是否匹配aadbbcbca，或者是a==c?以及aabcc和dbbc是否匹配aadbbcbca。上面两中情况任何一种成立，这里的匹配都可以算成功。所以这里动态规划保存之前的结果，这次匹配使用前面的结果解决问题。\ncode\nclass Solution {\npublic:\n    bool isInterleave(string s1, string s2, string s3) {\n        if(s1.size()+s2.size()!=s3.size())\n            return false;\n        vector> pos(s1.size()+1,vector (s2.size()+1,false));\n        pos[0][0]=1;\n        for(int i=1;i\nalgorithm analysis\n设是s1长m，s2长n，会遍历一个m*n的二维数组,最后时间复杂度O(m*n)\n"},"98.-validate-binary-search-tree.html":{"url":"98.-validate-binary-search-tree.html","title":"98. Validate Binary Search Tree","keywords":"","body":"98. Validate Binary Search Tree\nproblem description\nGiven a binary tree, determine if it is a valid binary search tree (BST).\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\nExample 1:\n    2\n   / \\\n  1   3\n\nInput: [2,1,3]\nOutput: true\n\nExample 2:\n    5\n   / \\\n  1   4\n     / \\\n    3   6\n\nInput: [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n\nalgorithm thought\n得到合法的BST，BST有个性质就是中序遍历结果是一个有序数组。所以我们直接中序遍历，每次保存前一个值，如果前一个值大于等于当前遍历的值，那么就不是一个合法的BST，否则就是合法的BST\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        stack todo;\n        long pre=-2147483649;\n        while(root||!todo.empty()){\n            while(root){\n                todo.push(root);\n                root=root->left;\n            }\n            root=todo.top();todo.pop();\n            if(root->valval;\n            root=root->right;\n        }\n        return true;\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n),遍历的时间，空间复杂度O(n)，使用一个栈保存数据。其实可以用之前的Morris tarversal但是LeetCode可能是有bug，代码是正确的但是最后得不到合理的结果。\n"},"99.-recover-binary-search-tree.html":{"url":"99.-recover-binary-search-tree.html","title":"99. Recover Binary Search Tree","keywords":"","body":"99. Recover Binary Search Tree\nproblem description\nTwo elements of a binary search tree (BST) are swapped by mistake.\nRecover the tree without changing its structure.\nExample 1:\nInput: [1,3,null,null,2]\n\n   1\n  /\n 3\n  \\\n   2\n\nOutput: [3,1,null,null,2]\n\n   3\n  /\n 1\n  \\\n   2\n\nExample 2:\nInput: [3,1,4,null,null,2]\n\n  3\n / \\\n1   4\n   /\n  2\n\nOutput: [2,1,4,null,null,3]\n\n  2\n / \\\n1   4\n   /\n  3\n\nFollow up:\n\nA solution using O(n) space is pretty straight forward.\nCould you devise a constant space solution?\n\nalgorithm thought\n已知BST中有两个数字是错的，那么我们就找到两个错的位置就行。还是中序遍历，找到不是顺序增长的两个位置。记录下来，最后交换两个的值\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* first=NULL;\n    TreeNode* second=NULL;\n    int count=0;\n    TreeNode* pre=new TreeNode(INT_MIN);\n    void recoverTree(TreeNode* root) {\n        bool bo=false;\n        travers(root);\n        int tmp=first->val;\n        first->val=second->val;\n        second->val=tmp;\n    }\n    void travers(TreeNode* root){\n        if(count==2||root==NULL)\n            return;\n        travers(root->left);\n\n        if(first==NULL&&pre->val>root->val){\n            first=pre;\n        }\n\n        if(first!=NULL&&pre->val>root->val){\n            second=root;\n            count++;\n        }\n        pre=root;\n        travers(root->right);\n    }\n};\n\n//利用bst的中序遍历性质来解决问题\n\nalgorithm analysis\n一次遍历，时间复杂度O(n)\n"},"100.-same-tree.html":{"url":"100.-same-tree.html","title":"100. Same Tree","keywords":"","body":"100. Same Tree\nproblem description\nGiven two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\nExample 1:\nInput:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\n\nExample 2:\nInput:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\n\nExample 3:\nInput:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n\nalgorithm thought\n树问题，递归解决，首先判断当前节点问题，然后对左右子树分别进行同样的计算。\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if(p==NULL&&q==NULL)\n            return true;\n        if(p&&q&&(p->val==q->val)){\n            return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);\n        }\n        return false;\n    }\n};\n\nalgorithm analysis\n相当于对树进行了一次遍历，时间复杂度O(n)\n"},"101.-symmetric-tree.html":{"url":"101.-symmetric-tree.html","title":"101. Symmetric Tree","keywords":"","body":"101. Symmetric Tree\nproblem description\nGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\nBut the following [1,2,2,null,3,null,3] is not:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\nNote:Bonus points if you could solve it both recursively and iteratively.\nalgorithm thought\n本质是树的层次遍历，判断每一层是否是对称的。层次遍历需要用到队列来辅助解决。得到每一层所有的值。最后遍历判断是否对称。但是对于这题，还有个技巧。对于左右子树，采取不同的策略。对于左子树，每次访问完之后，先push左及节点再push右节点。右子树，先push右再左。这样，每次从队列中拿两个节点出来，这两个节点就刚好都是对称节点。我们判断它们是否一样就行，然后继续运行。\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        TreeNode *left,*right;\n        if(root==NULL)\n            return true;\n        queue qu;\n        qu.push(root->left);\n        qu.push(root->right);\n        while(!qu.empty()){\n            left=qu.front();\n            qu.pop();\n            right=qu.front();\n            qu.pop();\n            if(left==NULL&&right==NULL)\n                continue;\n            if(left==NULL||right==NULL)\n                return false;\n            if(left->val!=right->val)\n                return false;\n            qu.push(left->left);\n            qu.push(right->right);\n            qu.push(left->right);\n            qu.push(right->left);\n        }\n        return true;\n    }\n};\n\nalgorithm analysis\n时间复杂度就是O(n),遍历一遍树。\n"},"102.-binary-tree-level-order-traversal.html":{"url":"102.-binary-tree-level-order-traversal.html","title":"102. Binary Tree Level Order Traversal","keywords":"","body":"102. Binary Tree Level Order Traversal\nproblem description\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\nFor example:Given binary tree [3,9,20,null,null,15,7],  \n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nreturn its level order traversal as:  \n[\n  [3],\n  [9,20],\n  [15,7]\n]\n\nalgorithm thought\n二叉树层次遍历，使用queue辅助解决，必须掌握的题目\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector> levelOrder(TreeNode* root) {\n        vector> res;\n        TreeNode* pos=new TreeNode(-100);\n        vector tmp;\n        queue q;\n        q.push(root);\n        q.push(pos);\n        while(!q.empty()){\n            TreeNode* tq=q.front();\n            q.pop();\n            if(tq==NULL){\n                continue;   \n            }\n            else if(tq==pos){\n                if(q.empty())\n                    break;\n                res.push_back(tmp);\n                tmp.clear();\n                q.push(pos);\n            }\n            else{\n                q.push(tq->left);\n                q.push(tq->right);\n                tmp.push_back(tq->val);\n            }\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n遍历一棵树，时间复杂度O(n)\n"},"103.-binary-tree-zigzag-level-order-traversal.html":{"url":"103.-binary-tree-zigzag-level-order-traversal.html","title":"103. Binary Tree Zigzag Level Order Traversal","keywords":"","body":"103. Binary Tree Zigzag Level Order Traversal\nproblem description\nGiven a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).\nFor example:Given binary tree [3,9,20,null,null,15,7],  \n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nreturn its zigzag level order traversal as:  \n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\nalgorithm thought\nzigzag层次遍历，分析之后得知，可以用两个栈来辅助遍历。参差遍历本来是用一个队列就行。但是这个用两个栈，然后定义一个bool变量指定现在是左到右还是右到左，分别用一个栈辅助遍历。最后处理方式和层次遍历一样\n使用两个栈的方法肯定还有优化的地方，去看了discuss之后，发现可以直接使用一个队列来做。最后遍历的结果需保存在一个vector中，我们默认只能push_back但是其实可以先定义好vector，最后看情况从左右分别将结果放置进去。\ncode\n//use two stack \n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector> zigzagLevelOrder(TreeNode* root) {\n        stack q1,q2;\n        vector> res;\n        if(root==NULL)\n            return res;\n        bool bo=true;\n        q1.push(root);\n        while(true){\n            if(bo){\n                vector ve;\n                while(!q1.empty()){\n                    TreeNode* tmp=q1.top();\n                    q1.pop();\n                    if(tmp==NULL)\n                        break;\n                    ve.push_back(tmp->val);\n                    if(tmp->left)\n                        q2.push(tmp->left);\n                    if(tmp->right)\n                        q2.push(tmp->right);\n                }\n                res.push_back(ve);\n                bo=false;\n                if(q2.empty())\n                    break;\n            }\n            else{\n                vector ve;\n                while(!q2.empty()){\n                    TreeNode* tmp=q2.top();\n                    q2.pop();\n                    if(tmp==NULL)\n                        break;\n                    ve.push_back(tmp->val);\n                    if(tmp->right)\n                        q1.push(tmp->right);\n                    if(tmp->left)\n                        q1.push(tmp->left);\n                }\n                res.push_back(ve);\n                bo=true;\n                if(q1.empty())\n                    break;\n            } \n        }\n        return res;\n    }\n};\n\n\n//use one queue\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector> zigzagLevelOrder(TreeNode* root) {\n        queue q;\n        vector> res;\n        if(root==NULL)\n            return res;\n        bool leftToRight=true;\n        TreeNode* tmp = new TreeNode(-1);\n        q.push(root);q.push(tmp);\n        vector ve(1);\n        int i=0;\n        while(true){\n            TreeNode* t=q.front();\n            q.pop();\n            if(t==tmp){\n                res.push_back(ve);\n                ve.clear();\n                ve.resize(q.size());\n                if(q.empty())\n                    break;\n                q.push(tmp);\n                leftToRight=!leftToRight;\n                i=0;\n                continue;\n            }\n            if(t->left)\n                q.push(t->left);\n            if(t->right)\n                q.push(t->right);\n            if(leftToRight){\n                ve[i]=t->val;\n            }else{\n                ve[ve.size()-i-1]=t->val;\n            }\n            i++;\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n遍历问题时间复杂度还是一样的，都是O(n)\n"},"104.-maximum-depth-of-binary-tree.html":{"url":"104.-maximum-depth-of-binary-tree.html","title":"104. Maximum Depth of Binary Tree","keywords":"","body":"104. Maximum Depth of Binary Tree\nproblem description\nGiven a binary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nNote: A leaf is a node with no children.\nExample:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nreturn its depth = 3.\nalgorithm thought\n典型的递归解决二叉树问题\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        return max(maxDepth(root->left),maxDepth(root->right))+1;\n    }\n};\n\nalgorithm analysis\n类似遍历问题，时间复杂度O(n)\n"},"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html":{"url":"105.-construct-binary-tree-from-preorder-and-inorder-traversal.html","title":"105. Construct Binary Tree from Preorder and Inorder Traversal","keywords":"","body":"105. Construct Binary Tree from Preorder and Inorder Traversal\nproblem description\nGiven preorder and inorder traversal of a tree, construct the binary tree.\nNote:You may assume that duplicates do not exist in the tree.\nFor example, given\npreorder = [3,9,20,15,7]\ninorder = [9,3,15,20,7]\n\nReturn the following binary tree:\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nalgorithm thought\n前序遍历和中序遍历转二叉树，首先利用前序遍历第一个值就是当前根节点的性质。找到根节点，只有去中序遍历中找到根节点对应的位置，位置左边就是左子树右边是右子树。然后对于左右子树，得到他们的大小，去前序遍历中找到他们对应的位置。然后对于左右子树，递归解决。\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector& preorder, vector& inorder) {\n        return build(preorder,inorder,0,preorder.size(),0,inorder.size());\n    }\n    TreeNode* build(vector& preorder, vector& inorder,int prelow,int prehigh,int inlow,int inhigh){\n        if(prelow==prehigh)\n            return NULL; \n        TreeNode* root=new TreeNode(preorder[prelow]);\n        int inroot;\n        for(int i=inlow;ileft=build(preorder,inorder,prelow+1,prelow+1+leftsize,inlow,inroot);\n        root->right=build(preorder,inorder,prelow+1+leftsize,prehigh,inroot+1,inhigh);\n        return root;\n    }\n};\n\nalgorithm analysis\n每次在中序遍历中找到根节点的位置，一般情况下需要O(n)时间。那总时间可以表达为T(n)=2T(n/2)+O(n)，这个表达式用主定理分析可知为T(n)=O(nlgn)\n"},"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html":{"url":"106.-construct-binary-tree-from-inorder-and-postorder-traversal.html","title":"106. Construct Binary Tree from Inorder and Postorder Traversal","keywords":"","body":"106. Construct Binary Tree from Inorder and Postorder Traversal\n后序遍历和中序遍历得到二叉树本质和上一题没区别。只是后序遍历的根节点出现在最后面。将前一题的算法修改下即可\n"},"107.-binary-tree-level-order-traversal-ii.html":{"url":"107.-binary-tree-level-order-traversal-ii.html","title":"107. Binary Tree Level Order Traversal II","keywords":"","body":"107. Binary Tree Level Order Traversal II\n和之前层次遍历一样，最后得到结果的时候reverse一下\n"},"108.-convert-sorted-array-to-binary-search-tree.html":{"url":"108.-convert-sorted-array-to-binary-search-tree.html","title":"108. Convert Sorted Array to Binary Search Tree","keywords":"","body":"108. Convert Sorted Array to Binary Search Tree\nproblem description\nGiven an array where elements are sorted in ascending order, convert it to a height balanced BST. For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\nExample:\nGiven the sorted array: [-10,-3,0,5,9],\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n\nalgorithm thought\n这里需要生成一个平衡BST。平衡BST有很多种表示方法，但是我们只需要生成一种就行，那当然是生成最简单的bst。每次到一个节点时，找到中点，将一个有序数组对分。直到叶节点。这样就能保证最后得到的是平衡二叉树\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector& nums) {\n        return build(nums,0,nums.size());\n    }\n    TreeNode* build(vector& nums,int low,int high){\n        if(high==low)\n            return NULL;\n        int mid=low+((high-low)>>1);\n        //coutleft=build(nums,low,mid);\n        root->right=build(nums,mid+1,high);\n        return root;\n    }\n};\n\nalgorithm analysis\n时间复杂度应该是O(n)遍历到所有节点，最后生成一个树\n"},"110.-balanced-binary-tree.html":{"url":"110.-balanced-binary-tree.html","title":"110. Balanced Binary Tree","keywords":"","body":"110. Balanced Binary Tree\nproblem description\nGiven a binary tree, determine if it is height-balanced.\nFor this problem, a height-balanced binary tree is defined as:\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.\nExample 1:\nGiven the following tree [3,9,20,null,null,15,7]:\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nReturn true.\nExample 2:\nGiven the following tree [1,2,2,3,3,null,null,4,4]:\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n\nReturn false.\nalgorithm thought\n二叉树问题，判断是否不是平衡二叉树。平衡二叉树定义是左右子树高度差要小于等于1.于是这题变成了类似求二叉树高度的问题。之前也做过二叉树高度问题，直接递归解决。这里只需要在求出高度之后加入一个判断。如果不是平衡的如何处理。求高度的函数，返回值必须是int而不是bool，这就是我们面临的问题。一种解决方案是把求高度的照搬过来，加一个全局变量，如果不平衡，全局变量为false。我们这里用另一种方法，如果不平衡，返回INT_MAX.由于题目中不存在这么大的二叉树，所以INT_MAX和任何子树组合都是不平衡的，最后INT_MAX会传递到调用函数，最后判断是否为INT_MAX来觉得返回true还是false\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n        if(isBalan(root)==INT_MAX)\n            return false;\n        return true;\n    }\n    int isBalan(TreeNode* root){\n        if(root==NULL)\n            return 0;\n        int lefth=isBalan(root->left);\n        int righth=isBalan(root->right);        \n        if(lefth==INT_MAX||righth==INT_MAX||abs(lefth-righth)>1)\n            return INT_MAX;        \n        return max(lefth,righth)+1;\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n),就是遍历问题，遍历所有节点之后会得到结果\n"},"111.-minimum-depth-of-binary-tree.html":{"url":"111.-minimum-depth-of-binary-tree.html","title":"111. Minimum Depth of Binary Tree","keywords":"","body":"111. Minimum Depth of Binary Tree\nproblem description\nGiven a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote: A leaf is a node with no children.\nExample:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nreturn its minimum depth = 2.\nalgorithm thought\n得到最浅的叶子节点的深度，直接用广度优先搜索即可，广度优先搜索有找的极值的性质\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        queue qu;\n        qu.push(root);\n        TreeNode* pos=new TreeNode(-1);\n        qu.push(pos);\n        int res=1;\n        while(!qu.empty()){\n            TreeNode* fr=qu.front();\n            qu.pop();\n            if(fr==NULL)\n                continue;\n            if(fr==pos){\n                qu.push(pos);\n                res++;\n                continue;\n            }\n            if(isleaf(fr))\n                return res;\n            qu.push(fr->left);\n            qu.push(fr->right);\n        }\n        return res;\n    }\n    bool isleaf(TreeNode* root){\n        return (root->right==NULL)&&(root->left==NULL);\n    }\n};\n\nalgorithm analysis\n如果用深度优先搜索做这个题目，最后时间复杂度会是O(n)，因为会遍历所有节点，最后得到最浅的叶子节点。但是用广度优先搜索，只要找到第一个叶子节点就会返回，所以时间复杂度是降低很多的，不过应该也是O(n)\n"},"112.-path-sum.html":{"url":"112.-path-sum.html","title":"112. Path Sum","keywords":"","body":"112. Path Sum\nproblem description\nGiven a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\nNote: A leaf is a node with no children.\nExample:\nGiven the below binary tree and sum = 22,\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\      \\\n7    2      1\n\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.\nalgorithm thought\n直接递归解决，每次进入子节点的时候，将sum值减去当前节点的值，最后判断如果是叶子节点并且当前值为0，就返回true，否则返回false\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int sum) {\n        if(root==NULL)\n            return false;\n        sum-=root->val;\n        if(root->left==NULL&&root->right==NULL){\n            if(sum)\n                return false;\n            return true;\n        }\n        return hasPathSum(root->left,sum)||hasPathSum(root->right,sum);\n    }\n};\n\nalgorithm analysis\n遍历问题，时间复杂度O(n)\n"},"113.-path-sum-ii.html":{"url":"113.-path-sum-ii.html","title":"113. Path Sum II","keywords":"","body":"113. Path Sum II\nproblem descripition\nGiven a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\nNote: A leaf is a node with no children.\nExample:\nGiven the below binary tree and sum = 22,\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\    / \\\n7    2  5   1\n\nReturn:\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n\nalgorithm thought\n和之前的path sum一个意思，只是这里需要得到路径上的所有值。这就只能使用回溯法解决问题了。\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector> pathSum(TreeNode* root, int sum) {\n        vector> res;\n        vector tmp;\n        helper(res,tmp,sum,root);\n        return res;\n    }\n    void helper(vector>& res,vector&tmp,int sum,TreeNode* root){\n        if(root==NULL){\n            return;\n        }\n        if(root->left==NULL&&root->right==NULL){\n            if(sum==root->val){\n                tmp.push_back(root->val);\n                res.push_back(tmp);\n                tmp.pop_back();\n            }\n            return;\n        }\n        tmp.push_back(root->val);\n        helper(res,tmp,sum-root->val,root->left);\n        helper(res,tmp,sum-root->val,root->right);\n        tmp.pop_back();\n        return;\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n),对于每个节点都只访问一次。\n"},"114.-flatten-binary-tree-to-linked-list.html":{"url":"114.-flatten-binary-tree-to-linked-list.html","title":"114. Flatten Binary Tree to Linked List","keywords":"","body":"114. Flatten Binary Tree to Linked List\nproblem description\nGiven a binary tree, flatten it to a linked list in-place.\nFor example, given the following tree:\n    1\n   / \\\n  2   5\n / \\   \\\n3   4   6\n\nThe flattened tree should look like:\n1\n \\\n  2\n   \\\n    3\n     \\\n      4\n       \\\n        5\n         \\\n          6\n\nalgorithm thought\n观察知道，最后所有节点全部在右边展平，我们可以每次将左子树插入到右子树，原来的右子树接在左子树最后面，重复这个操作，直到所有的右子树都展平即可\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        while(root){\n            if(root->left){\n                TreeNode* ma=findmax(root->left);\n                ma->right=root->right;\n                root->right=root->left;\n                root->left=NULL;\n            }\n            root=root->right;\n        }\n    }\n    TreeNode* findmax(TreeNode* root){\n        if(root)\n        while(root->right){\n            root=root->right;\n        }\n        return root;\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n),对于所有节点，最多访问节点两次，访问总次数是2n，所以最后时间复杂度O(n)\n"},"115.-distinct-subsequences.html":{"url":"115.-distinct-subsequences.html","title":"115. Distinct Subsequences.md","keywords":"","body":"115. Distinct Subsequences.md\nproblem description\nGiven a string S and a string T, count the number of distinct subsequences of S which equals T.\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\nExample 1:\nInput: S = \"rabbbit\", T = \"rabbit\" Output: 3 Explanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n\nExample 2:\nInput: S = \"babgbag\", T = \"bag\" Output: 5 Explanation:\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n\nalgorithm thought\n做多了题目之后会有感觉，这题用动态规划解决没问题。首先就用动态规划问题想。如果两个字符串已经匹配完毕，S串加入一个新字符，如果这个字符和T串最后一个字符不匹配。没有事情发生，总匹配数依然是没加入之前的结果。如果匹配，就是之前的S串和去掉最后一个字符的T串匹配的结果加上之前匹配结果。\nS = rabb \nT = rabb\n\nnow the result is 1\n\nat this time , add a 'b' after S\n\n'b' is equal to T.back(),so that res of (rabbb,rabb) is (rabb,rab) + (rabb,rabb).\n\nres is three\n\ncode\n//this is a origin version\nclass Solution {\npublic:\n    int numDistinct(string s, string t) {\n        vector> dp(s.size()+1,vector(t.size()+1));\n        for(int i=0;i dp (t.size()+1,0);\n        dp[0]=1;\n        for(int i=1;i0;--j)\n                if(s[i-1]==t[j-1])\n                    dp[j]+=dp[j-1];\n        return dp[t.size()];\n    }\n};\n\nalgorithm analysis\n原始版本是二维数组版本，遍历二维数组即可，时间复杂度O(n²)。优化后的版本使用一维数组，空间复杂度降到了O(n),不仅如此，其时间也会降低\n"},"118.-pascals-triangle.html":{"url":"118.-pascals-triangle.html","title":"118. Pascal's Triangle","keywords":"","body":"118. Pascal's Triangle\nproblem description\nGiven a non-negative integer numRows, generate the first numRows of Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.\nExample:\nInput: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\nalgorithm thought\n其实和之前动态规划问题得到数组中的值有的像，此位置的值等于上两个位置的值相加。可以用二维数组解决，但是这里是可以优化到只用一维数组。每次重复使用即可。\ncode\nclass Solution {\npublic:\n    vector> generate(int numRows) {\n        vector> res;\n        if(numRows==0)\n            return res;\n        vector tmp(1,1);\n        res.push_back(tmp);\n        while(--numRows){\n            tmp.push_back(1);\n            for(int i=tmp.size()-2;i>=1;--i){\n                tmp[i]+=tmp[i-1];\n            }\n            res.push_back(tmp);\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n帕斯卡三角形，三角形面积是O(n²)的，每个点都要计算，最后时间复杂度O(n²)\n"},"120.-triangle.html":{"url":"120.-triangle.html","title":"120. Triangle","keywords":"","body":"120. Triangle\nproblem description\nGiven a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\nFor example, given the following triangle\n[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n\nThe minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).\nNote:\nBonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.\nalgorithm thought\n典型的动态规划问题，从底部出发向上遍历。每次选择两个子节点中最小的那一个，并且将它加到自己当前值上。重复操作，知道到根节点。\ncode\nclass Solution {\npublic:\n    int minimumTotal(vector>& triangle) {\n        for(int i=triangle.size()-2;i>=0;--i){\n            for(int j=0;j\nalgorithm analysis\n复杂度时间和之前求三角形问题一样，都是O(n²)\n"},"121.-Best-Time-to-Buy-and-Sell-Stock.html":{"url":"121.-Best-Time-to-Buy-and-Sell-Stock.html","title":"121. Best Time to Buy and Sell Stock","keywords":"","body":"121. Best Time to Buy and Sell Stock\nproblem description\nSay you have an array for which the ith element is the price of a given stock on day i.\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\nNote that you cannot sell a stock before you buy one.\nExample 1:\nInput: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n\nExample 2:\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\nalgorithm thought\n只能买一次商品，一次交易。那么我们从第一天开始买商品，第一天必须买，因为只有一次机会。到了第二天的时候，如果第二天比第一天贵，我们就得到利润。如果第二天比第一天便宜，那我们就第二天再买。这里转化成代码的意思就是，我们遍历数组的过程，每次都记录最小值，当做我们购买的价格，每次都用当前值减去最小值，就是我们的利润。\ncode\nclass Solution {\npublic:\n    int maxProfit(vector& prices) {\n        int res=0;\n        int miprice=INT_MAX;\n        for(auto price:prices){\n            miprice=min(miprice,price);\n            res=max(res,price-miprice);\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n一次遍历就可以得到答案，时间复杂度O(n)\n"},"122.-Best-Time-to-Buy-and-Sell-Stock-II.html":{"url":"122.-Best-Time-to-Buy-and-Sell-Stock-II.html","title":"122. Best Time to Buy and Sell Stock II","keywords":"","body":"122. Best Time to Buy and Sell Stock II\nproblem description\nSay you have an array for which the ith element is the price of a given stock on day i.\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\nNote: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).\nExample 1:\nInput: [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n\nExample 2:\nInput: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n\nExample 3:\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\nalgorithm thought\n可以借助之前只能买一次的思想，只是这里是能买很多次。只要有利润，我们都加上。\n首先对于下一天价格比今天低的情况，这时候我们肯定要下一天买而不是这一天高价买。也就是把买进的价格改成下一天的。\n如果下一天的价格比今天高，我们直接把利润加上。但是如果之后价格持续走高，我们先不加利润，一直往后看，直到最高的价格，我们用最高的价格减去最低的价格，这是利润增益。\n分析可以知道，价格走向只有上面两种，要不是一直递增，要不就是下降。这样就可以归纳成一般情况，写出代码.注意写成一般情况下时，要注意最后的状态，这里最后push一个INT_MIN，就能处理所有情况\ncode\nclass Solution {\npublic:\n    int maxProfit(vector& prices) {\n        int res=0;\n        prices.push_back(INT_MIN);\n        int base_index;\n        for(int i=0;i\nalgorithm analysis\n也是一次遍历数组，时间复杂度O(n)\n"},"123.-Best-Time-to-Buy-and-Sell-Stock-III.html":{"url":"123.-Best-Time-to-Buy-and-Sell-Stock-III.html","title":"123. Best Time to Buy and Sell Stock III","keywords":"","body":"123. Best Time to Buy and Sell Stock III\nproblem description\nSay you have an array for which the ith element is the price of a given stock on day i.\nDesign an algorithm to find the maximum profit. You may complete at most two transactions.\nNote: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).\nExample 1:\nInput: [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n\nExample 2:\nInput: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n\nExample 3:\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\nalgorithm thought\n首先知道这里是最多允许买两次，意思是如果一次可以，那就买一个。就像example 2展示的那样，一次交易即可。那么我们还是以第一题（一次交易得到最大值），为基础解此题。\n在一次交易的基础上，在第一次交易的结果上，我们减去当前价格，也就是减去第二次购买的成本。每次遍历都计算此值，得到最大值，也就是第二次购买的最便宜的时候。\n然后在上面得到第二次最低成本的情况下，得到第二次的最高利润，每遍历到一个数都记录。\n最后这里需要仔细想清楚这里的思想以及代码里是如何进行的。不然很难理解，我个人也是第三次做这个题了，也都需要仔细回味\ncode\nclass Solution {\npublic:\n    int maxProfit(vector& prices) {\n        int b1=INT_MIN,b2=INT_MIN,s1=0,s2=0;\n            for(auto p:prices){\n             b1=max(b1,-p);\n             s1=max(s1,b1+p);\n             b2=max(b2,s1-p);\n             s2=max(s2,b2+p);\n        }\n        return s2;\n    }\n};\n\nalgorithm analysis\n一次遍历解决问题，时间复杂度O(n)\n"},"124.-Binary-Tree-Maximum-Path-Sum.html":{"url":"124.-Binary-Tree-Maximum-Path-Sum.html","title":"124. Binary Tree Maximum Path Sum","keywords":"","body":"124. Binary Tree Maximum Path Sum\n124. Binary Tree Maximum Path Sum\nproblem description\nGiven a non-empty binary tree, find the maximum path sum.\nFor this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\nExample 1:\nInput: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n\nExample 2:\nInput: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\nOutput: 42\n\nalgorithm thought\n还是典型的树问题，使用递归解决。\n这里题目有点描述不清楚，这里只有根节点可以连接两个子树，也就是加上子树上计算的结果。但是如果是中间节点，那就只能连接一个子树，选择左子树或者右子树。这里当然是选择最大的一个子树。\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int res;\n    int maxtosum(TreeNode* root){\n        if(root==NULL)\n            return 0;\n         int l=maxtosum(root->left);\n         int r=maxtosum(root->right);\n        if(lval+l+r>res) res=root->val+l+r;\n        return root->val+=max(l,r);\n    }\n    int maxPathSum(TreeNode* root) {\n        res=INT_MIN;\n        maxtosum(root);\n        return res;\n    }\n};\n\nalgorithm analysis\n对所有的节点遍历一遍得出结果，时间复杂度O(n)\n"},"127.-Word-Ladder.html":{"url":"127.-Word-Ladder.html","title":"127. Word Ladder","keywords":"","body":"127. Word Ladder\nproblem description\nGiven two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\nOnly one letter can be changed at a time. Each transformed word must exist in the word list. Note that beginWord is not a transformed word. Note:\nReturn 0 if there is no such transformation sequence. All words have the same length. All words contain only lowercase alphabetic characters. You may assume no duplicates in the word list. You may assume beginWord and endWord are non-empty and are not the same. Example 1:\nInput:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\n\nExample 2:\nInput:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: 0\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n\nalgorithm thought\n这里需要用一种搜索方法找到找到最短路径，对于这种需求，有一种遍历方式能完美的契合。那就是广度优先搜索。找到第一个叶子节点，也就是第一个到达endWord的路径就是最短路径。我们从beginWord开始，每次将beginWord能到的下一个单词加入队列中，然后将他们从wordlist中删除，重复操作，直到到endWord或者没有结果。\ncode\nclass Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector& wordList) {\n        unordered_setwordlists(wordList.begin(),wordList.end());\n        return ladder(beginWord,endWord,wordlists); \n    }\n    int ladder(string&beginword, string&endword, unordered_set& wordlists) {\n        int res=2;\n        string pos=\" \";\n        queue next;\n        nextword(next,beginword,wordlists);\n        next.push(pos);\n        while(!next.empty()){\n            string word=next.front();\n            next.pop();\n            if(word==pos){\n                if(next.empty())\n                    break;\n                res++;\n                next.push(pos);\n            }    \n            if(word==endword)\n                return res;\n            nextword(next,word,wordlists);\n        }\n        return 0;\n    }\n    void nextword(queue&next,string&beginword,unordered_set& wordlists){\n         for(int i=0;i\nalgorithm analysis\n这里涉及到很多复杂的操作，找到nextword，需要进行26*n次，很多情况下，n是小于26的，所以这里几乎时间复杂度是O(n²)了。然后遍历一次数据集，设wordlist长度是m，最后时间复杂度是O(mn²)\n"},"128.-Longest-Consecutive-Sequence.html":{"url":"128.-Longest-Consecutive-Sequence.html","title":"128. Longest Consecutive Sequence","keywords":"","body":"128. Longest Consecutive Sequence\nproblem description\nGiven an unsorted array of integers, find the length of the longest consecutive elements sequence.\nYour algorithm should run in O(n) complexity.\nExample:\nInput: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\nalgorithm thought\n这里要求需要使用O(n)时间求解，我们必须引入一个新的数据结果来使访问一个数据的时间控制到O(1)时间。那肯定是unordered_set类型，这个数据结构是基于hashmap实现的，插入和查询时间是O(1)。首先我们将所有数据存入set，然后顺序遍历原来的数组，如果数字的前一个在set中存在，continue，否则，表示这个数字是这段数字的开始，于是从这里开始顺序加一，每次结果在set中查询，知道不存在这个数字。最后求最长的解\ncode\nclass Solution {\npublic:\n    int longestConsecutive(vector& nums) {\n        unordered_set s(nums.begin(),nums.end());\n        int best=0;\n        for(int val:nums)\n        {\n            if(s.count(val-1)) continue;\n            int y=val+1;\n            while(s.count(y))\n            {\n                y++;\n            }\n            best=max(best,y-val);            \n        }\n        return best;\n    }\n};\n\nalgorithm analysis\n开始将vector数据复制到unordered_set中，时间复杂度O(n).注意一定要使用这种办法而不是一个个插入的方法，如果一个个插入很可能耗时更多。然后遍历数组时间复杂度O(n),在循环中会再次遍历一遍顺序的数字，这里需要执行n次。 最后执行3n次，时间复杂度O(n)\n"},"129.-Sum-Root-to-Leaf-Numbers.html":{"url":"129.-Sum-Root-to-Leaf-Numbers.html","title":"129. Sum Root to Leaf Numbers","keywords":"","body":"129. Sum Root to Leaf Numbers\nproblem description\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.\nAn example is the root-to-leaf path 1->2->3 which represents the number 123.\nFind the total sum of all root-to-leaf numbers.\nNote: A leaf is a node with no children.\nExample:\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n\nExample 2:\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n\nalgorithm thought\n树问题，递归解决，这里需要到叶子节点才能知道最后的值是多少。需要将父节点的信息传入子节点。这里有两种方法传递一种是直接改变节点的值，父节点改将自己的值加到子节点。还有一种方法是用参数传递。\ncode\n//改变叶子节点的值\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int res=0;\n    int sumNumbers(TreeNode* root) {        \n        if(root!=NULL)\n            sumNumber(root);\n        return res;\n    }\n    void sumNumber(TreeNode* root){\n        if(root->left){\n            root->left->val+=root->val*10;\n            sumNumber(root->left);\n        }\n        if(root->right){\n            root->right->val+=root->val*10;\n            sumNumber(root->right);\n        }\n        if(root->left==NULL&&root->right==NULL)\n            res+=root->val;\n    }\n};\n\n//用参数传递\nclass Solution {\npublic: \n    int res=0;\n    int sumNumbers(TreeNode* root) {        \n        if(root==NULL)\n            return 0;\n        helper(root,0);\n        return res;\n    }\n    void helper(TreeNode* root,int add){\n        if(root->left==NULL&&root->right==NULL){\n            res+=(add*10+root->val);\n            return;\n        }\n        if(root->left)\n            helper(root->left,add*10+root->val);\n        if(root->right)\n            helper(root->right,add*10+root->val);\n    }\n};\n\nalgorithm analysis\n两个代码时间复杂度分析，可能大家都认为第一个算法更好。但是运行下来，反而是第二个代码更快，我认为是第一个代码修改了指针中的值，修改值可能比读取一个值消耗的时间多很多，导致用第二个代码传参数更好。\n"},"130.-Surrounded-Regions.html":{"url":"130.-Surrounded-Regions.html","title":"130. Surrounded Regions","keywords":"","body":"130. Surrounded Regions\nproblem descripition\nGiven a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.\nA region is captured by flipping all 'O's into 'X's in that surrounded region.\nExample:\nX X X X\nX O O X\nX X O X\nX O X X\nAfter running your function, the board should be:\n\nX X X X\nX X X X\nX X X X\nX O X X\nExplanation:\n\nSurrounded regions shouldn’t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.\n\nalgorithm thought\n这个题目意思简单装换过来就是，如果一块圆区域如果连接到外面的话，那么这块圆就不变成X，否则都变为X。\n这里可以用DFS做，从最外围的圆开始往中间遍历，碰到的圆都不变，其他的都变。\n这里还可以用并查集做，由于想回顾并查集，所以这里我用这种方法解题。并查集是能快速找到一组组数据的数据结构，我们将外围区域定义一个节点，其他节点就是每个点自身。开始所有的节点的父节点都是自己。然后遍历数组，如果是最外层的圆，就将它和外围区域节点相连，如果是内部的圆，将它和它旁边的圆相连。最后再次遍历数组，如果圆连接到了外围节点，则保持不变，否则变为X\ncode\nclass Union_find{\npublic:\n    explicit Union_find(int count):count(count){\n        father=new int[count];\n        rank=new int[count];\n        for(int i=0;irank[father_j]){\n                father[father_j]=father_i;\n                rank[father_i]++;\n                //cout>& board) {\n        if(board.size()==0||board[0].size()==0)\n            return ;\n        int row=board.size();\n        int col=board[0].size();\n        Union_find nf(row*col+1);\n        for(int i=0;i\nalgorithm thoguht\n首先构造并查集，在并查集有路径压缩时，插入和查找的时间都是O(1),最后时间复杂度O(n²)。然后遍历数组，时间复杂度O(n²),最后时间复杂度O(n²)\n"},"131.-Palindrome-Partitioning.html":{"url":"131.-Palindrome-Partitioning.html","title":"131. Palindrome Partitioning","keywords":"","body":"131. Palindrome Partitioning\nproblem description\nGiven a string s, partition s such that every substring of the partition is a palindrome.\nReturn all possible palindrome partitioning of s.\nExample:\nInput: \"aab\"\nOutput:\n[\n  [\"aa\",\"b\"],\n  [\"a\",\"a\",\"b\"]\n]\n\nalgorithm thought\n我第一次做这个题的时候，认为这是一个动态规划问题。定义了一个三维数组，保存之前的结果，用类似做最长增长子序列的方法解这个题。感觉时间复杂度应该是控制的还不错了。但是这种方法需要的 空间太多，并且每次得到结果都需要复制一遍所有的数字，太慢了。所以后面看到discuss使用回溯法做这个题。发现其实回溯法也不会太慢。确实，回溯法在这里会有重复计算是否是回文数的情况，但是相比动态规划的复制一整个数组，整个速度还是提高了。\n因为重复计算的是判断回文字符的部分，其实这个和复制相比就很小。下一题我么不需要返回结果只需要返回个数，这时候用动态规划显然更好\ncode\nclass Solution {\npublic:\n    //unordered_map ma;\n    vector> partition(string s) {\n        vector> res;\n        vector tmp;\n        helper(s,res,tmp,0);\n        return res;\n    }\n    void helper(string&s,vector>&res,vector&tmp,int begin){\n        if(begin==s.size()){\n            res.push_back(tmp);\n        }\n        for(int i=begin;i\nalgorithm analysis\n时间复杂度应该是(n*2^n),这也是回溯法找到找到所有集合的普遍时间复杂度\n"},"132.-Palindrome-Partitioning-II.html":{"url":"132.-Palindrome-Partitioning-II.html","title":"132. Palindrome Partitioning II","keywords":"","body":"132. Palindrome Partitioning II\nproblem description\nGiven a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\nExample:\nInput: \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n\nalgorithm thought\n这里就和前一题重点不同了，这里主要的时间消耗就是判断是否回文的消耗了。\n首先我们还是用上一题一样的回文数求法，但是时间太慢了\n看了discuss之后明白了很多，求回文数最快的方法还是从中间往两边扩展好些而不是两边向中间扩展。看到这里的朋友可以仔细体会一下两种的区别。\n下面给出两种代码\ncode\n//两边向中间扩展\nclass Solution {\npublic:\n    int minCut(string s) {\n        if(s.size()==0)\n            return 0;\n        vector dp(s.size()+1,0);\n        dp[0]=-1;\n        for(int i=1;i=0;--j){\n                if(isPalindrome(s,j,i)){\n                    dp[i+1]=min(dp[i+1],dp[j]+1);\n                }\n            }\n        }\n        return dp.back();\n    }\n    bool isPalindrome(string&s,int begin,int end){\n        while(begin dp(s.size()+1,0);\n        for(int i=0;i=0&&(i+j)=0&&(i+j+1)\nalgorithm analysis\n第一个算法最后运行实际是480ms,而第二个算法运行实际是8ms。提升速度可以说是很大了。\n"},"133.-Clone-Graph.html":{"url":"133.-Clone-Graph.html","title":"133. Clone Graph","keywords":"","body":"133. Clone Graph\n"},"134.-Gas-Station.html":{"url":"134.-Gas-Station.html","title":"134. Gas Station","keywords":"","body":"134. Gas Station\nproblem description\nThere are N gas stations along a circular route, where the amount of gas at station i is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.\nReturn the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1.\nNote:\n\nIf there exists a solution, it is guaranteed to be unique. Both input arrays are non-empty and have the same length. Each element in the input arrays is a non-negative integer.\n\nExample 1:\nInput:  \ngas  = [1,2,3,4,5]\ncost = [3,4,5,1,2]\n\nOutput: 3\n\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n\nExample 2:\nInput:  \ngas  = [2,3,4]\ncost = [3,4,3]\n\nOutput: -1\n\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.\n\nalgorithm thought\n用gas[i]减去cost[i]是能得到每次经过一个位置消耗的汽油量的。\n对于这题来说最简单的方法就是，用双重循环遍历数组，得到从每一个地点开始的消耗量，要是能顺时针走完就返回index，这样也能ac，但是时间复杂度O(n²)。\n这题其实可以用O(n)时间解决，开始随机选一个位置，然后判断当前汽油量是正还是负，如果是负就将开始位置向挪动一位，看能否增加汽油量，否则就可以向后移动一位。知道两位置重合，这时候判断总的汽油量是否为正，如果是正就代表能走完。这也是用类似twosum的两指针逼近法，目标值就是最后汽油量需要大于0。\ncode\n//原始二维数组方法\nclass Solution {\npublic:\n    int canCompleteCircuit(vector& gas, vector& cost) {\n        bool bo=true;\n        for(int i=0;i=0){\n                int t=0;\n                bo=true;\n                for(int j=0;j &gas, vector &cost) {\n\n       int start = gas.size()-1;\n       int end = 0;\n       int sum = gas[start] - cost[start];\n       while (start > end) {\n          if (sum >= 0) {\n             sum += gas[end] - cost[end];\n             ++end;\n          }\n          else {\n             --start;\n             sum += gas[start] - cost[start];\n          }\n       }\n       return sum >= 0 ? start : -1;\n    }\n};\n\n//顺序遍历方法\nclass Solution {\npublic:\n    int canCompleteCircuit(vector &gas, vector &cost) {\n        int start=0,total=0,tank=0;\n        for(int i=0;i\nalgorithm analysis\n第一个方法时间复杂度O(n²)，毋庸置疑是最慢的，第二种和第三种方法时间复杂度都是O(n).\n"},"135.-Candy.html":{"url":"135.-Candy.html","title":"135. Candy","keywords":"","body":"135. Candy\nproblem description\nThere are N children standing in a line. Each child is assigned a rating value.\nYou are giving candies to these children subjected to the following requirements:\n\nEach child must have at least one candy. Children with a higher rating get more candies than their neighbors.\n\nWhat is the minimum candies you must give?\nExample 1:\nInput: [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\nExample 2:\n\nInput: [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n             The third child gets 1 candy because it satisfies the above two conditions.\n\nalgorithm thought\n使用一个数组表示给所有小朋友分配的糖果，开始所有的小朋友都是1个。\n一个小朋友等级比旁边的高的话，他的糖果必须必旁边的多。旁边有两个，首先我们让所有小孩向左看时，满足条件，然后让所有小孩往右看时满足条件，最后就能有结果。\ncode\nclass Solution {\npublic:\n    int candy(vector& ratings) {\n        int n=ratings.size();\n        vector res(n,1);\n        for(int i=1;i=0;--i){\n            if(ratings[i]>ratings[i+1])\n                res[i]=max(res[i],res[i+1]+1);\n            re+=res[i];\n        }\n        return re;\n    }\n};\n\nalgorithm analysis\n算法两次遍历数组,最后时间复杂度O(n).\n"},"136.-Single-Number.html":{"url":"136.-Single-Number.html","title":"136. ingle Number","keywords":"","body":"136. Single Number\nproblem description\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one.\nNote:\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\nExample 1:\nInput: [2,2,1]\nOutput: 1\n\nExample 2:\nInput: [4,1,2,1,2]\nOutput: 4\n\nalgorithm thought\n使用异或的性质，两个同样的数，异或之后结果相同。所以将所有数异或就行\ncode\nclass Solution {\npublic:\n    int singleNumber(vector& nums) {\n        int res=0;\n        for(auto num:nums){\n            res^=num;\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n两个数异或时间复杂度O(1)，遍历一遍出结果，时间复杂度O(n)\n"},"137.-Single-Number-II.html":{"url":"137.-Single-Number-II.html","title":"137. Single Number II","keywords":"","body":"137. Single Number II\nproblem description\nGiven a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\nNote:\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\nExample 1:\nInput: [2,2,3,2]\nOutput: 3\n\nExample 2:\nInput: [0,1,0,1,0,1,99]\nOutput: 99\n\nalgorithm thought\n和上一题很类似，但是这里是所有的数字都出现3次，除了一个数字出现一次。上一题还可以用异或的性质，这里就没这么好用了。我开始对这题也是一脸懵逼，看了答案还是觉得没那么清晰。这里需要一些数字逻辑的基础，使用状态图来理解题目。\n首先需要知道的一点是，虽然int是32bits，但是这里只需要对一个bit进行考虑即可，其他位的bit运行的规律是一样的。\n这里需要进行转换3次，也就是有4个状态，首尾一样的话也有3个状态了，用一位是表示不了的。这里用两个状态表示。one表示第一个状态，two表示第二个状态,这里用两位表示，第一位是one状态，第二位是two状态\n开始状态00,然后依次是10,01,00\n00 -> 10 -> 01 -> 00\n注意这里为啥第二个状态是10,因为最后还有一个数字只出现一次,one状态为1,最后直接返回one状态即可.\n可以将状态转化关系列出来，发现one状态基本等于one^nums[i],除了当two为1的时候,one直接为0,得出one的转换关系为one=(one\\^nums[i])&~two\n同理得到two的转化也基本都是异或，除了第一个状态的时候，0->0，得到two的转换关系是two=(two\\^nums[i])&~one\ncode\nclass Solution {\npublic:\n    int singleNumber(vector& nums) {\n        int ones = 0, twos = 0;\n        for(int i = 0; i \nalgorithm analysis\n算法一次遍历数组即可得出结果，时间复杂度O(n)\n"},"139.-Word-Break.html":{"url":"139.-Word-Break.html","title":"139. Word Break","keywords":"","body":"139. Word Break\nproblem description\nGiven a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote:\nThe same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words.\nExample 1:\nInput: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\nExample 2:\nInput: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n             Note that you are allowed to reuse a dictionary word.\n\nExample 3:\nInput: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\nOutput: false\n\nalgorithm thought\n这题可以很快相出回溯解法，匹配到一个进入下一个函数即可，但是这样会有很多重复的计算。\n可以用动态规划解决，用一个数组保存结果，每一位表示0-i长度的s能匹配。遍历s,如果当前i开始的substring中，能和wordDict匹配，并且当前dp[i]=true的话，那么substirng的index的是true,最后返回数组最后一位即可\ncode\nclass Solution {\npublic:\n    bool wordBreak(string s, vector& wordDict) {\n        vector res(s.size()+1,false);\n        res[0]=true;\n        for(int i=0;i=0&&s.substr(pos,sz)==wordDict[j]&&res[pos]){\n                    res[i+1]=true;\n                    break;\n                }\n            }\n        }\n        return res.back();\n    }\n};\n\nalgorithm analysis\n设s长度为m,wordDict长度为n,每个word平均长度是k,最后时间复杂度是O(mnk)\n"},"140.-Word-Break-II.html":{"url":"140.-Word-Break-II.html","title":"140. Word Break II","keywords":"","body":"140. Word Break II\nproblem description\nGiven a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.\nNote:\nThe same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words.\nExample 1:\nInput:\ns = \"catsanddog\"\nwordDict = [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]\nOutput:\n[\n  \"cats and dog\",\n  \"cat sand dog\"\n]\n\nExample 2:\nInput:\ns = \"pineapplepenapple\"\nwordDict = [\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"]\nOutput:\n[\n  \"pine apple pen apple\",\n  \"pineapple pen apple\",\n  \"pine applepen apple\"\n]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\nExample 3:\nInput:\ns = \"catsandog\"\nwordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\nOutput:\n[]\n\nalgorithm thought\n和上一题计算数量不同，这里需要列出结果。\n计算结果需要用到回溯法，但是单纯的回溯在这里太慢了，这里可以加入一种备忘录的方法，类似dp。可以减少我们再回溯中的重复计算，举个例子，如果一个字符串是由很多个一样的子串拼接在一起的，对于回溯法，对于每个子串都是一样的计算，但是加入备忘录之后，对于同样的子串，只需要计算一次就能得到结果。\ncode\nclass Solution {\npublic:\n    unordered_map> m;\n\n    void combin(string&word,vector&prev){\n        for(int i=0;i wordbreak(string&s, unordered_set& worddict) {\n        if(m.count(s))\n            return m[s];\n        vector res;\n        if(worddict.count(s)){\n            res.push_back(s);\n        }\n        for(int i=s.size()-1;i>0;--i){\n            string tmp=s.substr(i);\n            if(worddict.count(tmp)){\n                string pr=s.substr(0,i);\n                vector prev=wordbreak(pr,worddict);\n                combin(tmp,prev);\n                res.insert(res.end(),prev.begin(),prev.end());\n            }\n        }\n        return m[s]=res;\n    }\n    vector wordBreak(string s, vector& wordDict) {\n        unordered_set worddict=unordered_set(wordDict.begin(),wordDict.end());\n        return wordbreak(s,worddict);\n    }\n};\n\nalgorithm analysis\n这里时间复杂度不太好分析,对于不加入备忘录的算法，时间复杂度是O(2^n)，需要遍历出每一种组合。\n加入备忘录之后，能减少很多额外计算了\n"},"141.-Linked-List-Cycle.html":{"url":"141.-Linked-List-Cycle.html","title":"141. Linked List Cycle","keywords":"","body":"141. Linked List Cycle\nproblem description\nGiven a linked list, determine if it has a cycle in it.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\n\nFollow up: Can you solve it using O(1) (i.e. constant) memory?\nalgorithm thought\n这里直接用著名的Floyd判圈算法就行，定义一个快指针一个慢指针，快指针每次走两步，慢指针每次走一步。如果有环两个指针肯定能碰到，如果快指针走到NULL节点，那就没有环\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n\n            if(slow == fast) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n};\n\nalgorithm analysis\n快指针每次走两步，如果有环，不用n时间两个节点就能碰到。时间复杂度O(n)\n"},"142.-Linked-List-Cycle-II.html":{"url":"142.-Linked-List-Cycle-II.html","title":"142. Linked List Cycle II","keywords":"","body":"142. Linked List Cycle II\nproblem description\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connected index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\n\nExample 2:\nGiven a linked list, return the node where the cycle begins. If there is no cycle, return null.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\nInput: head = [1,2], pos = 0\nOutput: tail connected index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: tail connected nothing\nExplanation: There is no cycle in the linked list.\n\n\nalgorithm thought\n这题和上一题很像，用一样的算法就能解决，利用数学证明可以得知，当两个快慢指针相交时，他们到连接点的长度就是起始点到连接点的长度。这时候，一个指针从起始点出发，一个从相交点出发，两个指针相交之后就能知道连接点是哪个\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode* slow=head,*fast=head;\n        while(fast&&fast->next){\n            fast=fast->next->next;\n            slow=slow->next;\n            if(fast==slow)\n                break;\n        }\n        if(fast==NULL||fast->next==NULL)\n            return NULL;\n        slow=head;\n        while(slow!=fast){\n            slow=slow->next;\n            fast=fast->next;\n        }\n        return fast;\n    }\n};\n\nalgorithm analysis\n和上一题一样，时间复杂度O(n),空间复杂度O(1)\n"},"143.-Reorder-List.html":{"url":"143.-Reorder-List.html","title":"143. Reorder List","keywords":"","body":"143. Reorder List\nproblem description\nGiven a singly linked list L: L0→L1→…→Ln-1→Ln, reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…\nYou may not modify the values in the list's nodes, only nodes itself may be changed.\nExample 1:\nGiven 1->2->3->4, reorder it to 1->4->2->3.\n\nExample 2:\nGiven 1->2->3->4->5, reorder it to 1->5->2->4->3.\n\nalgorithm thought\n这里我还是用的链表题通用解法，使用递归解决，但是这里用递归确实不是太好，时间复杂度会有O(n²),可以用一个vector先保存所有节点，再处理\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n       head=reorder(head);\n    }\n    ListNode* reorder(ListNode* head){\n        if(head==NULL||head->next==NULL||head->next->next==NULL)\n          return head;\n        ListNode* tmp=head;\n        while(head->next->next){\n            head=head->next;\n        }\n\n        head->next->next=tmp->next;\n        tmp->next=head->next;\n        head->next=NULL;\n        tmp->next->next=reorder(tmp->next->next);\n        return tmp;\n    }\n};\n\nalgorithm analysis\n这里的算法算是很慢的了，时间复杂度达到了O(n²)，不是很建议使用，只是我比较喜欢用递归解链表题，所以这里才用递归解决\n"},"144.-Binary-Tree-Preorder-Traversal.html":{"url":"144.-Binary-Tree-Preorder-Traversal.html","title":"144. Binary Tree Preorder Traversal","keywords":"","body":"144. Binary Tree Preorder Traversal\nproblem description\nGiven a binary tree, return the preorder traversal of its nodes' values.\nExample:\nInput: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\nOutput: [1,2,3]\nFollow up: Recursive solution is trivial, could you do it iteratively?\n\nalgorithm thought\n二叉树先跟遍历，递归方法很好做，几行代码就能搞定。这里还是和中序遍历一样，有三种方法。除了简单的递归算法，难一点的就是迭代解法。\n迭代解法使用栈辅助，首先需要理解先序遍历的顺序。先序遍历首先访问根节点，然后左子节点，再右子节点。画图可以知道，先序遍历首先会访问左边所有节点，然后由底向上对之前节点的右子树再进行前序遍历。所以直接一个递归得到所有的左边的值，并将右子节点压栈即可。\nMorris解法，大概路径和94.-binary tree inorder traversal很像，只是将输出值的地方改变了，在中序遍历中Morris解法中，我们再进入右子树的时候将值打印，但是先序遍历的时候，我们在第一次访问到节点的时候就打印，Morris具体过程可以去94题看思路\ncode\n//迭代解法\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector preorderTraversal(TreeNode* root) {\n        vector res;\n        stack st;\n        if(root==NULL)\n            return res;\n        st.push(root);\n        while(!st.empty()){\n            root=st.top();\n            st.pop();\n            while(root!=NULL){\n                res.push_back(root->val);\n                if(root->right)\n                   st.push(root->right);\n                root=root->left;\n            }\n        }\n        return res;\n    }\n\n};\n\n//Morris解法\nclass Solution {\npublic:\n    vector preorderTraversal(TreeNode* root) {\n        vector res;\n        TreeNode* now=root,*pre=NULL;\n        while(now){\n            pre=now->left;\n            if(pre){\n                while(pre->right!=NULL&&pre->right!=now){\n                    pre=pre->right;\n                }\n                if(pre->right){\n                    pre->right=NULL;\n                    now=now->right;\n                }else{\n                    pre->right=now;\n                    res.push_back(now->val);\n                    now=now->left;\n                }\n            }else{\n                res.push_back(now->val);\n                now=now->right;\n            }\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n树遍历算法时间复杂度都是O(n)，关键是空间复杂度，递归和使用栈辅助迭代的算法空间复杂度都是O(n).但是Morris算法空间复杂度是O(1)，使用了大量的空闲NULL节点。\n"},"145.-Binary-Tree-Postorder-Traversal.html":{"url":"145.-Binary-Tree-Postorder-Traversal.html","title":"145. Binary Tree Postorder Traversal","keywords":"","body":"145. Binary Tree Postorder Traversal\nproblem description\nGiven a binary tree, return the postorder traversal of its nodes' values.\nExample:\nInput: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\nOutput: [3,2,1]\nFollow up: Recursive solution is trivial, could you do it iteratively?\n\nalgorithm thought\n递归方法就不说了，对于迭代方法，这里只用一个栈还是不好理解，需要但是换种思路，后序遍历的逆序，其实就是先序遍历的先遍历右节点版本。 我们只需要将之前的先序遍历算法，从 根->左->右 改为 根->右->左。得到最后结果之后，将结果逆序即可。\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector postorderTraversal(TreeNode* root) {\n        vector res;\n        stack st;\n        st.push(root);\n        while(!st.empty()){\n            TreeNode* tmp=st.top();\n            st.pop();\n            while(tmp){\n                res.push_back(tmp->val);\n                st.push(tmp->left);\n                tmp=tmp->right;\n            }\n        }\n        reverse(res.begin(),res.end());\n        return res;\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n),空间复杂度O(n)。其实后序遍历也是有Morris算法的，但是我觉得有点麻烦，可能这种reverse的方法更好。\n"},"147.-Insertion-Sort-List.html":{"url":"147.-Insertion-Sort-List.html","title":"147. Insertion Sort List","keywords":"","body":"147. Insertion Sort List\nproblem description\nSort a linked list using insertion sort.\n\nA graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list. With each iteration one element (red) is removed from the input data and inserted in-place into the sorted list\nAlgorithm of Insertion Sort:\n\nInsertion sort iterates, consuming one input element each repetition, and growing a sorted output list.\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.\nIt repeats until no input elements remain.\n\nExample 1:\nInput: 4->2->1->3\nOutput: 1->2->3->4\n\nExample 2:\nInput: -1->5->3->4->0\nOutput: -1->0->3->4->5\n\nproblem description\n看似简单的链表插入排序，但是实现起来确实需要注意很多细节问题。提一个代码中最重要的点就是，尾指针下一个如果比他大，就不需要插入，这时候尾指针需要后移一位。但是如果比他小，就不需要移动，因为下一位插入到前面去了，新的下一位就接在尾指针后面\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n        ListNode* dummy = new ListNode(0);\n        dummy -> next = head;\n        ListNode *pre = dummy, *cur = head;\n        while (cur) {\n            if ((cur -> next) && (cur -> next -> val  val)) {\n                while ((pre -> next) && (pre -> next -> val  next -> val)) {\n                    pre = pre -> next;\n                }\n                ListNode* temp = pre -> next;\n                pre -> next = cur -> next;\n                cur -> next = cur -> next -> next;\n                pre -> next -> next = temp;\n                pre = dummy;\n            }\n            else {\n                cur = cur -> next;\n            }\n        }\n        return dummy -> next;\n    }\n};\n\nalgorithm analysis\n插入排序时间复杂度是O(n²)，两个循环，每个执行n次，循环中操作是O(1)的。\n"},"148.-Sort-List.html":{"url":"148.-Sort-List.html","title":"148. Sort List","keywords":"","body":"148. Sort List\nproblem description\nSort a linked list in O(n log n) time using constant space complexity.\nExample 1:\nInput: 4->2->1->3\nOutput: 1->2->3->4\n\nExample 2:\nInput: -1->5->3->4->0\nOutput: -1->0->3->4->5\n\nalgorithm thought\n需要使用nlgn时间复杂度排序链表，显然，这里用归并排序会很好。还需要常数空间复杂度。既然是常数时间，那就不能使用递归解决，但是我还是觉得递归解决舒服很多，并且很快很清晰，所以我是使用递归解决的。\n归并排序有两部分，一部分是对两半个链表排序，然后就排好序的链表合并，链表合并问题，我们之前的问题也讨论过了\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(head==NULL||head->next==NULL)\n            return head;\n        else if(head->next->next==NULL){\n            ListNode* tmp=head->next;\n            head->next=NULL;\n            return merge(head,tmp);\n        }else{\n            ListNode* mid=head,*fast=head;\n            while(fast->next&&fast->next->next){\n                fast=fast->next->next;\n                mid=mid->next;\n            }\n            coutvalnext;\n            mid->next=NULL;\n            return merge(sortList(head),sortList(fast));\n        }\n        return NULL;\n    }\n    ListNode* merge(ListNode* l1,ListNode* l2){\n        if(l1==NULL)\n            return l2;\n        if(l2==NULL)\n            return l1;\n        if(l1->valval){\n            l1->next=merge(l1->next,l2);\n            return l1;\n        }else{\n            l2->next=merge(l1,l2->next);\n            return l2;\n        }\n        return NULL;\n    }\n};\n\nalgorithm analysis\n就想thought中说的那样，时间复杂度肯定是O(nlgn)，对于归并排序时间复杂度的详细分析，可以看看主定理。但是空间复杂度还是没到常数，空间复杂度也是O(nlgn)\n"},"150.-Evaluate-Reverse-Polish-Notation.html":{"url":"150.-Evaluate-Reverse-Polish-Notation.html","title":"150. Evaluate Reverse Polish Notation","keywords":"","body":"150. Evaluate Reverse Polish Notation\nproblem description\nEvaluate the value of an arithmetic expression in Reverse Polish Notation.\nValid operators are +, -, *, /. Each operand may be an integer or another expression.\nNote:\nDivision between two integers should truncate toward zero. The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.\nExample 1:\nInput: [\"2\", \"1\", \"+\", \"3\", \"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n\nExample 2:\nInput: [\"4\", \"13\", \"5\", \"/\", \"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n\nExample 3:\nInput: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\nOutput: 22\nExplanation:\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n\nproblem description\n波兰表达式，直接使用一个栈解决，碰到数字压入，碰到符号就计算，并且将计算结果压入栈中\ncode\nclass Solution {\npublic:\n    int evalRPN(vector& tokens) {\n        stack st;\n        for (int i = 0; i \nalgorithm analysis\n程序只需要线性时间遍历数组即可，时间复杂度O(n)\n"},"151.-Reverse-Words-in-a-String.html":{"url":"151.-Reverse-Words-in-a-String.html","title":"151. Reverse Words in a String","keywords":"","body":"151. Reverse Words in a String\nproblem description\nGiven an input string, reverse the string word by word.\nExample 1:\nInput: \"the sky is blue\"\nOutput: \"blue is sky the\"\n\nExample 2:\nInput: \"  hello world!  \"\nOutput: \"world! hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.\n\nExample 3:\nInput: \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n\nNote:\n\nA word is defined as a sequence of non-space characters.\nInput string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.\nYou need to reduce multiple spaces between two words to a single space in the reversed string.\n\nFollow up:\nFor C programmers, try to solve it in-place in O(1) extra space.\nalgorithm thought\nfollow up中提到里，如果是c程序员，尝试使用O(1)空间解决。 我寻思cpp程序员应该也行。这里可以利用数组之前的空间，由于这个算法运行之后，字符串大小肯定是小于等于原始字符串大小的。所以，我们们可以在原始字符串上操作，而不需要新开一个字符串。\n首先将空格啥的都去掉，得到精简的单词，将单词翻转，最后将得到的字符串翻转\ncode\nclass Solution {\npublic:\n    string reverseWords(string s) {\n        int begin=0,end=s.size()-1;\n        while(s[end]==' ')\n            end--;\n        int i=0;\n        while(s[i]==' ')\n            ++i;\n        while(i\nalgorithm analysis\n虽然看起来循环挺多的，但是本质只是遍历了一遍字符串，然后翻转一此，如果长度为n，进行的次数应该是3n，时间复杂度O(n)\n"},"152.-Maximum-Product-Subarray.html":{"url":"152.-Maximum-Product-Subarray.html","title":"152. Maximum Product Subarray","keywords":"","body":"152. Maximum Product Subarray\nproblem description\nGiven an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\nExample 1:\nInput: [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n\nExample 2:\nInput: [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n\nalgorithm thought\n典型的动态规划问题，可以这么入手去思考状态转移，如果现在得到结果为res，新来一个数字，如果是正数，那么新的res变为res*newnum。但是如果来的是一个负数，就不好解决了，所以我们不仅要保存最大值（也就是结果），还要保存一个最小值，负数乘一个最小的负数也是有可能得到最大值的。\ncode\nclass Solution {\npublic:\n    int maxProduct(vector& nums) {\n        int mi=nums[0];\n        int ma=nums[0];\n        int res=nums[0];\n        for(int i=1;i\nalgorithm analysis\n一次循环遍历数组，时间复杂度O(n)\n"},"153.-Find-Minimum-in-Rotated-Sorted-Array.html":{"url":"153.-Find-Minimum-in-Rotated-Sorted-Array.html","title":"153. Find Minimum in Rotated Sorted Array","keywords":"","body":"153. Find Minimum in Rotated Sorted Array\nproblem description\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nFind the minimum element.\nYou may assume no duplicate exists in the array.\nExample 1:\nInput: [3,4,5,1,2] \nOutput: 1\n\nExample 2:\nInput: [4,5,6,7,0,1,2]\nOutput: 0\n\nalgorithm thought\n这题和之前find target in rotated array那题很像。这里是找到最小值。首先，如果一个数组是有序的，那么最小值肯定就是第一个数，如果在哪个地发rotate了，那么那个点就是最小值，也是我们需要找的值。\n这里一样可以用二分查找解决，首先我们判断数组首是否小于尾，如果小于那就是有序的，直接返回数组首值。否则，找到mid，判断mid和首元素的关系，如果是顺序的，那么我们下一个找的应该是右数组，如果不是有序的，那么就在左数组中找到那个rotate点\ncode\nclass Solution {\npublic:\n    int findMin(vector& nums) {\n        int left=0,right=nums.size()-1;\n        while(left=nums[left])\n                left=mid+1;\n            else\n                right=mid;\n        }\n        return nums[left];\n    }\n};\n\nalgorithm analysis\n利用二分查找解决问题，时间复杂度O(lgn)\n"},"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html":{"url":"154.-Find-Minimum-in-Rotated-Sorted-Array-II.html","title":"154. Find Minimum in Rotated Sorted Array II","keywords":"","body":"154. Find Minimum in Rotated Sorted Array II\nproblem description\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nFind the minimum element.\nThe array may contain duplicates.\nExample 1:\nInput: [1,3,5]\nOutput: 1\n\nExample 2:\nInput: [2,2,2,0,1]\nOutput: 0\n\nNote:\nThis is a follow up problem to Find Minimum in Rotated Sorted Array. Would allow duplicates affect the run-time complexity? How and why?\nalgorithm thought\n上一题的拓展版本，可以有重复数字，我们需要处理的也是重复数字。每次对于最左边的数字，如果和右边的数字重复，就将left++。之后的处理基本和上一题一样了\n这里需要理解的是，如果数组有序，直接返回left，否组数组肯定是两段有序，mid肯定在两段中的一段。mid和left相比，如果mid >= left，left-mid这段就是有序的，最小值肯定不再中间，mid \ncode\nclass Solution {\npublic:\n    int findMin(vector& nums) {\n        int left=0,right=nums.size()-1;\n        while(left=nums[left])\n                left=mid+1;\n            else\n                right=mid;\n        }\n        return nums[left];\n    }\n};\n\nalgorithm analysis\n上一题时间复杂度是O(lgn),这里加入了重复数组计算，如果所有数字都是重复的，那么处理重复数字的时间复杂度会达到O(n)，所以这里时间复杂度是O(n)\n"},"155.-Min-Stack.html":{"url":"155.-Min-Stack.html","title":"155. Min Stack","keywords":"","body":"155. Min Stack\nproblem description\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\npush(x) -- Push element x onto stack. pop() -- Removes the element on top of the stack. top() -- Get the top element. getMin() -- Retrieve the minimum element in the stack.\nExample:\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --> Returns -3.\nminStack.pop();\nminStack.top();      --> Returns 0.\nminStack.getMin();   --> Returns -2.\n\nalgorithm thought\n首先min stack有普通stack的接口，能够处理正常stack的数据。所以肯定需要一个stack来充当正常的stack。\n不仅如此，还希望能在O(1)时间内返回最小值，这就希望我们保存最小值，如果只用一个值保存，肯定是不行的。因为如果这个最小值被弹出，找到下一个最小值的时间需要O(n)。这里用第二个栈来保存最小值，因为最得到栈中的最小值过程也需要有先进后出的特性。\ncode\nclass MinStack {\npublic:\n    /** initialize your data structure here. */\n    MinStack() {\n\n    }\n\n    void push(int x) {\n        st.push(x);\n        if(mist.empty()||x mist;\n    stack st;\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */\n\nalgorithm analysis\n所有操作时间复杂度都是O(1)的\n"},"160.-Intersection-of-Two-Linked-Lists.html":{"url":"160.-Intersection-of-Two-Linked-Lists.html","title":"160. Intersection of Two Linked Lists","keywords":"","body":"160. Intersection of Two Linked Lists\nproblem description\nWrite a program to find the node at which the intersection of two singly linked lists begins.\nFor example, the following two linked lists:\n begin to intersect at node c1.\nExample 1:\n\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\nOutput: Reference of the node with value = 8\nInput Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n\nExample 2:\n\nInput: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Reference of the node with value = 2\nInput Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n\nExample 3:\n\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: null\nInput Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n\nNotes:\nIf the two linked lists have no intersection at all, return null. The linked lists must retain their original structure after the function returns. You may assume there are no cycles anywhere in the entire linked structure. Your code should preferably run in O(n) time and use only O(1) memory.\nalgorithm thought\n这里如果使用一个hashmap保存所有节点，很简单就能得到答案，但是空间复杂度是O(n)，这里要求使用O(1)的空间复杂度解题，首先我们遍历两个链表，得到两个链表的长度，如果有一个长一个短，首先让长的链表头节点先移动两链表的差值，这时候两个链表一样长了，只需要一起移动，并且每次都判断是否为同一个节点即可。\nupdate:更新图片的时候，发现discuss有更好的算法，我这里需要3次遍历链表，其实开始两次得到链表长度的目的就是让两个链表能同步开头，最后一起结束，还有一种办法能达到这个目的。两个链表一起移动，到达尾节点的时候，两个链表交换继续执行。也就是A到尾节点的时候，领tmpA=HeadB，B到尾节点的时候，令tmpB=HeadA。这样，也能消除两个链表之间的差距\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        int len1=0,len2=0;\n        ListNode*a=headA,*b=headB;\n        while(headA){\n            len1++;\n            headA=headA->next;\n        }\n        while(headB){\n            len2++;\n            headB=headB->next;\n        }\n        if(len1next;\n        }\n        while(a!=b){\n            a=a->next;\n            b=b->next;\n        }\n        return a;\n    }\n};\n\n//update code\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode *p1 = headA;\n        ListNode *p2 = headB;\n\n        if (p1 == NULL || p2 == NULL) return NULL;\n\n        while (p1 != NULL && p2 != NULL && p1 != p2) {\n            p1 = p1->next;\n            p2 = p2->next;\n\n            //\n            // Any time they collide or reach end together without colliding \n            // then return any one of the pointers.\n            //\n            if (p1 == p2) return p1;\n\n            //\n            // If one of them reaches the end earlier then reuse it \n            // by moving it to the beginning of other list.\n            // Once both of them go through reassigning, \n            // they will be equidistant from the collision point.\n            //\n            if (p1 == NULL) p1 = headB;\n            if (p2 == NULL) p2 = headA;\n        }        \n        return p1;\n    }\n};\n\nalgorithm analysis\n遍历了很多次链表，时间复杂度是O(n)，没有用额外的空间，空间复杂度O(1)\n"},"164.-Maximum-Gap.html":{"url":"164.-Maximum-Gap.html","title":"164. Maximum Gap","keywords":"","body":"164. Maximum Gap\nproblem description\nGiven an unsorted array, find the maximum difference between the successive elements in its sorted form.\nReturn 0 if the array contains less than 2 elements.\nExample 1:\nInput: [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either\n             (3,6) or (6,9) has the maximum difference 3.\n\nExample 2:\nInput: [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n\nNote:\n\nYou may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.\nTry to solve it in linear time/space.\n\nalgorithm thought\n乍一看发现只要排好序，然后得到两两直接差值的最大值就行了。问题是这里要求我们使用线性时间解决问题，使用普通的比较排序，最快的就是快排，时间复杂度是O(lgn)。使用比较排序是不行的，这里需要使用线性时间排序算法，桶排序就很适合这里。桶排序原理是将数据按组分入桶中，对于桶里的数在进行线性时间排序。但是对于这题，巧妙的处理可以省去桶里数据排序这一步。\n桶的大小是关键，这里我们首先遍历一遍数组，得到数组的最大值和最小值。最大值减去最小值就可以得到最大的gap。然后除以size-1，就能得到平均的gap。也就是这个题的可能的最小值。我们令这个值为桶的大小。桶里的数字直接的差值我们是不需要记录的，只需要记录桶直接的数字差值。\n然后就是遍历数组，将数字放入桶内，保存桶的最大最小值。最后再遍历一次桶，得到最后的max_gap\ncode\nclass Solution {\npublic:    \n    int maximumGap(vector& nums) {\n        if(nums.size()> bucket(bucket_number+1,make_pair(INT_MAX,INT_MIN)); //需要多一个bucket装最大的那个数字\n        for(auto num:nums){\n            int index=(num-mi)/min_gap;\n            bucket[index].first=min(bucket[index].first,num);\n            bucket[index].second=max(bucket[index].second,num);\n        }\n        int i=0,res=INT_MIN;\n        while(i\nalgorithm analysis\n桶排序只需要线性时间，时间复杂度O(n)，空间复杂度O(n).\n"},"169.-Majority-Element.html":{"url":"169.-Majority-Element.html","title":"169. Majority Element","keywords":"","body":"169. Majority Element\nproblem description\nGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\nYou may assume that the array is non-empty and the majority element always exist in the array.\nExample 1:\nInput: [3,2,3]\nOutput: 3\n\nExample 2:\nInput: [2,2,1,1,1,2,2]\nOutput: 2\n\nalgorithm thought\n因为规定了majority element出现的次数肯定是数组的一半以上，所以只需要定义一个count保存出现最多次数数字的次数，遍历数组，如果重复出现则count++，否则--。如果为0，重新更换数字。因为次数肯定是一半以上，所以最后结果肯定是majority element留下来了\ncode\nclass Solution {\npublic:\n    int majorityElement(vector& nums) {\n        int count=0;\n        int res;\n        for(int num:nums){\n            if(count==0){\n                res=num;\n                count++;\n                continue;\n            }\n            if(num==res)\n                count++;\n            else\n                count--;\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n)，这里最重要的是优化空间复杂度，空间复杂度到O(1)是个很大的优化\n"},"179.-Largest-Number.html":{"url":"179.-Largest-Number.html","title":"179. Largest Number","keywords":"","body":"179. Largest Number\nproblem description\nGiven a list of non negative integers, arrange them such that they form the largest number.\nExample 1:\nInput: [10,2]\nOutput: \"210\"\n\nExample 2:\nInput: [3,30,34,5,9]\nOutput: \"9534330\"\n\nNote: The result may be very large, so you need to return a string instead of an integer.\nalgorithm thought\n其实这题本质上，就是将给定的数组，排个序。原始的排序算法，是将数字按照顺序排列，但是我们这里显然需要自己定义自己的顺序。这个顺序也很好定义，就是a+b>b+a。可以仔细理解一下，比较函数这么写的意义。\ncode\nclass Solution {\npublic:\n    string largestNumber(vector& nums) {\n        vector tmp;\n        for(int num:nums)\n            tmp.push_back(to_string(num));\n        sort(tmp.begin(),tmp.end(),[](string s1,string s2){return s1+s2>s2+s1;});\n        string res;\n        for(string str:tmp)\n            res+=str;\n        while(res[0]=='0'&&res.size()>1){\n            res.erase(0,1);\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n字符串比较中如果两个字符串大小差不多可能需要时间复杂度为O(n),如果字符串平均长度为m，数组平均长度为n，那么时间复杂度为O(nlgn*m)\n"},"187.-Repeated-DNA-Sequences.html":{"url":"187.-Repeated-DNA-Sequences.html","title":"187. Repeated DNA Sequences","keywords":"","body":"187. Repeated DNA Sequences\nproblem description\nAll DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: \"ACGAATTCCG\". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.\nWrite a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.\nExample:\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n\nOutput: [\"AAAAACCCCC\", \"CCCCCAAAAA\"]\n\nalgorithm thought\n简单暴力的办法就是用一个map保存所有的切割的字符串，遍历字符串，每次substr 长度为10的字符串，然后与之前记录的字符串比较。如果有重复就加入res。但是对字符串操作是麻烦的，比较也需要一位位比。这里限制的条件是字符串中只有4个字符，如果用bit表示的话，4个字符只需要两位，一共10个字符，所以20位bit就可以表示所有substr的情况了。int类型是32位的，所以使用int就可以表示每个substr，用int来比较和保存也比字符串快多了。\ntips：这里能用int表示，一是因为只有4个字符，二是长度只有10.如果有5个字符就需要3个bit，9个字符就需要4个bit。长度为10的话，int类型就不能表示所有的substr了，需要64位的longlong来辅助解题了。如果再长，就还是用字符串解题吧\ncode\nclass Solution {\npublic:\n    vector findRepeatedDnaSequences(string s) {\n        unordered_map ma{{'A',0},{'C',1},{'G',2},{'T',3}};\n        unordered_map cache;\n        vectorres;\n        int hash=0,mask=(1=9){\n                hash=hash&mask;\n                cache[hash]++;\n                if(cache[hash]==2){\n                    res.push_back(s.substr(i-9,10));\n                }\n            }\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\nhashmap插入和取值操作是O(1),循环中时间复杂度是O(1)，最后时间复杂度是O(n)\n"},"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html":{"url":"188.-Best-Time-to-Buy-and-Sell-Stock-IV.html","title":"188. Best Time to Buy and Sell Stock IV","keywords":"","body":"188. Best Time to Buy and Sell Stock IV\nproblem description\nSay you have an array for which the i-th element is the price of a given stock on day i.\nDesign an algorithm to find the maximum profit. You may complete at most k transactions.\nNote: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\nExample 1:\nInput: [2,4,1], k = 2\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n\nExample 2:\nInput: [3,2,6,5,0,3], k = 2\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.\n             Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\nalgorithm thought\n这是这系列的第四题，第一题是只能一次交易，第二题是可以任意次交易，第三题是可以两次交易，这三题都能O(n)时间内完成。这题是可以k次交易，其实在第三题（可以完成两次交易）已经可以从两次交易推出任意次交易的情况了。只是每次遍历到一个商品，就要进行k次交易，时间复杂度太高了，一共211个test cases在209个的时候TEL了。这种方法也会把代码贴出来\n其实上面这个方法是可行的，但是还需要考虑优化。如果一共只有n个价格，那么最多就进行n/2次交易。换句话说，如果k>n/2，那么就可以认为可以进行任意次交易。将时间复杂度降到O(n).如果不这么处理的话，时间复杂度降是O(kn)，空间复杂度也会达到O(k)。所以加一个短处理对时间复杂度影响挺大的\ncode\nclass Solution {\npublic:\n    int maxProfit(int k, vector& prices) {\n        k=min(k,int(prices.size()));\n        vector> tc(k+1,make_pair(INT_MIN,0));\n        for(auto p:prices){\n            for(int i=1;i& prices) {\n        if(k>prices.size()/2){\n            return shortPro(prices);\n        }\n        vector> tc(k+1,make_pair(INT_MIN,0));\n        for(auto p:prices){\n            for(int i=1;i&prices){\n        int res=0;\n        for(int i=1;iprices[i-1]){\n                res+=(prices[i]-prices[i-1]);\n            }\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n对于第一个算法，时间复杂度是O(kn)。对于第二个加了快速处理的方法，在LeetCode上运行时间能降到4ms，复杂度分析应该要用均摊分析。也不太了解，就不多分析了。\n"},"199.-Binary-Tree-Right-Side-View.html":{"url":"199.-Binary-Tree-Right-Side-View.html","title":"199. Binary Tree Right Side View","keywords":"","body":"199. Binary Tree Right Side View\nproblem description\nGiven a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\nExample:\nInput: [1,2,3,null,5,null,4]\nOutput: [1, 3, 4]\nExplanation:\n\n   1            \nalgorithm thought\n找到每一层最右边的节点，简单办法是直接用层次遍历，遍历每一层。跳到下一层的时候，将每一层最后的一个节点push到结果中。\n在discuss中看到一个很聪明的办法，直接用改动的先根遍历找到结果，改动的地方就是，访问顺序变为，先根后右再左。每次访问时，判断层次和结果大小的关系。因为是先访问右再左，每一层第一个访问的，肯定是最右边的节点。第一个访问的就直接push到结果。\n如果这题是求出最左的节点，按照上面的方法，直接用先根遍历就可以得出结果。\ncode\n//层次遍历的方法\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector rightSideView(TreeNode* root) {\n        queue qu;\n        TreeNode* tmp=new TreeNode(-1);\n        vectorres;\n        if(root==NULL)\n            return res;\n        res.push_back(root->val);\n        qu.push(root->left);\n        qu.push(root->right);\n        qu.push(tmp);\n        int r;\n        while(!qu.empty()){\n            TreeNode* t=qu.front();\n            qu.pop();\n            if(t==NULL){\n                continue;\n            }\n            if(t==tmp){\n               // coutleft);\n            qu.push(t->right);\n            r=t->val;\n        }\n        return res;\n    }\n};\n\n//修改的先根遍历的方法\nclass Solution {\npublic:\n    vector rightSideView(TreeNode* root) {\n        vector res;\n        modify_preorder(root,1,res);\n        return res;\n    }\n    void modify_preorder(TreeNode* root,int level,vector&res){\n        if(root==nullptr)\n            return;\n        if(res.size()val);\n        modify_preorder(root->right,level+1,res);\n        modify_preorder(root->left,level+1,res);\n    }  \n};\n\nalgorithm analysis\n两个算法都是需要将树遍历一遍才能得到答案，时间和空间复杂度都是O(n)。\n但是第二中算法在遍历中每次操作的次数明显比第一种少，并且简洁。所以第二种算法更好\n"},"200.-Number-of-Islands.html":{"url":"200.-Number-of-Islands.html","title":"200. Number of Islands","keywords":"","body":"200. Number of Islands\nproblem description\nGiven a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\nExample 1:\nInput:\n11110\n11010\n11000\n00000\n\nOutput: 1\n\nExample 2:\nInput:\n11000\n11000\n00100\n00011\n\nOutput: 3\n\nalgorithm thought\n这题不是很难，直接遍历所有，对每个为1的点，进行DFS遍历。没遍历到一个1的节点就赋值为0. 每次进行DFS的时候，将res+1.\ncode\nclass Solution {\npublic:\n    int numIslands(vector>& grid) {\n        int res=0;\n        for(int i=0;i> &grid, int x, int y)\n    {\n        grid[x][y] = '0';\n        if(x > 0 && grid[x - 1][y] == '1')\n            DFS(grid, x - 1, y);\n        if(x  0 && grid[x][y - 1] == '1')\n            DFS(grid, x, y - 1);\n        if(y \nalgorithm analysis\n对于二维数组，每个节点最多访问两次，所以总的最多访问的次数是2*n².最后时间复杂度O(n²)\n"},"201- Bitwise-AND-of-Numbers-Range.html":{"url":"201- Bitwise-AND-of-Numbers-Range.html","title":"201. Bitwise AND of Numbers Range","keywords":"","body":"201. Bitwise AND of Numbers Range\nproblem description\nGiven a range [m, n] where 0 \nExample 1:\nInput: [5,7]\nOutput: 4\n\nExample 2:\nInput: [0,1]\nOutput: 0\n\nalgorithm thought\n这题可以从递归的角度思考问题。如果a>b,那么range(a,b)中的所有数字相与，最后一位bit肯定是0。这个很好证明，a&a+1 最后一位肯定是0。b>=a+1,range(a,b)中所有数相与，最后一位肯定为0.\n确定好了最后一位了，前面的可以递归解决，让ab都右移一位，递归判断，直到最后，a\ncode\nclass Solution {\npublic:\n    int rangeBitwiseAnd(int m, int n) {\n       return n>m?(rangeBitwiseAnd((m>>1),(n>>1))\nalgorithm analysis\n这个算法最多执行32次，时间复杂度O(1)\n"},"202.-Happy-Number.html":{"url":"202.-Happy-Number.html","title":"202. Happy Number","keywords":"","body":"202. Happy Number\nproblem description\nWrite an algorithm to determine if a number is \"happy\".\nA happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.\nExample: \nInput: 19\nOutput: true\nExplanation: \n1² + 9² = 82\n8² + 2² = 68\n6² + 8² = 100\n1² + 0² + 0² = 1\n\nalgorithm thought\n这题其实就是链表判圈问题的建模版本，happy number问题会有两种情况，一种就是能找到结果，结果为1，还有一种就是会一直循环，形成一个圈。\n把结果能得到1的，认定为是没有圈的链表，而会一直循环的happy number认定为是带圈的链表，最后就是找出圈就行。\n链表找环问题可以看前面的题解。\ncode\nclass Solution {\npublic:\n    bool isHappy(int n) {\n        int fast=n;\n        int slow=n;\n        while(1){\n            fast=happy(happy(fast));\n            slow=happy(slow);\n            if(fast==1)\n                return true;\n            if(fast==slow)\n                return false;\n        }\n        return false;\n    }\n    int happy(int a){\n        int res=0;\n        while(a){\n            res+=(a%10)*(a%10);\n            a=a/10;\n        }\n        return res;\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n)，重要的是，空间复杂度只有O(1)。如果用一个hashtable保存之前出现的数字，也是能找到重复的，但是这样就需要O(n)的时间复杂度了。\n"},"204.-Count-Primes.html":{"url":"204.-Count-Primes.html","title":"204. Count Primes","keywords":"","body":"204. Count Primes\nproblem description\nCount the number of prime numbers less than a non-negative number, n.\nExample:\nInput: 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\nalgorithm thought\n直接求一个数是不是质数需要O(lgn)时间，遍历查看是否有两数相乘能得到n。这里是求n数中所有的质数，可以从反方向来考虑。得到一个质数之后，直接排除所有他的倍数。排除一个数只要一次计算，但是之后再来计算这个数是不是质数却需要O(lgn)时间。\n可以知道，所有偶数肯定不是质数。直接从3开始计算，排除所有3的倍数。注意要从33开始，也就是9开始，而不是3或者是32=6开始。因为6已经在从2开始计算中计算过了。再比如计算5的倍数，不需要计算53=15，因为之前计算3的时候计算过35=15了。\n计算3的倍数，首先是9，然后是12，然后是15以此类推，都不是质数，可以排除。但是，这里好像还是有重复计算，12 ， 18 等等数字明显都是偶数，可以直接不计算。于是修改计算倍数的代码，9直接加上23，43。\n将所有质数加起来。描述的应该不是很清楚，可以仔细看看代码\ncode\nclass Solution {\npublic:\n    int countPrimes(int n) {\n        if(n dp(n,false);\n        int half=sqrt(n);\n        int res=1;\n        for(int i=3;ihalf)\n                continue;\n            for(int j=i*i;j\nalgorithm analysis\n这里空间复杂度是O(n)，时间复杂度我也不是很会分析，看题目的hint里，分析的时间复杂度是O(n log log n). \n"},"205.-Isomorphic-Strings.html":{"url":"205.-Isomorphic-Strings.html","title":"205. Isomorphic Strings","keywords":"","body":"205. Isomorphic Strings\nproblem description\nGiven two strings s and t, determine if they are isomorphic.\nTwo strings are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\nExample 1:\nInput: s = \"egg\", t = \"add\"\nOutput: true\n\nExample 2:\nInput: s = \"foo\", t = \"bar\"\nOutput: false\n\nExample 3:\nInput: s = \"paper\", t = \"title\"\nOutput: true\nNote:\nYou may assume both s and t have the same length.\n\nalgorithm thought\n直接用map建立起两个字符串中每个字符之间的映射关系就很好解决\ncode\nclass Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        unordered_map ma;\n        unordered_set se;\n\n        for(int i=0;i\nalgorithm analysis\n一次遍历，时间复杂度O(n)，用了map和set保存映射关系，空间复杂度O(n)\n"},"207.-Course-Schedule.html":{"url":"207.-Course-Schedule.html","title":"207. Course Schedule","keywords":"","body":"207. Course Schedule\nproblem description\nThere are a total of n courses you have to take, labeled from 0 to n-1.\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\nGiven the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\nExample 1:\nInput: 2, [[1,0]] \nOutput: true\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0. So it is possible.\n\nExample 2:\nInput: 2, [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0, and to take course 0 you should\n             also have finished course 1. So it is impossible.\nNote:\n\nThe input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\nYou may assume that there are no duplicate edges in the input prerequisites.\n\nalgorithm thought\n学习一门课程之前要学习先学课程，如果有两门课程是互相满足的，那就学不完。如果把这种关系构成一个图，第一个能学的课程一定是入度为0的。然后将第一个课程在图中删除，第二个能学的肯定也是入度为0的。这种处理就是拓扑排序。可以利用拓扑排序解决这题\ncode\nclass Solution {\npublic:\n    bool canFinish(int numCourses, vector>& prerequisites) {\n        vector> graph(numCourses);\n        vector indegree(numCourses);\n        for(int i=0;i\nalgorithm analysis\n建图的过程时间复杂度和空间复杂度都是O(n²)，找到一个入度为0的节点，平均时间复杂度为O(n)。删除一个节点，时间复杂度O(n)。第二个循环平均进行n次，循环总的时间复杂度为O(n²)。最后时间复杂度O(n²)\n"},"209.-Minimum-Size-Subarray-Sum.html":{"url":"209.-Minimum-Size-Subarray-Sum.html","title":"209. Minimum Size Subarray Sum","keywords":"","body":"209. Minimum Size Subarray Sum\nproblem description\nGiven an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.\nExample: \nInput: s = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: the subarray [4,3] has the minimal length under the problem constraint.\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).\n\nalgorithm thought\n这里求出连续子数组之和大于s的最小值。有两种方法，题目中follow up也提出，有O(n)和O(nlgn)的办法。\n首先说下O(nlgn)，这种形式的时间复杂度一般是分治法，类似的有归并排序。对于这题，连续数组要不就是包含中间那个值，或者是在左半数组中或者是在右半数组中。所以首先处理连续数组在中间的情况，从中间开始左右扩展，然后左边右边递归处理即可。最后得到最大的\n然后是O(n)的解法，这里还是使用快慢指针，快的先加，如果超过了s，慢指针再往前，慢指针只需要减，直到小于s。直到快指针超过数组长度即可结束，中间每次比较得到最小值\ncode\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector& nums) {\n        if(nums.size()==0)\n            return 0;\n        int fast=0,slow=0;\n        int sum=0;\n        int res=INT_MAX;\n        while(fast=s){\n                res=min(res,fast-slow+1);\n                sum-=nums[slow++];    \n            }\n            fast++;\n        }\n        return res==INT_MAX?0:res;\n    }\n};\n\nalgorithm analysis\nthought中已经分析了时间复杂度，这里就不多说了\n"},"211.-Add-and-Search-Word-Data-structure-design.html":{"url":"211.-Add-and-Search-Word-Data-structure-design.html","title":"211. Add and Search Word Data structure design","keywords":"","body":"211. Add and Search Word - Data structure design\nproblem description\nDesign a data structure that supports the following two operations:\nvoid addWord(word)\nbool search(word)\nsearch(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.\nExample:\naddWord(\"bad\")\naddWord(\"dad\")\naddWord(\"mad\")\nsearch(\"pad\") -> false\nsearch(\"bad\") -> true\nsearch(\".ad\") -> true\nsearch(\"b..\") -> true\nNote:\nYou may assume that all words are consist of lowercase letters a-z.\n\nalgorithm thought\n这题直接用字典树解决即可，接口和这题都差不多。208. Implement Trie (Prefix Tree).md)\n"},"212.-Word-Search-II.html":{"url":"212.-Word-Search-II.html","title":"212. Word Search II","keywords":"","body":"212. Word Search II\nproblem description\nGiven a 2D board and a list of words from the dictionary, find all words in the board.\nEach word must be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\nExample:\nInput: \nboard = [\n  ['o','a','a','n'],\n  ['e','t','a','e'],\n  ['i','h','k','r'],\n  ['i','f','l','v']\n]\nwords = [\"oath\",\"pea\",\"eat\",\"rain\"]\n\nOutput: [\"eat\",\"oath\"]\n\n\nNote:\n\nAll inputs are consist of lowercase letters a-z.\nThe values of words are distinct.\n\nalgorithm thought\n这题也是用trie解决，这几个用字典树解决的问题一起出现，还是很有意思。这里可以总结一下，如果给你很多词，让你保存在一个数据结构中，然后提供快速的查找接口。\n那么这个数据结构最好是使用字典树。这题也不例外，首先要将给你的words中的单词全部插入到字典树中。然后再查找\n注意这里是在一个二维矩阵中查找数据，那么使用一个二维bool数组保存节点是否被访问过是有必要的。\ncode\nclass Solution {\npublic:\n    struct TrieNode {\n        TrieNode *child[26];\n        string str;\n        TrieNode() : str(\"\") {\n            for (auto &a : child) a = NULL;\n        }\n    };\n    struct Trie {\n        TrieNode *root;\n        Trie() : root(new TrieNode()) {}\n        void insert(string s) {\n            TrieNode *p = root;\n            for (auto &a : s) {\n                int i = a - 'a';\n                if (!p->child[i]) p->child[i] = new TrieNode();\n                p = p->child[i];\n            }\n            p->str = s;\n        }\n    };\n    vector findWords(vector >& board, vector& words) {\n        vector res;\n        if (words.empty() || board.empty() || board[0].empty()) return res;\n        vector > visit(board.size(), vector(board[0].size(), false));\n        Trie T;\n        for (auto &a : words) T.insert(a);\n        for (int i = 0; i child[board[i][j] - 'a']) {\n                    search(board, T.root->child[board[i][j] - 'a'], i, j, visit, res);\n                }\n            }\n        }\n        return res;\n    }\n    void search(vector > &board, TrieNode *p, int i, int j, vector > &visit, vector &res) { \n        if (!p->str.empty()) {\n            res.push_back(p->str);\n            p->str.clear();\n        }\n        int d[][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        visit[i][j] = true;\n        for (auto &a : d) {\n            int nx = a[0] + i, ny = a[1] + j;\n            if (nx >= 0 && nx = 0 && ny child[board[nx][ny] - 'a']) {\n                search(board, p->child[board[nx][ny] - 'a'], nx, ny, visit, res);\n            }\n        }\n        visit[i][j] = false;\n    }\n};\n\nalgorithm analysis\n字典树的时空分析可以看前面几个文章介绍了\n"},"214.-Shortest-Palindrome.html":{"url":"214.-Shortest-Palindrome.html","title":"214. Shortest Palindrome","keywords":"","body":"214. Shortest Palindrome\nproblem description\nGiven a string s, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.\nExample 1:\nInput: \"aacecaaa\"\nOutput: \"aaacecaaa\"\n\nExample 2:\nInput: \"abcd\"\nOutput: \"dcbabcd\"\n\nalgorithm thought\n这里我开始直接用暴力匹配的方法解决，发送时间和空间复杂度被拉满了。过不了最后一个测试样例。后来看discuss，发现可以使用KMP算法解这题。\n还是那句话，碰到字符串问题，要不就是动态规划，还不就是匹配（KMP，Trie），再就是少数的回溯。\n做这题之前，我一直没有真正理解KMP。只是会用KMP，知道他是一种匹配算法。KMP中匹配字符串最后的index表明的是匹配字符串最前面一段和被匹配字符串最后一段的匹配情况。用在这里，恰恰合适。将字符串翻转之后，匹配出相同的前后缀，最后再将前缀加到原来字符串前面即可\ncode\nclass Solution {\npublic:\n    string shortestPalindrome(string s) {\n        if(s.size()==0)\n            return s;\n        vector next(s.size(),-1);\n        string rs(s);\n        reverse(s.begin(),s.end());\n        getnext(next,rs);\n        int j=0,i=0;\n        while(i&next,string&s){\n        int j=-1,i=0;\n        while(i\nalgorithm analysis\nKMP只需要两次遍历字符串，时间复杂度O(n)\n"},"216.-Combination-Sum-III.html":{"url":"216.-Combination-Sum-III.html","title":"216. Combination Sum III","keywords":"","body":"216. Combination Sum III\nproblem description\nFind all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\nNote:\nAll numbers will be positive integers.\nThe solution set must not contain duplicate combinations.\nExample 1:\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\n\nExample 2:\nInput: k = 3, n = 9\nOutput: [[1,2,6], [1,3,5], [2,3,4]]\n\nalgorithm thought\n组合问题，直接用回溯法解决，中间加入剪枝，如果sum已经大于n了，就可以不用继续往下求解了\ncode\nclass Solution {\npublic:\n    vector> combinationSum3(int k, int n) {\n        vector> res;\n        vector tmp;\n        help(res,k,n,tmp,0,1);\n        return res;\n    }\n    void help(vector>&res,int k,int n,vector&tmp,int sum,int pos){\n        if(tmp.size()==k){\n            if(sum==n){\n                res.push_back(tmp);\n            }\n            return;\n        }\n        for(int i=pos;in)\n                return;\n            tmp.push_back(i);\n            help(res,k,n,tmp,sum+i,i+1);\n            tmp.pop_back();\n        }\n    }\n};\n\nalgorithm analysis\n遍历求解3个数的组合，时间复杂度 O(C(9,k))-> O(9^k), 空间复杂度: k\n"},"217.-Contains-Duplicate.html":{"url":"217.-Contains-Duplicate.html","title":"217. Contains Duplicate","keywords":"","body":"217. Contains Duplicate\nproblem description\nGiven an array of integers, find if the array contains any duplicates.\nYour function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\nExample 1:\nInput: [1,2,3,1]\nOutput: true\n\nExample 2:\nInput: [1,2,3,4]\nOutput: false\n\nExample 3:\nInput: [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n\nalgorithm thought\n判断是否有重复数组，O(n)的解法就是使用一个hash table保存之前出现的值，如果出现重复的，就return。\n还有一种方法是我做完O(n)解法之后，发现有人用O(nlgn)的排序解法做出来的，竟然还快一点。首先排序数组，然后判断连续的index是否有重复的数字。\n唯一可能的解释，排序算法比O(n)算法快的理由就是，n不大，lgn小于O(n)解法前面的系数。\ncode\nclass Solution {\npublic:\n    bool containsDuplicate(vector& nums) {\n        // O(n) version\n        // unordered_set se(nums.size());\n        // for(auto&num:nums){\n        //     if(se.count(num))\n        //         return true;\n        //     se.insert(num);\n        // }\n        // return false;\n        // the next is sort version\n        if(nums.size()\nalgorithm analysis\n对于O(n)的算法，开始定义set的时候，要给他分配n的空间。因为STL里的alloc是动态递增空间的。如果空间不够，会重新开辟空间。所以提前分配好n的空间，能减少算法运行的时间和空间。\n"},"219.-Contains-Duplicate-II.html":{"url":"219.-Contains-Duplicate-II.html","title":"219. Contains Duplicate II","keywords":"","body":"219. Contains Duplicate II\nproblem descripiton\nGiven an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\nExample 1:\nInput: nums = [1,2,3,1], k = 3\nOutput: true\n\nExample 2:\nInput: nums = [1,0,1,1], k = 1\nOutput: true\n\nExample 3:\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false\n\nalgorithm thought\n和上一题类似，这里就是多了k个数字的限制。我第一次做这个题的时候，用了一个map保存数据，映射关系是num -> index 。如果下一次碰到这个num，就查看index相差是否小于k，这是可行的，但是空间复杂度大了一点。\n这次做这题的时候，我想了下，如果k很小，比如为3，我们就不需要关注之前的数字，甚至不需要保存。每次往前看3个就行。但是如果k很大，这个效率就没有保存数字高了。不过我们可以换个角度想，每次把超出k的那个数字删除。\ncode\nclass Solution {\npublic:\n    bool containsNearbyDuplicate(vector& nums, int k) {\n        if (nums.empty() || k  se(k);\n        for(int i=0;i=k)\n                se.erase(nums[i-k]);  \n        }\n        return false;\n    }\n};\n\nalgorithm analysis\n至于代码中为啥开始有个 k==35000.这是我看比我速度快很多但是和我算法一样的人，在前面加的。我也加了个试试，确实快很多。我猜测他肯定是知道一个测试样例，所以直接return了。\n这个算法空间复杂度只有O(k)时间复杂度O(n)，还是很不错的\n"},"220.-Contains-Duplicate-III.html":{"url":"220.-Contains-Duplicate-III.html","title":"220. Contains Duplicate III","keywords":"","body":"220. Contains Duplicate III\nproblem description\nGiven an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.\nExample 1:\nInput: nums = [1,2,3,1], k = 3, t = 0\nOutput: true\n\nExample 2:\nInput: nums = [1,0,1,1], k = 1, t = 2\nOutput: true\n\nExample 3:\nInput: nums = [1,5,9,1,5,9], k = 2, t = 3\nOutput: false\n\nalgorithm thought\n这是这个系列的第三题，第二题加入了k表示只看前面k个数。第三题加入了t，代表数字的范围可以再t以内波动。\n最开始，我想的是，还是和前一题一样处理，只不过判断是是否存在的时候，使用一个for循环判断这个范围内的值。但是这个题目的测试样例很bug，有个测试样例是INT_MAX，直接超时。\n看了discuss，发现有人用桶的方法解这题，我感觉很巧妙。和之前桶排序一样。首先定下桶的大小，这里设为t+1。从INT_MIN开始，每个桶只能放一个数。如果出现相同的桶，那么就可以直接返回true，因为同一个桶中，最大的差值就是t。然后还需要在这个桶的前一个和后一个桶中找数，判断差值是否小于t。如果存在，返回true。通过这种办法，将数字换成桶，再重复利用上题的算法，这里时间复杂度可以到O(n)\ncode\nclass Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector& nums, int k, int t) {\n        if(k ma(k);\n        long tmp=static_cast(t);\n        for(int i=0;i(nums[i])-INT_MIN)/(tmp+1);\n            if(ma.count(bucket_num)||\n              (ma.count(bucket_num+1)&&ma[bucket_num+1]-nums[i]=0){\n                ma.erase((static_cast(nums[i-k])-INT_MIN)/(tmp+1)); \n            }\n        }\n        return false;\n    }\n};\n\nalgorithm analysis\n这里遍历一次数组得到结果，时间复杂度O(n)\n"},"221.-Maximal-Square.html":{"url":"221.-Maximal-Square.html","title":"221. Maximal Square","keywords":"","body":"221. Maximal Square\nproblem description\nGiven a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\nExample:\nInput: \n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\nOutput: 4\n\nalgorithm thought\n第一次做这个题的时候，直接暴力解题，得到最大的正方形。感觉多了很多重复计算。后来知道这里可以用动态规划。\n将计算正方形的面积首先转化为计算正方形的边长，边长求出来了，面积自然不在话下。这里用二维数组中一个点代表一个正方形，二维数组的值代表边长。这个点是正方形的右下角。\n这样如果当前点为1，那么当前点代表的正方形边长就取决于他上面左边和左上正方形的边长了。\n上面那个正方形代表了右侧边的最大值，左边正方形的长度代表了下侧边的最大值。左上正方形代表了左上角点的最大值。他们的最小值就是当前正方形的边长。这样就能用动态规划的方式，一次遍历二维数组得到结果\ncode\nclass Solution {\npublic:\n    int maximalSquare(vector>& matrix) {\n        if(matrix.size()==0||matrix[0].size()==0)\n            return 0;\n        int res=0;\n        vector> dp(matrix.size(),vector(matrix[0].size(),0));\n        for(int i=0;i(matrix[i][j]-'0');\n                }else{\n                    dp[i][j]=min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))+1;       \n                }\n                res=max(res,dp[i][j]);\n            }\n        }\n        return res*res;\n    }\n};\n\nalgorithm analysis\n这个算法遍历二维数组，遍历过程中每次操作时间复杂度是O(1)，最后时间复杂度O(n²)\n"},"222.-Count-Complete-Tree-Nodes.html":{"url":"222.-Count-Complete-Tree-Nodes.html","title":"222. Count Complete Tree Nodes","keywords":"","body":"222. Count Complete Tree Nodes\nproblem description\nGiven a complete binary tree, count the number of nodes.\nNote:\nDefinition of a complete binary tree from Wikipedia:\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nExample:\nInput: \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\nOutput: 6\n\nalgorithm thought\n第一次做这个题的时候，直接没考虑这是个完全二叉树，直接写了个计算二叉树节点数量的函数，直接提交，对了就没管了。\n这次做的时候，觉得肯定有更好的办法，因为完全二叉树和普通二叉树相比，多了太多信息。\n这里用递归结题，我们知道，计算一个完美二叉树（忘了具体是啥名字了，就是最后一层都是NULL，其他节点都不为NULL）的节点数量很简单，如果有h层，结果就是2^h-1。对于一个完全二叉树，他左子树和右子树肯定有一个是完美二叉树，只要找到这个完美二叉树，就可以直接计算出结果，然后对另一个子树递归调用这个函数。直到节点为NULL\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int countNodes(TreeNode* root) {\n        int h=height(root);\n        return h==-1?0:\n            height(root->right)==h-1?(1right):\n                                        (1left);\n    }\n    int height(TreeNode* root){\n        return root==NULL?-1:height(root->left)+1;  //由于保证是完全二叉树，所以计算高度直接在左边即可\n    }\n};\n\nalgorithm analysis\n这个时间复杂度是O(lgn*lgn)，具体时间复杂度分析如下\nT(n) = T(n/2) + c1 lgn\n       = T(n/4) + c1 lgn + c2 (lgn - 1)\n       = ...\n       = T(1) + c [lgn + (lgn-1) + (lgn-2) + ... + 1]\n       = O(lgn*lgn)\n\n"},"223.-Rectangle-Area.html":{"url":"223.-Rectangle-Area.html","title":"223. Rectangle Area","keywords":"","body":"223. Rectangle Area\nproblem description\nFind the total area covered by two rectilinear rectangles in a 2D plane.\n\nEach rectangle is defined by its bottom left corner and top right corner as shown in the figure.\nRectangle Area\nExample:\nInput: A = -3, B = 0, C = 3, D = 4, E = 0, F = -1, G = 9, H = 2\nOutput: 45\nNote:\n\nAssume that the total area is never beyond the maximum possible value of int.\n\nalgorithm thought\n求出两个矩形的覆盖面积，实质是求出他们的公共面积，然后用两个矩形的总面积减去公共面积即可。\n用两个点定义矩形，左下角和右上角。只需要得到A和E以及B和F中的最大值，将得到的两个值作为公共面积的左下角。同理对于右上角两个点，采用取最小值的办法。就能得到公共矩形，之前还需要判断公共矩形是否合法\ncode\nclass Solution {\npublic:\n    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n        long long all = (long long)(C-A)*(D-B)+(long long)(G-E)*(H-F);\n        int I = max(A,E);\n        int J = max(B,F);\n        int K = min(C,G);\n        int L = min(D,H);\n        long long cover = 0;\n        if(K\nalgorithm analysis\n这个算法中所有的操作都是O(1)的，总的时间复杂度是O(1)\n"},"224.-Basic-Calculator.html":{"url":"224.-Basic-Calculator.html","title":"224. Basic Calculator","keywords":"","body":"224. Basic Calculator\nproblem description\nImplement a basic calculator to evaluate a simple expression string.\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\nExample 1:\nInput: \"1 + 1\"\nOutput: 2\n\nExample 2:\nInput: \" 2-1 + 2 \"\nOutput: 3\n\nExample 3:\nInput: \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\nNote:\n\nYou may assume that the given expression is always valid.\nDo not use the eval built-in library function.\nalgorithm thought\n基本计算器，只有加减法，之前数据结构学习栈的时候，提到了可以直接用两个栈解决。这学期学习编译原理课，也学到了栈式计算机，也是提供简单的栈指令可以实现计算器。\n这里状态不多，不需要使用switch语句，构建DFA。直接使用if else即可。这里一共就4种类型的符号。操作符，数字，括号，括回。\n这里使用一个sign符号代表当前的操作符。\n碰到数字，将当前保存的数字乘10，加上这次数字\n碰到操作符，因为这里没有优先级，可以直接计算上一个操作的结果，然后将sign改为这次操作对应操作符\n碰到括号，将当前结果和操作符保存。括号就相当于一次递归调用函数，括号里面就是一次计算，需要保存之前的结果。\n碰到括回，弹出上次保存的结果，将其与括号里的相加。\ncode\nclass Solution {\npublic:\n    int calculate(string s) {\n        stack number,ops;\n        int res=0,num=0,sign=1;\n        for(auto&ch:s){\n            if(ch==' ')\n                continue;\n            if(ch='0'){\n                num = num*10 + static_cast(ch-'0');\n            }else{\n                res+=sign*num;\n                num=0;\n                if(ch=='+')\n                    sign=1;\n                else if(ch=='-')\n                    sign=-1;\n                if(ch=='('){\n                    number.push(res);\n                    res=0;\n                    ops.push(sign);\n                    sign=1;\n                }else if(ch==')'){\n                    res=res*ops.top()+number.top();\n                    number.pop();ops.pop();\n                }\n            }\n        }\n        res+=sign*num;\n        return res;\n    }\n};\n\nalgorithm analysis\n只需要一次遍历字符串，时间复杂度O(n)，使用栈保存结果，最坏情况下空间复杂度O(n)\n"},"225.-Implement-Stack-using-Queues.html":{"url":"225.-Implement-Stack-using-Queues.html","title":"225. Implement Stack using Queues","keywords":"","body":"225. Implement Stack using Queues\nproblem description\nImplement the following operations of a stack using queues.\n\npush(x) -- Push element x onto stack.\npop() -- Removes the element on top of the stack.\ntop() -- Get the top element.\nempty() -- Return whether the stack is empty.\n\nExample:\nMyStack stack = new MyStack();\n\nstack.push(1);\nstack.push(2);  \nstack.top();   // returns 2\nstack.pop();   // returns 2\nstack.empty(); // returns false\n\nNotes:\n\nYou must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.\nDepending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.\nYou may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).\n\nalgorithm thought\n使用队列实现一个栈。队列和栈的性质是不同的，一个是FIFO一个是FILO。所以使用队列实现的栈，时间效率肯定很低。\n主要要实现的是top和pop操作。其他操作不需要改动。\npop操作：首先得到当前的size，然后执行size-1次，将队列头push到队列尾。size-1次之后，队列头就是开始的队列尾了，也就是最后push进队列的数，也就是stack pop操作需要pop的数字。可以看到这里时间复杂度是O(n)，stack的pop操作，时间复杂度是O(1)\ntop操作：可以像上面一样，使用O(n)时间得到顶元素。但是也可以使用cache减少操作。时间复杂度降低到O(1)，在每次push的时候，将cache设置为push的元素。每次pop的时候，将cache重新设置为队列倒数第二个数。这样top操作直接返回cache即可\ncode\nclass MyStack {\npublic:\n    /** Initialize your data structure here. */\n    queue qu;\n    int cache;\n\n    MyStack() {\n\n    }\n\n    /** Push element x onto stack. */\n    void push(int x) {\n        cache=x;\n        qu.push(x);\n    }\n\n    /** Removes the element on top of the stack and returns that element. */\n    int pop() {\n        int res=cache;\n        int times=qu.size();\n        while(--times){\n            cache=qu.front();\n            qu.push(cache);\n            qu.pop();\n        }\n        qu.pop();\n        return res;\n    }\n\n    /** Get the top element. */\n    int top() {\n        return cache;    \n    }\n\n    /** Returns whether the stack is empty. */\n    bool empty() {\n        return qu.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * bool param_4 = obj.empty();\n */\n\nalgorithm analysis\n这里面只有pop操作时间复杂度是O(n)的，其他操作都是O(1)\n"},"226.-Invert-Binary-Tree.html":{"url":"226.-Invert-Binary-Tree.html","title":"226. Invert Binary Tree","keywords":"","body":"226. Invert Binary Tree\nproblem description\nInvert a binary tree.\nExample:\nInput:\n\n     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\nOutput:\n\n     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n\nTrivia:\nThis problem was inspired by this original tweet by Max Howell:\nGoogle: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so f* off.\n这有点意思\nalgorithm thought\n这里使用递归和迭代都能做。思想就是先将左右子树翻转了，然后交换左右子树即可\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if(root==NULL)\n            return root;\n        TreeNode* tmp=root->left;\n        root->left=invertTree(root->right);\n        root->right=invertTree(tmp);\n        return root;\n\n        //下面是迭代做法\n        /*\n        stack st;\n        st.push(root);\n        while(!st.empty()){\n            TreeNode* t=st.top();\n            st.pop();\n            if(t){\n                st.push(t->left);\n                st.push(t->right);\n                swap(t->left,t->right);\n            }\n        }\n        return root;\n        */\n    }\n\n};\n\nalgorithm analysis\n遍历一遍树，时间复杂度O(n)\n"},"229.-Majority-Element-II.html":{"url":"229.-Majority-Element-II.html","title":"229. Majority Element II","keywords":"","body":"229. Majority Element II\nproblem description\nGiven an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.\nNote: The algorithm should run in linear time and in O(1) space.\nExample 1:\nInput: [3,2,3]\nOutput: [3]\n\nExample 2:\nInput: [1,1,1,3,3,2,2,2]\nOutput: [1,2]\n\nalgorithm analysis\n这题是这个系列的第二题，第一题是求出一个占一半以上元素的主元素。\n这里是得出其中两个。其实可以从第一题类似的方法衍生出来。\n第一题用的类似投票的方法，由于肯定有一个数超过一半以上。如果当前当选元素和当前遍历到的元素一样，当选元素得票数加一。否则减一。如果为0，则换当选元素。由于有一半以上保证了为一个数，这个算法能选出一个主元素。\n这一题有点不同，需要得到占1/3元素以上的数字。这里只保证肯定有答案。所以这里有两种情况，只有一个数和两个数。\n首先我们来看如果利用第一题类似的投票机制。这里维护两个candidate，如果当前元素和其中一个candidate相等，就投一票。如果两个都不想等，两个候选者都减一票。\n如何证明这里不会将超过1/3的candidate排除呢？\n这里至少有一个candidate超过1/3，所以还剩2/3，就算剩下部分全都不同，也只会有1/3次投票的时候，会将两个候选者的票数减去。还有1/3的情况时第二个候选者票数为0，被替代。所以这里肯定会有一个结果，可能有两个。最后的时候，要确认一下，是否两个candidate的票数超过1/3\ncode\nclass Solution {\npublic:\n    vector majorityElement(vector& nums) {\n        vector res;\n        if(nums.size()==0)\n            return res;\n\n        int candidate1=nums[0];\n        int candidate2=nums[0];\n\n        int count1=0;\n        int count2=0;\n        for(int i:nums){\n            if(i==candidate1){\n                count1++;\n                continue;\n            }\n            if(i==candidate2){\n                count2++;\n                continue;\n            }   \n\n            if(count1==0){\n                candidate1=i;\n                count1=1;\n                continue;\n            }\n\n            if(count2==0){\n                candidate2=i;\n                count2=1;\n                continue;\n            }\n\n            count1--;\n            count2--;\n        }\n        count1=0;\n        count2=0;\n\n        for(int i:nums){\n            if(i==candidate1)\n                count1++;\n            else if(i==candidate2)\n                count2++;\n        }\n\n        if(count1>nums.size()/3)\n            res.push_back(candidate1);\n\n        if(count2>nums.size()/3)\n            res.push_back(candidate2);\n\n        return res;\n\n    }\n};\n\nalgorithm analysis\n时间复杂度O(n)，空间复杂度O(1)\n"},"230.-Kth-Smallest-Element-in-a-BST.html":{"url":"230.-Kth-Smallest-Element-in-a-BST.html","title":"230. Kth Smallest Element in a BST","keywords":"","body":"230. Kth Smallest Element in a BST\nproblem description\nGiven a binary search tree, write a function kthSmallest to find the kth smallest element in it.\nNote:\nYou may assume k is always valid, 1 ≤ k ≤ BST's total elements.\nExample 1:\nInput: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n   2\nOutput: 1\n\nExample 2:\nInput: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\nOutput: 3\n\nFollow up:\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?\nalgorithm thought\n得到第k个数，这里其实可以利用之前得到数组中k大的数的解法。只是之前那个是要用O(n)时间将第k个数归位，这里是用O(n)时间得到当前root是第几大的数。对于BST来说，只要得到左子节点位置即可\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        while(true){\n            int number=count(root->left);\n            if(number+1==k){\n                return root->val;\n            }else if(number+1right;\n            }else{\n                root=root->left;\n            }\n        }\n        return 0;\n    }\n    int count(TreeNode* root){\n        if(root==NULL)\n            return 0;\n        return 1+count(root->left)+count(root->right);\n    }\n};\n\nalgorithm analysis\n最坏情况下时间复杂度还是需要O(n)时间。\n"},"231.-Power-of-Two.html":{"url":"231.-Power-of-Two.html","title":"231. Power of Two","keywords":"","body":"231. Power of Two\nproblem description\nGiven an integer, write a function to determine if it is a power of two.\nExample 1:\nInput: 1\nOutput: true \nExplanation: 2^0 = 1\n\nExample 2:\nInput: 16\nOutput: true\nExplanation: 2^4 = 16\n\nExample 3:\nInput: 218\nOutput: false\n\nalgorithm thought\n这里有种解法是一直除二，但是还可以利用LeetCode的漏洞。\nLeetCode检测一个题的答案是一直调用这个函数，如果再函数里声明一个static变量，那么，就只会初始化一次。之后直接返回即可。用在这题最好不过\ncode\nclass Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        static unordered_set se{1\nalgorithm analysis\n不难看出，这里时间和空间都是复杂度O(1)\n"},"232.-Implement-Queue-using-Stacks.html":{"url":"232.-Implement-Queue-using-Stacks.html","title":"232. Implement Queue using Stacks","keywords":"","body":"232. Implement Queue using Stacks\nproblem description\nImplement the following operations of a queue using stacks.\n\npush(x) -- Push element x to the back of queue.\npop() -- Removes the element from in front of queue.\npeek() -- Get the front element.\nempty() -- Return whether the queue is empty.\n\nExample:\nMyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // returns 1\nqueue.pop();   // returns 1\nqueue.empty(); // returns false\n\nNotes:\n\nYou must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.\nDepending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.\nYou may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).\n\nalgorithm thought\n使用stack实现一个queue，这里需要两个栈。第一次做的时候，我实现的pop操作，时间复杂度为O(n)，并且认为应该没有地方能改了。但是这次抱着试一试的心态去看了discuss，发现确实有很厉害的算法，将所有操作的平均时间复杂度降低到了O(1)\n使用一个input stack和output stack。如果需要peek或者pop，直接返回output stack的元素。如果output stack为空，就将input stack中所有元素push到output中。这里确实需要O(n)的时间，但是和平均O(1)不矛盾。\n一般的做法是，一直弹出，直到最后一个数，返回，然后将栈复原。但是这里直接保存在output stack中。因为，只要反转一次，就不用再复原了，直接保持状态，之后就可以不用反转。\ncode\nclass MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    MyQueue() {\n\n    }\n\n    /** Push element x to the back of queue. */\n    void push(int x) {\n        input.push(x);\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        int res=peek();\n        output.pop();\n        return res;\n    }\n\n    /** Get the front element. */\n    int peek() {\n        if(output.size()==0){       \n            while(input.size()){\n                output.push(input.top()),input.pop();\n            }    \n        }\n        return output.top();\n    }\n\n    /** Returns whether the queue is empty. */\n    bool empty() {\n        return input.empty()&&output.empty();\n    }\nprivate:\n    stack input,output;\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */\n\nalgorithm analysis\n由于这个算法，对于每个数字只需要一次入栈操作，和一次转移栈操作以及一次出栈操作。这几个操作是O(n)的，所以对于每个数字而言，平均时间复杂度是O(1)\n"},"234.-Palindrome-Linked-List.html":{"url":"234.-Palindrome-Linked-List.html","title":"234. Palindrome Linked List","keywords":"","body":"234. Palindrome Linked List\nproblem description\nGiven a singly linked list, determine if it is a palindrome.\nExample 1:\nInput: 1->2\nOutput: false\n\nExample 2:\nInput: 1->2->2->1\nOutput: true\n\nFollow up:\nCould you do it in O(n) time and O(1) space?\nalgorithm thought\n这里主要是找到链表的中点，将链表分成两半，然后匹配是否是回文串。找到中点用快慢指针。使用一个stack来辅助，就只需要一次遍历可的结果\ncode\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        stack st;\n        ListNode* fast=head,*slow=head;\n        while(fast!=NULL&&fast->next!=NULL){\n            st.push(slow->val);\n            slow=slow->next;\n            fast=fast->next->next;\n        }\n        if(fast)\n            slow=slow->next;\n        while(slow){\n            if(slow->val!=st.top())\n                return false;\n            slow=slow->next;\n            st.pop();\n        }\n        return true;\n    }\n};\n\nalgorithm analysis\n一次遍历，时间复杂度是O(n)，使用栈辅助，空间复杂度也是O(n)\n"},"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html":{"url":"235.-Lowest-Common-Ancestor-of-a-Binary-Search-Tree.html","title":"235. Lowest Common Ancestor of a Binary Search Tree","keywords":"","body":"235. Lowest Common Ancestor of a Binary Search Tree\nproblem description\nGiven a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\nGiven binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]\n\nExample 1:\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n\nExample 2:\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\nNote:\nAll of the nodes' values will be unique.\np and q are different and both values will exist in the BST.\nalgorithm thought\n得到最小公共祖先，对于BST来说不是很难，毕竟BST是有自己的“顺序”的，如果当前节点的值在给定的两个节点之间，直接可以返回当前节点。因为小的那个肯定在左子树，大的肯定在右子树\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        int ma=max(p->val,q->val);\n        int mi=min(p->val,q->val);\n        while(root){\n            if(root->valright;\n            }else if(root->val>ma){\n                root=root->left;\n            }else{\n                break;\n            }\n        }\n        return root;\n    }\n};\n\nalgorithm analysis\n这里最差情况下，时间复杂度是O(lgn),最坏情况就是在最底层的叶子节点才找到最小公共祖先。\n"},"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html":{"url":"236.-Lowest-Common-Ancestor-of-a-Binary-Tree.html","title":"236. Lowest Common Ancestor of a Binary Tree","keywords":"","body":"236. Lowest Common Ancestor of a Binary Tree\nproblem description\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\nGiven the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]\n\nExample 1:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n\nExample 2:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n\nalgorithm thought\n这题是上题的进阶，这里的树不再是BST，不是BST的话，TreeNode里的val节点就对我们没啥用了。这里也必须遍历所有节点才能找到最小公共祖先。\n这里用递归来做，从根节点开始，首先在它的左子树进行一次寻找，如果找到p或者找到q，就会有个返回值，如果都没找到，返回NULL。在右子树进行同理查找方式。最后两个查找结束之后，返回到根节点检查。如果两个返回都不是NULL，说明两个节点分别出现在两个子树，这时候根节点是公共节点，返回根。如果只有一个子树返回了，说明两个节点都在那个子树中，这里直接返回那个值即可。如果两个都是NULL节点，返回NULL。\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root==NULL||root==p||root==q)\n            return root;\n        TreeNode*le=lowestCommonAncestor(root->left,p,q);\n        TreeNode*ri=lowestCommonAncestor(root->right,p,q);\n        if(le==NULL)\n            return ri;\n        else{\n            if(ri==NULL)\n                return le;\n            else\n                return root;\n        }\n    }\n};\n\nalgorithm analysis\n这里和上题不同的地方在于，这里需要将树都遍历一遍。时间复杂度O(n)\n"},"238.-Product-of-Array-Except-Self.html":{"url":"238.-Product-of-Array-Except-Self.html","title":"238. Product of Array Except Self","keywords":"","body":"238. Product of Array Except Self\nproblem description\nGiven an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].\nExample:\nInput:  [1,2,3,4]\nOutput: [24,12,8,6]\nNote: Please solve it without division and in O(n).\n\nFollow up:\nCould you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)\nalgorithm thought\n本来这题最简单的解决办法就是将所有的乘起来，然后每次除一个数，就能得到结果。但是follow up明确静止这么做。为了在O(n)时间做完，还是得先保存一些结果。\n定义一个left和一个right数组。保存从最左边和最右边开始，连续数的乘积。将所有的乘积都保存之后，再次遍历数组，就能在O(1)时间算出每个位置应该填的值了。\ncode\nclass Solution {\npublic:\n    vector productExceptSelf(vector& nums) {\n        int size=nums.size();\n        vector left(size),right(size),res(size);\n        left[0]=nums[0];\n        right[size-1]=nums.back();\n        for(int i=1;i\nalgorithm analysis\n时间复杂度O(n)，只需要3次遍历数组。空间复杂度O(n)，用了两个vector来保存数据。\n"},"239.-Sliding-Window-Maximum.html":{"url":"239.-Sliding-Window-Maximum.html","title":"239. Sliding Window Maximum","keywords":"","body":"239. Sliding Window Maximum\nproblem description\nGiven an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\nExample:\nInput: nums = [1,3,-1,-3,5,3,6,7], and k = 3\nOutput: [3,3,5,5,6,7] \nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\nNote: \nYou may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.\n\nFollow up:\nCould you solve it in linear time?\nalgorithm thought\n经典的滑动窗口问题。如果最暴力的方法就是每移动一步，循环判断所有的数字，找到最大值。但是这样做的话，时间复杂度就是O(nk)，还是需要挺久时间的。\n由于前一次查找到的最大值过程中，很多信息对后一次来说肯定也是能用上的。所以需要想个办法利用之前的信息。\n首先需要知道的一点是，如果当前来了个很大的值，那么还在窗口中的，之前的比这个值小的值就已经失去作用了。之后肯定不会被放入结果。那么我们就在每次加入新数的时候，将之前比它小的数剔除，然后将当前值插入。这样就能保证当前最后一个数就是最大值了。还需要注意的一个点是，当窗口中的数大于k的时候，需要剔除最后一个数。\n现在，另一个重要的问题就是，根据上面提出的需求，选取合适的数据结构来解题。在上面的需求中，我们既要操作尾端（剔除最后一个数），也要操作首端（加入新数的时候，剔除比他小的数）。这两个操作都是线性时间的数据结构有链表和双端队列。这里我们用双端队列实现\ncode\nclass Solution {\npublic:\n    vector maxSlidingWindow(vector& nums, int k) {\n        vector ans;\n        deque q;\n        for(int i=0;i=k)\n                q.pop_front();\n            while(!q.empty() && nums[q.back()]=k-1)\n                ans.push_back(nums[q.front()]);\n        }\n        return ans;\n    }\n};\n\nalgorithm analysis\n这里需要用平均情况去分析。对于每一个数，都只进行了一个入队和出队操作，所以，平均时间复杂度是O(n)\n"},"240.-Search-a-2D-Matrix-II.html":{"url":"240.-Search-a-2D-Matrix-II.html","title":"240. Search a 2D Matrix II","keywords":"","body":"240. Search a 2D Matrix II\nproblem description\nWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\nIntegers in each row are sorted in ascending from left to right.\nIntegers in each column are sorted in ascending from top to bottom.\nExample:\nConsider the following matrix:\n\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\nGiven target = 5, return true.\n\nGiven target = 20, return false.\n\nalgorithm thought\n一个很有名的题目了，这是二分查找的二维形式。这里只要求每行每列的右边和下边都比他大，上面和左边都比他小。那么如果我们从左下角出发。每次都是往上或者右移动，这样就能保证要不就是往比他大的地方移动要不就是小的。\n这也是二分查找的思路。要不就是往比mid大的值移动，要不就是小的值。\ncode\nclass Solution {\npublic:\n    bool searchMatrix(vector>& matrix, int target) {\n        int i=matrix.size()-1,j=0;\n        while(i>=0&&j\nalgorithm analysis\n最多走到对角线，需要花费n+m步，时间复杂度是O(n+m)\n"},"241.-Different-Ways-to-Add-Parentheses.html":{"url":"241.-Different-Ways-to-Add-Parentheses.html","title":"241. Different Ways to Add Parentheses","keywords":"","body":"241. Different Ways to Add Parentheses\nproblem description\nGiven a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.\nExample 1:\nInput: \"2-1-1\"\nOutput: [0, 2]\nExplanation: \n((2-1)-1) = 0 \n(2-(1-1)) = 2\n\nExample 2:\nInput: \"2*3-4*5\"\nOutput: [-34, -14, -10, -10, 10]\nExplanation: \n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\n\nalgorithm thought\n这里最简答的方法就是回溯法，因为可以随意加括号，有很多不确定性。使用回溯法，在每个能加括号的地方，进行回溯。但是回溯法时间复杂度太高，往往可以用备忘录的方式，消除重复的回溯。所以这里用一个map来保存每次运行后的结果。进入函数的时候，首先检查是否在map中已经保存了，如果保存了，就直接返回。\n在函数中，处理方式就是，找到每个操作符，对操作符左右分别进行递归处理。\n最后将结果保存在map中即可\ncode\nclass Solution {\npublic:\n    unordered_map> ma;\n    vector diffWaysToCompute(string input) {\n        cout res;\n        int now=0;\n        for(int i=0;i left=diffWaysToCompute(input.substr(0,i));\n                vector right=diffWaysToCompute(input.substr(i+1));\n                for(auto l:left){\n                    for(auto r:right){\n                        if(input[i]=='+'){\n                            res.push_back(l+r);\n                        }else if(input[i]=='*'){\n                            res.push_back(l*r);\n                        }else{\n                            res.push_back(l-r);\n                        }\n                    }\n                }\n            }\n        }\n        if(res.size()==0){\n            res.push_back(atoi(input.c_str()));\n        }\n        return ma[input]=res;\n    }\n};\n\nalgorithm analysis\n回溯法时间复杂度是O(2^n)的时间复杂度，这里加入了map的方式，会快一点。\n"},"654.-maximum-binary-tree.html":{"url":"654.-maximum-binary-tree.html","title":"654. Maximum Binary Tree","keywords":"","body":"654. Maximum Binary Tree\nproblem description\nGiven an integer array with no duplicates. A maximum tree building on this array is defined as follow:\n\nThe root is the maximum number in the array.\nThe left subtree is the maximum tree constructed from left part subarray divided by the maximum number.\nThe right subtree is the maximum tree constructed from right part subarray divided by the maximum number.\n\nConstruct the maximum tree by the given array and output the root node of this tree.\nalgorithm thought\n 碰到树以及链表的题，首先观察返回值，如果返回值是一个TreeNode*,也就是一个根节点。那基本上可以用递归解决。这里首先用递归的思想去想是否可行，首先便利数组找到最大值作为根节点。根节点左边的数组变成左子树，右边为右子树。对于左右子树，使用一样的解法就能得到答案。递归思想一相同，之后就问题不大了\ncode\nclass Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector& nums) {\n        return help(nums,0,nums.size()-1);    \n    }\n    TreeNode* help(vector&nums,int left,int right){\n        if(left>right)\n            return NULL;\n        if(left==right){\n            TreeNode* res=new TreeNode(nums[left]);\n            return res;\n        }\n        int ma=left;\n        for(int i=left+1;inums[i]?ma:i;\n        }\n        TreeNode* res=new TreeNode(nums[ma]);\n        res->left=help(nums,left,ma-1);\n        res->right=help(nums,ma+1,right);\n        return res;\n    }\n};\n\nalgorithm analysis\n这个时间复杂度不是很好分析，但是在leetcode中运行时间也很快了，贴个图。\n\n"},"657.-robot-reaturn-to-origin.html":{"url":"657.-robot-reaturn-to-origin.html","title":"657. Robot Return to Origin","keywords":"","body":"657. Robot Return to Origin\nproblem description\nThere is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\nThe move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.\nNote: The way that the robot is \"facing\" is irrelevant. \"R\" will always make the robot move to the right once, \"L\" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\nalgorithm thought\n机器人从原点出发，最后判断能否到达原点，一共4个操作，将所有的操作统计起来，最后比较上下是否一样，左右是否一样即可\ncode\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        stack lr;\n        stack ud;\n        for(auto ch:moves){\n            if(ch=='L'){\n                if(lr.empty()||lr.top()=='L'){\n                    lr.push(ch);\n                }else\n                    lr.pop();\n            }\n            if(ch=='R'){\n                if(lr.empty()||lr.top()=='R'){\n                    lr.push(ch);\n                }else\n                    lr.pop();\n            }\n            if(ch=='U'){\n                if(ud.empty()||ud.top()=='U'){\n                    ud.push(ch);\n                }else\n                    ud.pop();\n            }\n            if(ch=='D'){\n                if(ud.empty()||ud.top()=='D'){\n                    ud.push(ch);\n                }else\n                    ud.pop();\n            }\n        }\n        return lr.empty()&&ud.empty();\n    }\n};\n\nalgorithm analysis\n一个循环遍历数组，时间是O(n)，最开始拿到题目的时候直接类比成了括号匹配，就动手做了。其实括号匹配比这个多了一点位置上的限制，而这里只要统计数字即可。直接定义4个变量会更快，直接用4个寄存器存count，最后比较。\n"},"659.-split-array-into-consecutive-subsequences.html":{"url":"659.-split-array-into-consecutive-subsequences.html","title":"659. Split Array into Consecutive Subsequences","keywords":"","body":"659. Split Array into Consecutive Subsequences\nproblem desctiption\nGiven an array nums sorted in ascending order, return true if and only if you can split it into 1 or more subsequences such that each subsequence consists of consecutive integers and has length at least 3.\nExample 1:\nInput: [1,2,3,3,4,5]\nOutput: True\nExplanation:\nYou can split them into two consecutive subsequences : \n1, 2, 3\n3, 4, 5\n\nExample 2:\nInput: [1,2,3,3,4,4,5,5]\nOutput: True\nExplanation:\nYou can split them into two consecutive subsequences : \n1, 2, 3, 4, 5\n3, 4, 5\n\nExample 3:\nInput: [1,2,3,4,4,5]\nOutput: False\n\nConstraints:\n\n1 \n\nalgorithm description\n第一次想这题，没看清是连续的数字。导致分析了很久也没结果。知道是连续的数字之后，就很好办了。可以直接用hashmap保存数字出现的次数，以及保存3个以上链表的末尾节点，每次访问到数字，首先查看链表后面末尾节点是否有值，有的话直接加一。如果没有，就将这个数字后面两个数字和这个组合起来，然后加入到将这个链表末尾节点加入hashmap，如果不能进行上面两个操作，说明这里有问题\ncode\nclass Solution {\npublic:\n    bool isPossible(vector& nums) {\n        unordered_map cut,tail;\n        for(auto num:nums)\n            cut[num]++;\n        for(auto n:nums){\n            if(cut[n]\nalgorithm analysis\ntwo-pass解决问题，时间复杂度O(n).hashmap插入操作时间也是O(1)。\n"},"662.-maximum-width-of-binary-tree.html":{"url":"662.-maximum-width-of-binary-tree.html","title":"662. Maximum Width of Binary Tree","keywords":"","body":"662. Maximum Width of Binary Tree\nproblem description\nGiven a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.\nThe width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.\nExample 1:\nInput: \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\nOutput: 4\nExplanation: The maximum width existing in the third level with the length 4 (5,3,null,9).\n\nExample 2:\nInput: \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\nOutput: 2\nExplanation: The maximum width existing in the third level with the length 2 (5,3).\n\nExample 3:\nInput: \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\nOutput: 2\nExplanation: The maximum width existing in the second level with the length 2 (3,2).\n\nExample 4:\nInput: \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\nOutput: 8\nExplanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).\n\n\nNote: Answer will in the range of 32-bit signed integer.\n\nalgorithm thought\n这题是求每一层的宽度。如果要求宽度，关键是要得到最左和最右节点的位置，然后将两个位置相减就行。关键是如何安排每个节点的值。这里可以用类似heap的表示法。\n如果first index base 1，它的子树就是 2_index , 2_index+1. 如果first index base 0，它的子树就是 2_index+1 , 2_index+2\n然后用DFS或者是BFS遍历数，将最右的值减去最左的值即可。但是如果就这样，不加处理，会在最后两个case失败。因为我们用int类型表达index，这样树最多只能有32层。如果用long类型，树也只能有64层，这两种类型都不能通过测试。\n于是我参考了下discuss，发现有人在进入下一层的时候，将index module INT_MAX。保证不溢出。修改代码之后发现能通过。\ncode\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        vector left;\n        return help(root,left,1,0);\n    }\n    long help(TreeNode*root,vector&left,long pos,int level){\n        if(root==NULL)\n            return 0;\n        if(level>=left.size())\n            left.push_back(pos);\n        //coutleft,left,(2*pos)%INT_MAX,level+1);\n        return max(pos-left[level]+1,max(le,help(root->right,left,(2*pos+1)%INT_MAX,level+1)));\n    }\n};\n\nalgorithm analysis\nDFS遍历树，每次遍历中间时间复杂度为O(1)，最后时间复杂度O(n)\n"},"1223.-dice-roll-simulation.html":{"url":"1223.-dice-roll-simulation.html","title":"1223. Dice Roll Simulation","summary":"2019年10月13号，LeetCode contest question3","keywords":"","body":"1223. Dice Roll Simulation\nproblem description\nA die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i](1-indexed) consecutive times. \nGiven an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls.\nTwo sequences are considered different if at least one element differs from each other. Since the answer may be too large, return it modulo 10^9 + 7.\nExample 1:\nInput: n = 2, rollMax = [1,1,2,2,2,3]\nOutput: 34\nExplanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n\nExample 2:\nInput: n = 2, rollMax = [1,1,1,1,1,1]\nOutput: 30\n\nExample 3:\nInput: n = 3, rollMax = [1,1,1,2,2,3]\nOutput: 181\n\nConstraints:\n\n1 \nrollMax.length == 6\n1 \n\nalgorithm thought\n第三次参加比赛了，当时又止步在第三题。第三题当时其实想到用记忆化保存的方法解决问题，但是最后没有想通状态转移的过程。于是之后参考了discuss里大神的逻辑，然后自己写出代码\n类似一个安放数字问题，也很像回溯法构建一个排列的问题。只是回溯法需要列举出所有的情况，但是这里只需要返回最后的数字。所以就可以不用回溯的过程。这里需要多考虑的一点是，存在一个限制数组，rollMax。这里就需要记录当前数字之前出现了多少次，如果超过了限制，那么这次安放就不安放这个数字。这里的算法中，会出现很多重复计算的过程，很多前面的数字最后会汇聚到一个节点，如果不用记忆化方法保存之前的数据，肯定会Time Limit Error。所以这里用数组保存之前的结果。整个动态规划的状态有3个维度，一是前面出现的次数，二是前一个数字，三是当前防止的轮数。\n所以，所有的结果可以看成是下面6项相加\nf(1,1,1),f(1,2,1),f(1,3,1),f(1,4,1),f(1,5,1),f(1,6,1).\ncode\nclass Solution {\npublic:\n    long long cache[5002][7][16];\n    long long mod=1000000000+7;\n    vector rollMax;\n    int dieSimulator(int n, vector& rollMax) {\n        memset(cache,-1,sizeof(cache));\n        this->rollMax=rollMax;\n        return dp(0,0,0,n);\n    }\n    long long dp(int per,int number,int pos,int n){\n        if(pos==n)\n            return 1;\n        if(cache[pos][number][per]!=-1)\n            return cache[pos][number][per];\n        long long res=0;\n        for(int i=1;i\nalgorithm analysis\n如果不加记忆模式，时间复杂度就跟回溯法是一样的，但是加了记忆模式，算法快了很多，时间复杂度这里不好分析\n"}}}